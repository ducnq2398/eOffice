import { HTMLAttributes, ForwardRefExoticComponent, RefAttributes, ComponentType, ReactElement, NamedExoticComponent, MouseEvent as MouseEvent$1, FC, ElementType, ReactNode, PropsWithChildren, RefObject, Dispatch, MutableRefObject, Context, Reducer, useLayoutEffect, MemoExoticComponent } from 'react';
import { OverridableComponent } from '@material-ui/core/OverridableComponent';
import { SvgIconTypeMap } from '@material-ui/core';
import { PopperProps } from '@material-ui/core/Popper';
import { TextFieldProps } from '@material-ui/core/TextField';
import { OutputSelector } from 'reselect';

declare type GridRootProps = HTMLAttributes<HTMLDivElement>;
declare const GridRoot: ForwardRefExoticComponent<GridRootProps & RefAttributes<HTMLDivElement>>;

declare type GridColumnsContainerProps = HTMLAttributes<HTMLDivElement>;
declare const GridColumnsContainer: ForwardRefExoticComponent<GridColumnsContainerProps & RefAttributes<HTMLDivElement>>;

declare type GridDataContainerProps = HTMLAttributes<HTMLDivElement>;
declare function GridDataContainer(props: GridDataContainerProps): JSX.Element;

declare type GridFooterProps = HTMLAttributes<HTMLDivElement>;
declare const GridFooterContainer: (props: GridFooterProps) => JSX.Element;

declare type GridOverlayProps = HTMLAttributes<HTMLDivElement>;
declare function GridOverlay(props: GridOverlayProps): JSX.Element;

interface GridWindowProps extends HTMLAttributes<HTMLDivElement> {
    size: {
        width: number;
        height: number;
    };
}
declare const GridWindow: ForwardRefExoticComponent<GridWindowProps & RefAttributes<HTMLDivElement>>;

declare type GridToolbarContainerProps = HTMLAttributes<HTMLDivElement>;
declare const GridToolbarContainer: ForwardRefExoticComponent<GridToolbarContainerProps & RefAttributes<HTMLDivElement>>;

/**
 * The mode of the cell.
 */
declare type GridCellMode = 'edit' | 'view';
/**
 * The cell value type.
 */
declare type GridCellValue = string | number | boolean | Date | null | undefined | object;
/**
 * The coordinates of cell represented by their row and column indexes.
 */
interface GridCellIndexCoordinates {
    colIndex: number;
    rowIndex: number;
}

declare type GridRowsProp = GridRowData[];
declare type GridRowData = {
    [key: string]: any;
};
/**
 * The key value object representing the data of a row.
 */
declare type GridRowModel = ObjectWithId & GridRowData;
declare type GridUpdateAction = 'delete';
interface GridRowModelUpdate extends GridRowData {
    _action?: GridUpdateAction;
}
/**
 * The type of Id supported by the grid.
 */
declare type GridRowId = string | number;
/**
 * The function to retrieve the id of a [[GridRowData]].
 */
declare type GridRowIdGetter = (row: GridRowData) => GridRowId;
interface ObjectWithId {
    id: GridRowId;
}
/**
 * An helper function allowing to check if [[GridRowData]] is valid.
 *
 * @param row Row as [[GridRowData]].
 * @returns a boolean
 */
declare function checkGridRowHasId(row: GridRowModel | Partial<GridRowModel>, detailErrorMessage?: string): boolean;

/**
 * Object passed as parameter in the column [[GridColDef]] cell renderer.
 */
interface GridCellParams {
    /**
     * The HTMLElement that triggered the event
     */
    element?: HTMLElement;
    /**
     * The column field of the cell that triggered the event
     */
    field: string;
    /**
     * The cell value, but if the column has valueGetter, use getValue.
     */
    value: GridCellValue;
    /**
     * A function that let you get data from other columns.
     * @param field
     */
    getValue: (field: string) => GridCellValue;
    /**
     * The row model of the row that the current cell belongs to.
     */
    row: GridRowModel;
    /**
     * The column of the row that the current cell belongs to.
     */
    colDef: any;
    /**
     * The row index of the row that the current cell belongs to.
     */
    rowIndex?: number;
    /**
     * The column index that the current cell belongs to.
     */
    colIndex?: number;
    /**
     * GridApi that let you manipulate the grid.
     */
    api: any;
    /**
     * If true, the cell is editable.
     */
    isEditable?: boolean;
}
/**
 * Alias of GridCellParams.
 */
declare type ValueGetterParams = GridCellParams;
/**
 * Alias of GridCellParams.
 */
declare type ValueFormatterParams = GridCellParams;

/**
 * Alias of GridCellParams.
 */
declare type GridCellClassParams = GridCellParams;
/**
 * A function used to process cellClassParams.
 */
declare type GridCellClassFn = (params: GridCellClassParams) => string | string[];
/**
 * The union type representing the [[GridColDef]] cell class type.
 */
declare type GridCellClassNamePropType = string | string[] | GridCellClassFn;
/**
 * An object representing the cell class rules.
 */
declare type GridCellClassRules = {
    [cssClass: string]: ((params: GridCellClassParams) => boolean) | boolean;
};

interface GridFilterItem {
    id?: number;
    columnField?: string;
    value?: string;
    operatorValue?: string;
}
declare enum GridLinkOperator {
    And = "and",
    Or = "or"
}

interface FilterInputValueProps {
    item: GridFilterItem;
    applyValue: (value: GridFilterItem) => void;
    apiRef: any;
}

interface GridFilterOperator {
    label?: string;
    value: string;
    getApplyFilterFn: (filterItem: GridFilterItem, column: any) => null | ((params: GridCellParams) => boolean);
    InputComponent: ComponentType<FilterInputValueProps>;
    InputComponentProps?: Record<string, any>;
}

/**
 * Object passed as parameter in the column [[GridColDef]] header renderer.
 */
interface GridColParams {
    /**
     * The column field of the column that triggered the event
     */
    field: string;
    /**
     * The column of the current header component.
     */
    colDef: any;
    /**
     * The column index of the current header component.
     */
    colIndex: number;
    /**
     * API ref that let you manipulate the grid.
     */
    api: any;
}

declare type GridSortDirection = 'asc' | 'desc' | null | undefined;
declare type GridFieldComparatorList = {
    field: string;
    comparator: GridComparatorFn;
}[];
/**
 * The type of the sort comparison function.
 */
declare type GridComparatorFn = (v1: GridCellValue, v2: GridCellValue, cellParams1: GridCellParams, cellParams2: GridCellParams) => number;
/**
 * Object that represents the column sorted data, part of the [[GridSortModel]].
 */
interface GridSortItem {
    /**
     * The column field identifier.
     */
    field: string;
    /**
     * The direction of the column that the grid should sort.
     */
    sort: GridSortDirection;
}
/**
 * The model used for sorting the grid.
 */
declare type GridSortModel = GridSortItem[];

declare const GRID_STRING_COLUMN_TYPE = "string";
declare const GRID_NUMBER_COLUMN_TYPE = "number";
declare const GRID_DATE_COLUMN_TYPE = "date";
declare const GRID_DATETIME_COLUMN_TYPE = "dateTime";
declare type GridNativeColTypes = 'string' | 'number' | 'date' | 'dateTime';
declare type GridColType = GridNativeColTypes | string;

/**
 * Alignment used in position elements in Cells.
 */
declare type GridAlignment = 'left' | 'right' | 'center';
/**
 * Column Definition interface.
 */
interface GridColDef {
    /**
     * The column identifier. It's used to map with [[GridRowData]] values.
     */
    field: string;
    /**
     * The title of the column rendered in the column header cell.
     */
    headerName?: string;
    /**
     * The description of the column rendered as tooltip if the column header name is not fully displayed.
     */
    description?: string;
    /**
     * Set the width of the column.
     * @default 100
     */
    width?: number;
    /**
     * If set, it indicates that a column has fluid width. Range [0, âˆž].
     */
    flex?: number;
    /**
     * If `true`, hide the column.
     * @default false;
     */
    hide?: boolean;
    /**
     * If `true`, the column is sortable.
     * @default true
     */
    sortable?: boolean;
    /**
     * If `true`, the column is resizable.
     * @default true
     */
    resizable?: boolean;
    /**
     * If `true`, the cells of the column are editable.
     * @default true
     */
    editable?: boolean;
    /**
     * A comparator function used to sort rows.
     */
    sortComparator?: GridComparatorFn;
    /**
     * Type allows to merge this object with a default definition [[GridColDef]].
     * @default string
     */
    type?: GridColType;
    /**
     * Allows to align the column values in cells.
     */
    align?: GridAlignment;
    /**
     * Function that allows to get a specific data instead of field to render in the cell.
     * @param params
     */
    valueGetter?: (params: ValueGetterParams) => GridCellValue;
    /**
     * Function that allows to apply a formatter before rendering its value.
     * @param params
     */
    valueFormatter?: (params: ValueFormatterParams) => GridCellValue;
    /**
     * Class name that will be added in cells for that column.
     */
    cellClassName?: GridCellClassNamePropType;
    /**
     * Set of CSS class rules that will be dynamically applied on cells.
     */
    cellClassRules?: GridCellClassRules;
    /**
     * Allows to override the component rendered as cell for this column.
     * @param params
     */
    renderCell?: (params: GridCellParams) => ReactElement;
    /**
     * Allows to override the component rendered in edit cell mode for this column.
     * @param params
     */
    renderEditCell?: (params: GridCellParams) => ReactElement;
    /**
     * Class name that will be added in the column header cell.
     */
    headerClassName?: string | string[];
    /**
     * Allows to render a component in the column header cell.
     * @param params
     */
    renderHeader?: (params: GridColParams) => ReactElement;
    /**
     * Header cell element alignment.
     */
    headerAlign?: GridAlignment;
    /**
     * Toggle the visibility of the sort icons.
     */
    hideSortIcons?: boolean;
    /**
     * Allows to disable the click event in cells.
     */
    disableClickEventBubbling?: boolean;
    /**
     * If `true`, the column menu is disabled for this column.
     */
    disableColumnMenu?: boolean;
    /**
     * If `true`, the column is filterable.
     * @default true
     */
    filterable?: boolean;
    /**
     * Allows setting the filter operators for this column.
     */
    filterOperators?: GridFilterOperator[];
}
interface GridColumnProp extends Omit<GridColDef, 'filterOperators'> {
    filterOperators?: GridFilterOperator[] | string;
}
declare type GridColumns = GridColDef[];
declare type GridColTypeDef = Omit<GridColDef, 'field'> & {
    extendType?: GridNativeColTypes;
};
/**
 * Meta Info about columns.
 */
interface GridColumnsMeta {
    totalWidth: number;
    positions: number[];
}
declare type GridColumnLookup = {
    [field: string]: GridColDef;
};
interface GridInternalColumns {
    all: string[];
    lookup: GridColumnLookup;
}
declare const getInitialGridColumnsState: () => GridInternalColumns;

declare const gridCheckboxSelectionColDef: GridColDef;

declare const getGridColDef: (columnTypes: any, type: GridColType | undefined) => any;

declare function gridDateFormatter({ value }: {
    value: GridCellValue;
}): string | number | boolean | object | null | undefined;
declare function gridDateTimeFormatter({ value }: {
    value: GridCellValue;
}): string | number | boolean | object | null | undefined;
declare const GRID_DATE_COL_DEF: GridColTypeDef;
declare const GRID_DATETIME_COL_DEF: GridColTypeDef;

declare const getGridDateOperators: (showTime?: boolean) => GridFilterOperator[];

declare const GRID_NUMERIC_COL_DEF: GridColTypeDef;

declare const getGridNumericColumnOperators: () => GridFilterOperator[];

declare const GRID_STRING_COL_DEF: GridColTypeDef;

declare type GridColumnTypesRecord = Record<GridColType, GridColTypeDef>;

declare const DEFAULT_GRID_COL_TYPE_KEY = "__default__";
declare const getGridDefaultColumnTypes: () => GridColumnTypesRecord;

declare const getGridStringOperators: () => GridFilterOperator[];

interface FilterModelState {
    items: GridFilterItem[];
    linkOperator?: GridLinkOperator;
}
declare type FilterModel = FilterModelState;
declare const getInitialGridFilterState: () => FilterModelState;

interface Logger {
    debug: (...args: any[]) => void;
    info: (...args: any[]) => void;
    warn: (...args: any[]) => void;
    error: (...args: any[]) => void;
}
declare type LoggerFactoryFn = (name: string) => Logger;
declare function useLoggerFactory(customLogger?: Logger | LoggerFactoryFn, logLevel?: string | boolean): void;
declare function useLogger(name: string): Logger;

/**
 * Set the types of the texts in the grid.
 */
interface GridLocaleText {
    rootGridLabel: string;
    noRowsLabel: string;
    errorOverlayDefaultLabel: string;
    toolbarDensity: React.ReactNode;
    toolbarDensityLabel: string;
    toolbarDensityCompact: string;
    toolbarDensityStandard: string;
    toolbarDensityComfortable: string;
    toolbarColumns: React.ReactNode;
    toolbarColumnsLabel: string;
    toolbarFilters: React.ReactNode;
    toolbarFiltersLabel: string;
    toolbarFiltersTooltipHide: React.ReactNode;
    toolbarFiltersTooltipShow: React.ReactNode;
    toolbarFiltersTooltipActive: (count: number) => React.ReactNode;
    toolbarExport: React.ReactNode;
    toolbarExportLabel: string;
    toolbarExportCSV: React.ReactNode;
    columnsPanelTextFieldLabel: string;
    columnsPanelTextFieldPlaceholder: string;
    columnsPanelDragIconLabel: string;
    columnsPanelShowAllButton: React.ReactNode;
    columnsPanelHideAllButton: React.ReactNode;
    filterPanelAddFilter: React.ReactNode;
    filterPanelDeleteIconLabel: string;
    filterPanelOperators: React.ReactNode;
    filterPanelOperatorAnd: React.ReactNode;
    filterPanelOperatorOr: React.ReactNode;
    filterPanelColumns: React.ReactNode;
    filterPanelInputLabel: string;
    filterPanelInputPlaceholder: string;
    filterOperatorContains: string;
    filterOperatorEquals: string;
    filterOperatorStartsWith: string;
    filterOperatorEndsWith: string;
    filterOperatorIs: string;
    filterOperatorNot: string;
    filterOperatorAfter: string;
    filterOperatorOnOrAfter: string;
    filterOperatorBefore: string;
    filterOperatorOnOrBefore: string;
    columnMenuLabel: string;
    columnMenuShowColumns: React.ReactNode;
    columnMenuFilter: React.ReactNode;
    columnMenuHideColumn: React.ReactNode;
    columnMenuUnsort: React.ReactNode;
    columnMenuSortAsc: React.ReactNode;
    columnMenuSortDesc: React.ReactNode;
    columnHeaderFiltersTooltipActive: (count: number) => React.ReactNode;
    columnHeaderFiltersLabel: string;
    columnHeaderSortIconLabel: string;
    footerRowSelected: (count: number) => React.ReactNode;
    footerTotalRows: React.ReactNode;
}
declare type LocaleTextValue = string | React.ReactNode | Function;
declare type TranslationKeys = keyof GridLocaleText;
/**
 * The grid localeText API [[apiRef]].
 */
interface LocaleTextApi {
    /**
     * Get grid text.
     * @param key
     * @returns LocaleTextValue
     */
    getLocaleText: <T extends TranslationKeys>(key: T) => GridLocaleText[T];
}

/**
 * Available densities.
 */
declare type GridDensity = 'compact' | 'standard' | 'comfortable';
/**
 * Density enum.
 */
declare enum GridDensityTypes {
    Compact = "compact",
    Standard = "standard",
    Comfortable = "comfortable"
}

interface GridEditCellProps {
    value: GridCellValue;
    [prop: string]: any;
}
declare type GridEditRowUpdate = {
    [field: string]: GridEditCellProps;
};
declare type GridEditRowsModel = {
    [rowId: string]: GridEditRowUpdate;
};

declare const GridFeatureModeConstant: {
    client: "client";
    server: "server";
};
declare type GridFeatureMode = 'client' | 'server';

/**
 * Object passed as parameter of the filter changed event.
 */
interface GridFilterModelParams {
    /**
     * The filter model.
     */
    filterModel: FilterModel;
    /**
     * The full set of columns.
     */
    columns: GridColumns;
    /**
     * The full set of rows.
     */
    rows: GridRowModel[];
    /**
     * The set of currently visible rows.
     */
    visibleRows: GridRowModel[];
    /**
     * Api that let you manipulate the grid.
     */
    api: any;
}

/**
 * Object passed as parameter of the page change event handler.
 */
interface GridPageChangeParams {
    /**
     * The new page.
     */
    page: number;
    /**
     * The total number of pages.
     */
    pageCount: number;
    /**
     * The number of rows in a page.
     */
    pageSize: number;
    /**
     * The total number of rows.
     */
    rowCount: number;
    /**
     * The pagination mode set in options.
     * 'client' means that the pagination is handled on the client-side.
     * 'server' means that the pagination is handled on the server-side.
     */
    paginationMode: GridFeatureMode;
}

/**
 * Object passed as parameter in the column [[GridColDef]] cell renderer.
 */
interface GridRowParams {
    /**
     * The HTMLElement that triggered the event
     */
    element?: HTMLElement;
    /**
     * A function that let you get data from other columns.
     * @param field
     */
    getValue: (field: string) => GridCellValue;
    /**
     * The row model of the row that the current cell belongs to.
     */
    row: GridRowModel;
    /**
     * All grid columns.
     */
    columns: any;
    /**
     * The row index of the row that the current cell belongs to.
     */
    rowIndex: number;
    /**
     * GridApiRef that let you manipulate the grid.
     */
    api: any;
}

/**
 * Object passed as parameter as the row selected event handler.
 */
interface GridRowSelectedParams {
    /**
     * The row data of the row that triggers the event.
     */
    data: GridRowModel;
    /**
     * The selected state of the row that triggers the event.
     */
    isSelected: boolean;
    /**
     * GridApiRef that let you manipulate the grid.
     */
    api: any;
}

/**
 * Object passed as parameter as the selection change event handler.
 */
interface GridSelectionModelChangeParams {
    /**
     * The set of rows that had their selection state change.
     */
    selectionModel: GridRowId[];
}

/**
 * Object passed as parameter of the column sorted event.
 */
interface GridSortModelParams {
    /**
     * The sort model used to sort the grid.
     */
    sortModel: GridSortModel;
    /**
     * The full set of columns.
     */
    columns: GridColumns;
    /**
     * Api that let you manipulate the grid.
     */
    api: any;
}

declare type GridSelectionModel = GridRowId[];

interface GridEditCellParams {
    api: any;
    id: GridRowId;
    update: GridEditRowUpdate;
}
interface GridCellModeChangeParams {
    id: GridRowId;
    field: string;
    api: any;
    mode: GridCellMode;
}
interface GridEditRowModelParams {
    model: GridEditRowsModel;
    api: any;
}

/**
 * Grid options react prop, containing all the setting for the grid.
 */
interface GridOptions {
    /**
     * If `true`, the grid height is dynamic and follow the number of rows in the grid.
     * @default false
     */
    autoHeight?: boolean;
    /**
     * Set the height in pixel of a row in the grid.
     * @default 52
     */
    rowHeight: number;
    /**
     * Set the height in pixel of the column headers in the grid.
     * @default 56
     */
    headerHeight: number;
    /**
     * Override the height/width of the grid inner scrollbar.
     */
    scrollbarSize?: number;
    /**
     * Number of columns rendered outside the grid viewport.
     * @default 2
     */
    columnBuffer: number;
    /**
     * If `true`, multiple selection using the CTRL or CMD key is disabled.
     * @default false
     */
    disableMultipleSelection?: boolean;
    /**
     * If `true`, filtering with multiple columns is disabled.
     * @default false
     */
    disableMultipleColumnsFiltering?: boolean;
    /**
     * If `true`, sorting with multiple columns is disabled.
     * @default false
     */
    disableMultipleColumnsSorting?: boolean;
    /**
     * If `true`, resizing columns is disabled.
     * @default false
     */
    disableColumnResize?: boolean;
    /**
     * If `true`, column filters are disabled.
     * @default false
     */
    disableColumnFilter?: boolean;
    /**
     * If `true`, the column menu is disabled.
     * @default false
     */
    disableColumnMenu?: boolean;
    /**
     * If `true`, density selection is disabled.
     * @default false
     */
    disableDensitySelector?: boolean;
    /**
     * If `true`, reordering columns is disabled.
     * @default false
     */
    disableColumnReorder?: boolean;
    /**
     * If `true`, hiding/showing columns is disabled.
     * @default false
     */
    disableColumnSelector?: boolean;
    /**
     * If `true`, the right border of the cells are displayed.
     * @default false
     */
    showCellRightBorder?: boolean;
    /**
     * If `true`, the right border of the column headers are displayed.
     * @default false
     */
    showColumnRightBorder?: boolean;
    /**
     * If `true`, rows will not be extended to fill the full width of the grid container.
     * @default false
     */
    disableExtendRowFullWidth?: boolean;
    /**
     * The order of the sorting sequence.
     * @default ['asc', 'desc', null]
     */
    sortingOrder: GridSortDirection[];
    /**
     * If `true`, pagination is enabled.
     * @default false
     */
    pagination?: boolean;
    /**
     * Set the number of rows in one page.
     * @default 100
     */
    pageSize?: number;
    /**
     * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.
     * @default false
     */
    autoPageSize?: boolean;
    /**
     * Select the pageSize dynamically using the component UI.
     * @default [25, 50, 100]
     */
    rowsPerPageOptions?: number[];
    /**
     * Pagination can be processed on the server or client-side.
     * Set it to 'client' if you would like to handle the pagination on the client-side.
     * Set it to 'server' if you would like to handle the pagination on the server-side.
     */
    paginationMode?: GridFeatureMode;
    /**
     * Set the total number of rows, if it is different than the length of the value `rows` prop.
     */
    rowCount?: number;
    /**
     * Set the current page.
     * @default 1
     */
    page?: number;
    /**
     * Sorting can be processed on the server or client-side.
     * Set it to 'client' if you would like to handle sorting on the client-side.
     * Set it to 'server' if you would like to handle sorting on the server-side.
     */
    sortingMode?: GridFeatureMode;
    /**
     * Filtering can be processed on the server or client-side.
     * Set it to 'client' if you would like to handle filtering on the client-side.
     * Set it to 'server' if you would like to handle filtering on the server-side.
     */
    filterMode?: GridFeatureMode;
    /**
     * Edit cell or rows can be processed on the server or client-side.
     * Set it to 'client' if you would like to handle editing on the client-side.
     * Set it to 'server' if you would like to handle editing on the server-side.
     */
    editMode?: GridFeatureMode;
    /**
     * If `true`, the footer component is hidden.
     * @default false
     */
    hideFooter?: boolean;
    /**
     * If `true`, the row count in the footer is hidden.
     * @default false
     */
    hideFooterRowCount?: boolean;
    /**
     * If `true`, the selected row count in the footer is hidden.
     * @default false
     */
    hideFooterSelectedRowCount?: boolean;
    /**
     * If `true`, the pagination component in the footer is hidden.
     * @default false
     */
    hideFooterPagination?: boolean;
    /**
     * If `true`, the grid get a first column with a checkbox that allows to select rows.
     * @default false
     */
    checkboxSelection?: boolean;
    /**
     * If `true`, the selection on click on a row or cell is disabled.
     * @default false
     */
    disableSelectionOnClick?: boolean;
    /**
     * Pass a custom logger in the components that implements the [[Logger]] interface.
     * @default null
     */
    logger?: Logger;
    /**
     * Allows to pass the logging level or false to turn off logging.
     * @default debug
     */
    logLevel?: string | false;
    /**
     * Set the sort model of the grid.
     */
    sortModel?: GridSortModel;
    /**
     * Set the filter model of the grid.
     */
    filterModel?: FilterModel;
    /**
     * Set the selection model of the grid.
     */
    selectionModel?: GridSelectionModel;
    /**
     * Callback fired when a click event comes from a cell element.
     * @param param With all properties from [[GridCellParams]].
     */
    onCellClick?: (param: GridCellParams) => void;
    /**
     * Callback fired when a double click event comes from a cell element.
     * @param param With all properties from [[CellParams]].
     */
    onCellDoubleClick?: (param: GridCellParams) => void;
    /**
     * Callback fired when a hover event comes from a cell element.
     * @param param With all properties from [[GridCellParams]].
     */
    onCellHover?: (param: GridCellParams) => void;
    /**
     * Callback fired when a click event comes from a row container element.
     * @param param With all properties from [[GridRowParams]].
     */
    onRowClick?: (param: GridRowParams) => void;
    /**
     * Callback fired when a click event comes from a row container element.
     * @param param With all properties from [[RowParams]].
     */
    onRowDoubleClick?: (param: GridRowParams) => void;
    /**
     * Callback fired when a hover event comes from a row container element.
     * @param param With all properties from [[GridRowParams]].
     */
    onRowHover?: (param: GridRowParams) => void;
    /**
     * Callback fired when one row is selected.
     * @param param With all properties from [[GridRowSelectedParams]].
     */
    onRowSelected?: (param: GridRowSelectedParams) => void;
    /**
     * Callback fired when the selection state of one or multiple rows changes.
     * @param param With all properties from [[SelectionChangeParams]].
     */
    onSelectionModelChange?: (param: GridSelectionModelChangeParams) => void;
    /**
     * Callback fired when a click event comes from a column header element.
     * @param param With all properties from [[GridColParams]].
     */
    onColumnHeaderClick?: (param: GridColParams) => void;
    /**
     * Callback fired when the sort model changes before a column is sorted.
     * @param param With all properties from [[GridSortModelParams]].
     */
    onSortModelChange?: (params: GridSortModelParams) => void;
    /**
     * Callback fired when the Filter model changes before the filters are applied.
     * @param param With all properties from [[GridFilterModelParams]].
     */
    onFilterModelChange?: (params: GridFilterModelParams) => void;
    /**
     * Callback fired when the current page has changed.
     * @param param With all properties from [[GridPageChangeParams]].
     */
    onPageChange?: (param: GridPageChangeParams) => void;
    /**
     * Callback fired when the page size has changed.
     * @param param With all properties from [[GridPageChangeParams]].
     */
    onPageSizeChange?: (param: GridPageChangeParams) => void;
    /**
     * Callback fired when an exception is thrown in the grid, or when the `showError` API method is called.
     */
    onError?: (args: any) => void;
    /**
     * Callback fired when the state of the grid is updated.
     */
    onStateChange?: (params: any) => void;
    /**
     * Set the edit rows model of the grid.
     */
    editRowsModel?: GridEditRowsModel;
    /**
     * Callback fired when a cell is rendered, returns true if the cell is editable.
     */
    isCellEditable?: (params: GridCellParams) => boolean;
    /**
     * Callback fired when the EditRowModel changed.
     * @param handler
     */
    onEditRowModelChange?: (params: GridEditRowModelParams) => void;
    /**
     * Callback fired when the cell mode changed.
     * @param handler
     */
    onCellModeChange?: (params: GridCellModeChangeParams) => void;
    /**
     * Callback fired when the edit cell value changed.
     * @param handler
     */
    onEditCellChange?: (params: GridEditCellParams) => void;
    /**
     * Callback fired when the cell changes are committed.
     * @param handler
     */
    onEditCellChangeCommitted?: (params: GridEditCellParams) => void;
    /**
     * Extend native column types with your new column types.
     */
    columnTypes: GridColumnTypesRecord;
    /**
     * Set the density of the grid.
     */
    density: GridDensity;
    /**
     * Set the locale text of the grid.
     * You can find all the translation keys supported in [the source](https://github.com/mui-org/material-ui-x/blob/HEAD/packages/grid/_modules_/grid/constants/localeTextConstants.ts) in the GitHub repository.
     */
    localeText: Partial<GridLocaleText>;
}
/**
 * The default [[GridOptions]] object that will be used to merge with the 'options' passed in the react component prop.
 */
declare const DEFAULT_GRID_OPTIONS: GridOptions;

interface GridColumnHeaderItemProps {
    colIndex: number;
    column: GridColDef;
    isDragging: boolean;
    isResizing: boolean;
    sortDirection: GridSortDirection;
    sortIndex?: number;
    options: GridOptions;
    filterItemsCounter?: number;
}
declare const GridColumnHeaderItem: ({ column, colIndex, isDragging, isResizing, sortDirection, sortIndex, options, filterItemsCounter, }: GridColumnHeaderItemProps) => JSX.Element;

interface GridColumnHeaderSeparatorProps extends HTMLAttributes<HTMLDivElement> {
    resizable: boolean;
    resizing: boolean;
    height: number;
}
declare const GridColumnHeaderSeparator: NamedExoticComponent<GridColumnHeaderSeparatorProps>;

interface ColumnHeaderSortIconProps {
    direction: GridSortDirection;
    index: number | undefined;
    hide?: boolean;
}
declare const GridColumnHeaderSortIcon: NamedExoticComponent<ColumnHeaderSortIconProps>;

interface GridColumnHeaderTitleProps {
    label: string;
    columnWidth: number;
    description?: string;
}
declare function GridColumnHeaderTitle(props: GridColumnHeaderTitleProps): JSX.Element;

/**
 * The size of a container.
 */
interface ElementSize {
    /**
     * The height of a container or HTMLElement.
     */
    height: number;
    /**
     * The width of a container or HTMLElement.
     */
    width: number;
}

interface GridScrollBarState {
    /**
     * Indicates if a vertical scrollbar is visible.
     */
    hasScrollY: boolean;
    /**
     * Indicates if an horizontal scrollbar is visible.
     */
    hasScrollX: boolean;
    /**
     * The scrollbar size.
     */
    scrollBarSize: {
        x: number;
        y: number;
    };
}
/**
 * the size of the container holding the set of rows visible to the user.
 */
declare type GridViewportSizeState = ElementSize;
/**
 * The set of container properties calculated on resize of the grid.
 */
interface GridContainerProps {
    /**
     * The maximum number of rows that will be rendered at any given time in the grid.
     */
    renderingZonePageSize: number;
    /**
     * The number of rows that fit in the viewport.
     */
    viewportPageSize: number;
    /**
     * The number of rows allocated for the rendered zone.
     */
    virtualRowsCount: number;
    /**
     * The last page number.
     */
    lastPage: number;
    /**
     * The total element size required to render the set of rows, including scrollbars.
     */
    totalSizes: ElementSize;
    /**
     * The viewport size including scrollbars.
     */
    windowSizes: ElementSize;
    /**
     * The size of the container containing all the rendered rows.
     */
    renderingZone: ElementSize;
    /**
     * The total element size required to render the full set of rows and columns, minus the scrollbars.
     */
    dataContainerSizes: ElementSize;
}

interface ColumnMenuState {
    open: boolean;
    field?: string;
    id?: string;
    labelledby?: string;
}

interface ColumnReorderState {
    dragCol: string;
}
declare function getInitialGridColumnReorderState(): ColumnReorderState;

interface GridGridDensity {
    value: GridDensity;
    rowHeight: number;
    headerHeight: number;
}

interface VisibleGridRowsState {
    visibleRowsLookup: Record<GridRowId, boolean>;
    visibleRows?: GridRowId[];
}
declare const getInitialVisibleGridRowsState: () => VisibleGridRowsState;

interface KeyboardState {
    cell: GridCellIndexCoordinates | null;
    isMultipleKeyPressed: boolean;
}

interface PaginationState {
    page: number;
    pageCount: number;
    pageSize: number;
    rowCount: number;
    paginationMode: GridFeatureMode;
}
declare const SET_PAGE_ACTION = "SET_PAGE_ACTION";
declare const SET_PAGESIZE_ACTION = "SET_PAGESIZE_ACTION";
declare const SET_PAGINATION_MODE_ACTION = "SET_PAGINATION_MODE_ACTION";
declare const SET_ROWCOUNT_ACTION = "SET_ROWCOUNT_ACTION";
declare type SetPageAction = {
    type: typeof SET_PAGE_ACTION;
    payload: {
        page: number;
    };
};
declare type SetPageSizeAction = {
    type: typeof SET_PAGESIZE_ACTION;
    payload: {
        pageSize: number;
    };
};
declare type SetPaginationModeAction = {
    type: typeof SET_PAGINATION_MODE_ACTION;
    payload: {
        paginationMode: GridFeatureMode;
    };
};
declare type SetRowCountAction = {
    type: typeof SET_ROWCOUNT_ACTION;
    payload: {
        totalRowCount: number;
    };
};
declare type PaginationActions = SetPageAction | SetPageSizeAction | SetPaginationModeAction | SetRowCountAction;
declare function setGridPageActionCreator(page: number): SetPageAction;
declare function setGridPageSizeActionCreator(pageSize: number): SetPageSizeAction;
declare function setGridPaginationModeActionCreator(payload: {
    paginationMode: any;
}): SetPaginationModeAction;
declare function setGridRowCountActionCreator(payload: {
    totalRowCount: number;
}): SetRowCountAction;
declare const getGridPageCount: (pageSize: number | undefined, rowsCount: number) => number;
declare const setGridPageStateUpdate: (state: PaginationState, { page }: {
    page: number;
}) => PaginationState;
declare const setGridPageSizeStateUpdate: (state: PaginationState, payload: {
    pageSize: number;
}) => PaginationState;
declare const setGridRowCountStateUpdate: (state: any, payload: any) => PaginationState;
declare const GRID_INITIAL_PAGINATION_STATE: PaginationState;
declare const gridPaginationReducer: (state: PaginationState, action: PaginationActions) => PaginationState;

declare enum GridPreferencePanelsValue {
    filters = "filters",
    columns = "columns"
}

interface GridPreferencePanelState {
    open: boolean;
    openedPanelValue?: GridPreferencePanelsValue;
}

interface InternalGridRowsState {
    idRowsLookup: Record<GridRowId, GridRowModel>;
    allRows: GridRowId[];
    totalRowCount: number;
}
declare const getInitialGridRowState: () => InternalGridRowsState;

declare type GridSelectionState = Record<GridRowId, boolean>;

interface GridSortingState {
    sortedRows: GridRowId[];
    sortModel: GridSortModel;
}
declare function getInitialGridSortingState(): GridSortingState;

interface GridScrollParams {
    left: number;
    top: number;
}
declare type GridScrollFn = (v: GridScrollParams) => void;

/**
 * The object containing the column properties of the rendering state.
 */
interface GridRenderColumnsProps {
    /**
     * The index of the first rendered column.
     */
    firstColIdx: number;
    /**
     * The index of the last rendered column.
     */
    lastColIdx: number;
    /**
     * The left offset required to position the viewport at the beginning of the first rendered column.
     */
    leftEmptyWidth: number;
    /**
     * The right offset required to position the viewport to the end of the last rendered column.
     */
    rightEmptyWidth: number;
}
/**
 * The object containing the row properties of the rendering state.
 */
interface GridRenderRowProps {
    /**
     * The rendering zone page calculated from the scroll position.
     */
    page: number;
    /**
     * The index of the first rendered row.
     */
    firstRowIdx: number;
    /**
     * The index of the last rendered row.
     */
    lastRowIdx: number;
}
/**
 * The object containing the pagination properties of the rendering state.
 */
interface GridRenderPaginationProps {
    /**
     * The current page if pagination is enabled.
     */
    paginationCurrentPage?: number;
    /**
     * The page size if pagination is enabled.
     */
    pageSize?: number;
}
/**
 * The full rendering state.
 */
declare type GridRenderContextProps = GridRenderColumnsProps & GridRenderRowProps & GridRenderPaginationProps;

interface InternalRenderingState {
    virtualPage: number;
    virtualRowsCount: number;
    renderContext: Partial<GridRenderContextProps> | null;
    realScroll: GridScrollParams;
    renderingZoneScroll: GridScrollParams;
    renderedSizes: GridContainerProps | null;
}
declare const getInitialGridRenderingState: () => InternalRenderingState;

interface GridState {
    rows: InternalGridRowsState;
    editRows: GridEditRowsModel;
    pagination: PaginationState;
    options: GridOptions;
    isScrolling: boolean;
    columns: GridInternalColumns;
    columnReorder: ColumnReorderState;
    columnMenu: ColumnMenuState;
    rendering: InternalRenderingState;
    containerSizes: GridContainerProps | null;
    viewportSizes: GridViewportSizeState;
    scrollBar: GridScrollBarState;
    sorting: GridSortingState;
    keyboard: KeyboardState;
    selection: GridSelectionState;
    filter: FilterModelState;
    visibleRows: VisibleGridRowsState;
    preferencePanel: GridPreferencePanelState;
    density: GridGridDensity;
}
declare const getInitialGridState: () => GridState;

declare const gridScrollbarStateSelector: (state: GridState) => GridScrollBarState;
declare const GridColumnsHeader: ForwardRefExoticComponent<RefAttributes<HTMLDivElement>>;

interface GridColumnHeadersItemCollectionProps {
    columns: GridColumns;
}
declare function GridColumnHeadersItemCollection(props: GridColumnHeadersItemCollectionProps): JSX.Element;

declare const GridArrowUpwardIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridArrowDownwardIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridFilterListIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridFilterAltIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridSearchIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridMenuIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridCheckCircleIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridColumnIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridSeparatorIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridViewHeadlineIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridTableRowsIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridViewStreamIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridTripleDotsVerticalIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridCloseIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridAddIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridLoadIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridDragIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;
declare const GridSaveAltIcon: OverridableComponent<SvgIconTypeMap<{}, "svg">>;

interface FilterItemProps {
    column: GridColDef;
    onClick: (event: MouseEvent$1<any>) => void;
}

declare const GridColumnsMenuItem: FC<FilterItemProps>;

declare const GridFilterMenuItem: FC<FilterItemProps>;

interface GridColumnHeaderMenuProps {
    ContentComponent: ElementType;
    contentComponentProps?: any;
}
declare function GridColumnHeaderMenu({ ContentComponent, contentComponentProps, }: GridColumnHeaderMenuProps): JSX.Element | null;

interface GridColumnMenuProps {
    hideMenu: () => void;
    currentColumn: GridColDef;
    open: boolean;
    id?: string;
    labelledby?: string;
}
declare function GridColumnMenu(props: GridColumnMenuProps): JSX.Element;

declare const HideGridColMenuItem: FC<FilterItemProps>;

declare const SortGridMenuItems: FC<FilterItemProps>;

declare type MenuPosition = 'bottom-end' | 'bottom-start' | 'bottom' | 'left-end' | 'left-start' | 'left' | 'right-end' | 'right-start' | 'right' | 'top-end' | 'top-start' | 'top' | undefined;
interface MenuProps extends Omit<PopperProps, 'onKeyDown'> {
    open: boolean;
    target: ReactNode;
    onClickAway: (event?: MouseEvent$1<Document, MouseEvent>) => void;
    position?: MenuPosition;
}
declare const GridMenu: FC<MenuProps>;

declare function GridColumnsPanel(): JSX.Element;

interface GridPanelProps {
    children?: ReactNode;
    open: boolean;
}
declare function GridPanel(props: GridPanelProps): JSX.Element | null;

declare function GridPanelContent(props: PropsWithChildren<HTMLAttributes<HTMLDivElement>>): JSX.Element;

declare function GridPanelFooter(props: PropsWithChildren<HTMLAttributes<HTMLDivElement>>): JSX.Element;

declare function GridPanelHeader(props: PropsWithChildren<HTMLAttributes<HTMLDivElement>>): JSX.Element;

declare function GridPanelWrapper(props: PropsWithChildren<HTMLAttributes<HTMLDivElement>>): JSX.Element;

declare function GridPreferencesPanel(): JSX.Element;

interface GridFilterFormProps {
    item: GridFilterItem;
    hasMultipleFilters: boolean;
    showMultiFilterOperators?: boolean;
    multiFilterOperator?: GridLinkOperator;
    disableMultiFilterOperator?: boolean;
    applyFilterChanges: (item: GridFilterItem) => void;
    applyMultiFilterOperatorChanges: (operator: GridLinkOperator) => void;
    deleteFilter: (item: GridFilterItem) => void;
}
declare function GridFilterForm(props: GridFilterFormProps): JSX.Element;

declare const SUBMIT_FILTER_STROKE_TIME = 500;
interface TypeFilterInputValueProps extends FilterInputValueProps {
    type?: 'text' | 'number' | 'date' | 'datetime-local';
}
declare function GridFilterInputValue(props: TypeFilterInputValueProps & TextFieldProps): JSX.Element;

declare function GridFilterPanel(): JSX.Element;

declare const GridColumnsToolbarButton: FC<{}>;

declare function GridDensitySelector(): JSX.Element | null;

declare const GridFilterToolbarButton: FC<{}>;

declare function GridToolbarExport(): JSX.Element;

declare function GridToolbar(): JSX.Element | null;

/**
 * The columnMenu API interface that is available in the grid [[apiRef]].
 */
interface ColumnMenuApi {
    /**
     * Display the column menu under the field column.
     * @param field
     * @param id
     * @param labelledby
     */
    showColumnMenu: (field: string, id: string, labelledby: string) => void;
    /**
     * Hide the column menu.
     */
    hideColumnMenu: () => void;
}

/**
 * The columnResize API interface that is available in the grid [[apiRef]].
 */
interface ColumnResizeApi {
    /**
     * Event handler to be hooked on mousedown that will handle resize.
     * @param field
     */
    startResizeOnMouseDown: (event: MouseEvent$1<HTMLDivElement>) => void;
}

/**
 * Set of icons used in the grid component UI.
 */
interface GridIconSlotsComponent {
    /**
     * Icon displayed on the side of the column header title to display the filter input component.
     */
    ColumnMenuIcon?: ElementType;
    /**
     * Icon displayed on the open filter button present in the toolbar by default
     */
    OpenFilterButtonIcon?: ElementType;
    /**
     * Icon displayed on the column header menu to show that a filer has been applied to the column.
     */
    ColumnFilteredIcon?: ElementType;
    /**
     * Icon displayed on the column menu selector tab.
     */
    ColumnSelectorIcon?: ElementType;
    /**
     * Icon displayed on the side of the column header title when sorted in Ascending order.
     */
    ColumnSortedAscendingIcon?: ElementType;
    /**
     * Icon displayed on the side of the column header title when sorted in Descending order.
     */
    ColumnSortedDescendingIcon?: ElementType;
    /**
     * Icon displayed in between two column headers that allows to resize the column header.
     */
    ColumnResizeIcon?: ElementType;
    /**
     * Icon displayed on the compact density option in the toolbar.
     */
    DensityCompactIcon?: ElementType;
    /**
     * Icon displayed on the standard density option in the toolbar.
     */
    DensityStandardIcon?: ElementType;
    /**
     * Icon displayed on the comfortable density option in the toolbar.
     */
    DensityComfortableIcon?: ElementType;
    /**
     * Icon displayed on the open export button present in the toolbar by default.
     */
    ExportIcon?: ElementType;
}

/**
 * Overrideable components props dynamic passed to the component at rendering.
 */
interface GridSlotsComponentsProps {
    columnMenu?: any;
    errorOverlay?: any;
    footer?: any;
    header?: any;
    toolbar?: any;
    preferencesPanel?: any;
    loadingOverlay?: any;
    noRowsOverlay?: any;
    pagination?: any;
    filterPanel?: any;
    panel?: any;
    columnsPanel?: any;
}

interface GridApiRefComponentsProperty extends GridIconSlotsComponent {
    /**
     * Column menu component rendered by clicking on the 3 dots "kebab" icon in column headers.
     */
    ColumnMenu: ElementType;
    /**
     * Error overlay component rendered above the grid when an error is caught.
     */
    ErrorOverlay: ElementType;
    /**
     * Footer component rendered at the bottom of the grid viewport.
     */
    Footer: ElementType;
    /**
     * Header component rendered above the grid column header bar.
     * Prefer using the `Toolbar` slot. You should never need to use this slot. TODO remove.
     */
    Header: ElementType;
    /**
     * Toolbar component rendered inside the Header component.
     */
    Toolbar?: ElementType;
    /**
     * PreferencesPanel component rendered inside the Header component.
     */
    PreferencesPanel: ElementType;
    /**
     * Loading overlay component rendered when the grid is in a loading state.
     */
    LoadingOverlay: ElementType;
    /**
     * No rows overlay component rendered when the grid has no rows.
     */
    NoRowsOverlay: ElementType;
    /**
     * Pagination component rendered in the grid footer by default.
     */
    Pagination: ElementType;
    /**
     * Filter panel component rendered when clicking the filter button.
     */
    FilterPanel: ElementType;
    /**
     * GridColumns panel component rendered when clicking the columns button.
     */
    ColumnsPanel: ElementType;
    /**
     * Panel component wrapping the filters and columns panels.
     */
    Panel: ElementType;
}
interface ComponentsApi {
    /**
     * The set of overridable components used in the grid.
     */
    components: GridApiRefComponentsProperty;
    /**
     * Overrideable components props dynamic passed to the component at rendering.
     */
    componentsProps?: GridSlotsComponentsProps;
}

interface FilterApi {
    showFilterPanel: (targetColumnField?: string) => void;
    hideFilterPanel: () => void;
    upsertFilter: (item: GridFilterItem) => void;
    applyFilters: () => void;
    applyFilter: (item: GridFilterItem, linkOperator?: GridLinkOperator) => void;
    deleteFilter: (item: GridFilterItem) => void;
    applyFilterLinkOperator: (operator: GridLinkOperator) => void;
    onFilterModelChange: (handler: (params: GridFilterModelParams) => void) => void;
    setFilterModel: (model: FilterModel) => void;
    getVisibleRowModels: () => GridRowModel[];
}

interface GridEditRowApi {
    /**
     * Set the edit rows model of the grid.
     * @param GridEditRowsModel
     */
    setEditRowsModel: (model: GridEditRowsModel) => void;
    /**
     * Set the cellMode of a cell.
     * @param GridRowId
     * @param string
     * @param 'edit' | 'view'
     */
    setCellMode: (id: GridRowId, field: string, mode: GridCellMode) => void;
    /**
     * Returns true if the cell is editable.
     * @param params
     */
    isCellEditable: (params: GridCellParams) => boolean;
    /**
     * Set the edit cell input props.
     * @param update
     */
    setEditCellProps: (id: GridRowId, update: GridEditRowUpdate) => void;
    /**
     * Commit the cell value changes to update the cell value.
     * @param update
     */
    commitCellChange: (id: GridRowId, update: GridEditRowUpdate) => void;
    /**
     * Get the cell value of a row and field.
     * @param id
     * @param field
     */
    getCellValue: (id: GridRowId, field: string) => GridCellValue;
    /**
     * Callback fired when the EditRowModel changed.
     * @param handler
     */
    onEditRowModelChange: (handler: (param: GridEditRowModelParams) => void) => void;
    /**
     * Callback fired when the cell mode changed.
     * @param handler
     */
    onCellModeChange: (handler: (param: GridCellModeChangeParams) => void) => void;
    /**
     * Callback fired when the cell changes are committed.
     * @param handler
     */
    onEditCellChangeCommitted: (handler: (param: GridEditCellParams) => void) => void;
    /**
     * Callback fired when the edit cell value changed.
     * @param handler
     */
    onEditCellChange: (handler: (param: GridEditCellParams) => void) => void;
}

/**
 * The PreferencesPanel API interface that is available in the grid [[apiRef]].
 */
interface PreferencesPanelApi {
    /**
     * Display the preferences panel with the GridPreferencePanelsValue opened.
     * @param newValue
     */
    showPreferences: (newValue: GridPreferencePanelsValue) => void;
    /**
     * Hide the preferences panel.
     */
    hidePreferences: () => void;
}

/**
 * The Row API interface that is available in the grid [[apiRef]].
 */
interface GridRowApi {
    /**
     * Get the full set of rows as [[Rows]].
     * @returns [[Rows]]
     */
    getRowModels: () => GridRowModel[];
    /**
     * Get the total number of rows in the grid.
     */
    getRowsCount: () => number;
    /**
     * Return the list of row Ids.
     */
    getAllRowIds: () => GridRowId[];
    /**
     * Set a new set of Rows.
     * @param rows
     */
    setRows: (rows: GridRowModel[]) => void;
    /**
     * Update any properties of the current set of GridRowData[].
     * @param updates
     */
    updateRows: (updates: GridRowModelUpdate[]) => void;
    /**
     * Get the GridRowId of a row at a specific position.
     * @param index
     */
    getRowIdFromRowIndex: (index: number) => GridRowId;
    /**
     * Get the row index of a row with a given id.
     * @param id
     */
    getRowIndexFromId: (id: GridRowId) => number;
    /**
     * Get the [[GridRowModel]] of a given rowId.
     * @param id
     */
    getRowFromId: (id: GridRowId) => GridRowModel;
}

/**
 * The column API interface that is available in the grid [[apiRef]].
 */
interface GridColumnApi {
    /**
     * Retrieve a column from its field.
     * @param field
     * @returns [[GridColDef]]
     */
    getColumnFromField: (field: string) => GridColDef;
    /**
     * Get all the [[GridColumns]].
     * @returns An array of [[GridColDef]].
     */
    getAllColumns: () => GridColumns;
    /**
     * Get the currently visible columns.
     * @returns An array of [[GridColDef]].
     */
    getVisibleColumns: () => GridColumns;
    /**
     * Get the columns meta data.
     * @returns [[GridColumnsMeta]]
     */
    getColumnsMeta: () => GridColumnsMeta;
    /**
     * Get the index position of the column in the array of [[GridColDef]].
     * @param field
     */
    getColumnIndex: (field: string, useVisibleColumns?: boolean) => number;
    /**
     * Get the column left position in pixel relative to the left grid inner border.
     * @param field
     */
    getColumnPosition: (field: string) => number;
    /**
     * Allows to update a column [[GridColDef]] model.
     * @param col [[GridColDef]]
     */
    updateColumn: (col: GridColDef) => void;
    /**
     * Allows to batch update multiple columns at the same time.
     * @param cols [[GridColDef[]]]
     * @param resetState
     */
    updateColumns: (cols: GridColDef[], resetColumnState?: boolean) => void;
    /**
     * Allows to toggle a column.
     * @param field
     * @param forceHide Optional value, if not provided the column will toggle.
     */
    toggleColumn: (field: string, forceHide?: boolean) => void;
    /**
     * Allows to move a column to another position in the column array.
     * @param field
     * @param targetIndexPosition .
     */
    moveColumn: (field: string, targetIndexPosition: number) => void;
}

interface CursorCoordinates {
    x: number;
    y: number;
}
/**
 * The column reorder API interface that is available in the grid [[apiRef]].
 */
interface ColumnReorderApi {
    /**
     * Column item drag start event handler.
     * @param column
     * @param target
     * @returns void
     */
    onColItemDragStart: (column: GridColDef, target: HTMLElement) => void;
    /**
     * Column header drag over event handler.
     * @param event
     * @param ref
     * @returns void
     */
    onColHeaderDragOver: (event: Event, ref: RefObject<HTMLElement>) => void;
    /**
     * Column item drag over event handler.
     * @param column
     * @param coordinates
     * @returns void
     */
    onColItemDragOver: (column: GridColDef, coordinates: CursorCoordinates) => void;
    /**
     * Column item drag enter event handler.
     * @param event
     * @returns void
     */
    onColItemDragEnter: (event: Event) => void;
}

/**
 * The selection API interface that is available in the grid [[apiRef]].
 */
interface GridSelectionApi {
    /**
     * Toggle the row selected state.
     * @param id
     * @param allowMultiple Default: false = deselect other rows if isSelected is true
     * @param isSelected Default true
     */
    selectRow: (id: GridRowId, allowMultiple?: boolean, isSelected?: boolean) => void;
    /**
     * Batch toggle rows selected state.
     * @param ids
     * @param isSelected default true
     * @param deselectOtherRows default: false
     */
    selectRows: (ids: GridRowId[], isSelected?: boolean, deselectOtherRows?: boolean) => void;
    /**
     * Get an array of selected rows.
     */
    getSelectedRows: () => GridRowModel[];
    /**
     * Callback fired after a row is selected.
     * @param handler
     */
    onRowSelected: (handler: (param: GridRowSelectedParams) => void) => () => void;
    /**
     * Callback fired after one or multiple rows had a selection state change.
     * @param handler
     */
    onSelectionModelChange: (handler: (param: GridSelectionModelChangeParams) => void) => () => void;
    /**
     * Reset the selected rows to the array of ids passed in parameter
     * @param GridRowId[]
     */
    setSelectionModel: (rowIds: GridRowId[]) => void;
}

/**
 * The sort API interface that is available in the grid [[apiRef]].
 */
interface GridSortApi {
    /**
     * Get the sort model currently applied to the grid.
     */
    getSortModel: () => GridSortModel;
    /**
     * Apply the current sorting model to the rows.
     */
    applySorting: () => void;
    /**
     * Set the sort model and trigger the sorting of rows.
     * @param model
     */
    setSortModel: (model: GridSortModel) => void;
    /**
     * Callback fired when the column sorting changed before the grid has sorted its rows.
     * @param handler
     */
    onSortModelChange: (handler: (param: GridSortModelParams) => void) => () => void;
    /**
     * Set the sort direction of a column.
     * @param column
     * @param direction
     */
    sortColumn: (column: GridColDef, direction?: GridSortDirection) => void;
}

/**
 * The pagination API interface that is available in the grid [[apiRef]].
 */
interface GridPaginationApi {
    /**
     * Set the displayed page.
     * @param page
     */
    setPage: (page: number) => void;
    /**
     * Set the number of rows in one page.
     * @param pageSize
     */
    setPageSize: (pageSize: number) => void;
    /**
     * Callback fired after a new page has been displayed.
     * @param handler
     */
    onPageChange: (handler: (param: GridPageChangeParams) => void) => () => void;
    /**
     * Callback fired after the page size was changed.
     * @param handler
     */
    onPageSizeChange: (handler: (param: GridPageChangeParams) => void) => () => void;
}

interface GridStateChangeParams {
    state: GridState;
    api: any;
}

interface GridStateApi {
    /**
     * Property that contains the whole state of the grid.
     */
    state: GridState;
    /**
     * Allows to get the whole state of the grid if stateId is null or to get a part of the state if stateId has a value.
     */
    getState: <T = GridState>(stateId?: string) => T;
    /**
     * Allows to set/reset the whole state of the grid.
     */
    setState: (state: GridState | ((previousState: GridState) => GridState)) => void;
    /**
     * Allows forcing the grid to rerender after a state update.
     */
    forceUpdate: Dispatch<any>;
    /**
     * Allows assigning a handler that is triggered when the state change.
     */
    onStateChange: (handler: (param: GridStateChangeParams) => void) => void;
}

/**
 * The virtualization API interface that is available in the grid [[apiRef]].
 */
interface GridVirtualizationApi {
    /**
     * Trigger the grid viewport to scroll to the position in pixel.
     * @param params
     */
    scroll: (params: Partial<GridScrollParams>) => void;
    /**
     * Trigger the grid viewport to scroll to a row of x y indexes.
     * @param params
     * @returns boolean Return if the index was outside of the viewport and the grid has to scroll to reach the target.
     */
    scrollToIndexes: (params: GridCellIndexCoordinates) => boolean;
    /**
     * Check if a column at index is currently visible in the viewport.
     * @param colIndex
     */
    isColumnVisibleInWindow: (colIndex: number) => boolean;
    /**
     * Get the current containerProps.
     */
    getContainerPropsState: () => GridContainerProps | null;
    /**
     * Get the current renderContext.
     */
    getRenderContextState: () => Partial<GridRenderContextProps> | undefined;
    /**
     * Refresh the viewport cells according to the scroll positions
     * @param forceRender
     */
    updateViewport: (forceRender?: boolean) => void;
}

declare type Listener = (...args: any[]) => void;
declare class EventEmitter {
    maxListeners: number;
    warnOnce: boolean;
    events: {
        [key: string]: Listener[];
    };
    on(eventName: string, listener: Listener): void;
    removeListener(eventName: string, listener: Listener): void;
    removeAllListeners(eventName?: string): void;
    emit(eventName: string, ...args: any[]): void;
    once(eventName: string, listener: Listener): void;
}

/**
 * The core API interface that is available in the grid [[apiRef]].
 */
interface GridCoreApi extends EventEmitter {
    /**
     * Property that comes true when the grid has its EventEmitter initialised.
     */
    isInitialised: boolean;
    /**
     * The react ref of the grid root container div element.
     */
    rootElementRef?: RefObject<HTMLDivElement>;
    /**
     * The react ref of the grid column container div element.
     */
    columnHeadersElementRef?: RefObject<HTMLDivElement>;
    /**
     * Allows to register a handler for an event.
     * @param event
     * @param handler
     * @returns Unsubscribe Function
     */
    subscribeEvent: (event: string, handler: (param: any) => void) => () => void;
    /**
     * Allows to emit an event.
     * @param name
     * @param args
     */
    publishEvent: (name: string, ...args: any[]) => void;
    /**
     * Display the error overlay component.
     */
    showError: (props: any) => void;
}

/**
 * The events API interface that is available in the grid [[apiRef]].
 */
interface GridEventsApi {
    /**
     * Add a handler that will be triggered when the component unmount.
     * @param handler
     */
    onUnmount: (handler: (param: any) => void) => void;
    /**
     * Add a handler that will be triggered when the component resize.
     * @param handler
     */
    onResize: (handler: (param: any) => void) => void;
    /**
     * Trigger a resize of the component, and recalculation of width and height.
     * @param handler
     */
    resize: () => void;
}

interface GridDensityOption {
    icon: ReactElement;
    label: string;
    value: GridDensityTypes;
}
/**
 * The density API interface that is available in the grid [[apiRef]].
 */
interface GridDensityApi {
    /**
     * Set density of the grid.
     * @param density
     * @returns void
     */
    setDensity: (size: GridDensity, headerHeight?: any, rowHeight?: any) => void;
}

/**
 * The csv export API interface that is available in the grid [[apiRef]].
 */
interface GridCsvExportApi {
    /**
     * Get the grid data as CSV.
     * @returns string
     */
    getDataAsCsv: () => string;
    /**
     * Export the grid data as CSV.
     * @returns void
     */
    exportDataAsCsv: () => void;
}

/**
 * The full grid API.
 */
declare type GridApi = GridCoreApi & ComponentsApi & GridStateApi & GridDensityApi & GridEventsApi & GridRowApi & GridEditRowApi & GridColumnApi & ColumnReorderApi & GridSelectionApi & GridSortApi & GridVirtualizationApi & GridPaginationApi & GridCsvExportApi & FilterApi & ColumnMenuApi & ColumnResizeApi & PreferencesPanelApi & LocaleTextApi;

/**
 * The apiRef component prop type.
 */
declare type GridApiRef = MutableRefObject<GridApi>;

declare const GridApiContext: Context<GridApiRef | undefined>;

interface AutoSizerSize {
    height: number;
    width: number;
}
interface AutoSizerProps extends Omit<HTMLAttributes<HTMLDivElement>, 'children'> {
    /**
     * Function responsible for rendering children.
     */
    children: (size: AutoSizerSize) => ReactNode;
    /**
     * Default height to use for initial render; useful for SSR.
     * @default null
     */
    defaultHeight?: number;
    /**
     * Default width to use for initial render; useful for SSR.
     * @default null
     */
    defaultWidth?: number;
    /**
     * If `true`, disable dynamic :height property.
     * @default false
     */
    disableHeight?: boolean;
    /**
     * If `true`, disable dynamic :width property.
     * @default false
     */
    disableWidth?: boolean;
    /**
     * Nonce of the inlined stylesheet for Content Security Policy.
     */
    nonce?: string;
    /**
     * Callback to be invoked on-resize.
     */
    onResize?: (size: AutoSizerSize) => void;
}
declare const GridAutoSizer: ForwardRefExoticComponent<AutoSizerProps & RefAttributes<HTMLDivElement>>;

/**
 * The ref type of the inner grid root container.
 */
declare type GridRootContainerRef = RefObject<HTMLDivElement>;

/**
 * Object passed as React prop in the component override.
 */
interface GridBaseComponentProps {
    /**
     * The GridState object containing the current grid state.
     */
    state: GridState;
    /**
     * The full set of rows.
     */
    rows: GridRowModel[];
    /**
     * The full set of columns.
     */
    columns: GridColumns;
    /**
     * The full set of options.
     */
    options: GridOptions;
    /**
     * GridApiRef that let you manipulate the grid.
     */
    api: GridApiRef;
    /**
     * The ref of the inner div Element of the grid.
     */
    rootElement: GridRootContainerRef;
}

interface ErrorOverlayProps {
    message?: string;
}

declare type ColumnMenuProps = GridBaseComponentProps & GridColumnMenuProps;
/**
 * Grid components React prop interface containing all the overridable components.
 *
 */
interface GridSlotsComponent extends GridIconSlotsComponent {
    /**
     * Column menu component rendered by clicking on the 3 dots "kebab" icon in column headers.
     */
    ColumnMenu?: ElementType<ColumnMenuProps>;
    /**
     * Error overlay component rendered above the grid when an error is caught.
     */
    ErrorOverlay?: ElementType<GridBaseComponentProps & ErrorOverlayProps>;
    /**
     * Footer component rendered at the bottom of the grid viewport.
     */
    Footer?: ElementType<GridBaseComponentProps>;
    /**
     * Header component rendered above the grid column header bar.
     * Prefer using the `Toolbar` slot. You should never need to use this slot. TODO remove.
     */
    Header?: ElementType<GridBaseComponentProps>;
    /**
     * Toolbar component rendered inside the Header component.
     */
    Toolbar?: ElementType<GridBaseComponentProps>;
    /**
     * PreferencesPanel component rendered inside the Header component.
     */
    PreferencesPanel?: ElementType<GridBaseComponentProps>;
    /**
     * Loading overlay component rendered when the grid is in a loading state.
     */
    LoadingOverlay?: ElementType<GridBaseComponentProps>;
    /**
     * No rows overlay component rendered when the grid has no rows.
     */
    NoRowsOverlay?: ElementType<GridBaseComponentProps>;
    /**
     * Pagination component rendered in the grid footer by default.
     */
    Pagination?: ElementType<GridBaseComponentProps>;
    /**
     * Filter panel component rendered when clicking the filter button.
     */
    FilterPanel?: ElementType<GridBaseComponentProps>;
    /**
     * GridColumns panel component rendered when clicking the columns button.
     */
    ColumnsPanel?: ElementType<GridBaseComponentProps>;
    /**
     * Panel component wrapping the filters and columns panels.
     */
    Panel?: ElementType<GridBaseComponentProps & GridPanelProps>;
}
declare const DEFAULT_GRID_SLOTS_ICONS: GridIconSlotsComponent;
declare const DEFAULT_GRID_SLOTS_COMPONENTS: GridApiRefComponentsProperty;

/**
 * Available export formats. To be extended in future.
 */
declare type GridExportFormat = 'csv';
/**
 * Export option interface
 */
interface GridExportOption {
    label: React.ReactNode;
    format: GridExportFormat;
}

interface GridCellProps {
    align: GridAlignment;
    colIndex?: number;
    cssClass?: string;
    field?: string;
    formattedValue?: GridCellValue;
    hasFocus?: boolean;
    height: number;
    isEditable?: boolean;
    rowIndex?: number;
    showRightBorder?: boolean;
    tabIndex?: number;
    value?: GridCellValue;
    width: number;
}
declare const GridCell: FC<GridCellProps>;
interface EmptyCellProps {
    width?: number;
    height?: number;
}
declare const GridLeftEmptyCell: FC<EmptyCellProps>;
declare const GridRightEmptyCell: FC<EmptyCellProps>;

declare const GridHeaderCheckbox: FC<GridColParams>;
declare const GridCellCheckboxRenderer: FC<GridCellParams>;

declare function GridFooter(): JSX.Element;

declare function GridHeader(): JSX.Element;

declare function GridLoadingOverlay(): JSX.Element;

declare function GridNoRowsOverlay(): JSX.Element;

declare function GridPagination(): JSX.Element;

declare type WithChildren = {
    children?: ReactNode;
};
declare const GridRenderingZone: ForwardRefExoticComponent<ElementSize & WithChildren & RefAttributes<HTMLDivElement>>;

interface RowCellsProps {
    columns: GridColumns;
    domIndex: number;
    extendRowFullWidth: boolean;
    firstColIdx: number;
    hasScroll: {
        y: boolean;
        x: boolean;
    };
    lastColIdx: number;
    row: GridRowModel;
    rowIndex: number;
    scrollSize: number;
    showCellRightBorder: boolean;
    cellFocus: GridCellIndexCoordinates | null;
}
declare const GridRowCells: FC<RowCellsProps>;

declare const GridRowCount: FC<{
    rowCount: number;
}>;

interface RowProps {
    id: GridRowId;
    selected: boolean;
    className: string;
    rowIndex: number;
}
declare const GridRow: FC<RowProps>;

interface SelectedRowCountProps {
    selectedRowCount: number;
}
declare function GridSelectedRowCount(props: SelectedRowCountProps): JSX.Element;

declare const GridStickyContainer: FC<ElementSize>;

declare type ViewportType = ForwardRefExoticComponent<RefAttributes<HTMLDivElement>>;
declare const gridContainerSizesSelector: (state: GridState) => GridContainerProps | null;
declare const gridViewportSizesSelector: (state: GridState) => ElementSize;
declare const gridScrollBarSizeSelector: (state: GridState) => GridScrollBarState;
declare const GridViewport: ViewportType;

interface WatermarkProps {
    licenseStatus: string;
}
declare const Watermark: FC<WatermarkProps>;

interface ScrollAreaProps {
    scrollDirection: 'left' | 'right';
}
declare const GridScrollArea: NamedExoticComponent<ScrollAreaProps>;

declare const GRID_EXPERIMENTAL_ENABLED: boolean;

declare const GRID_RESIZE = "resize";
declare const GRID_CLICK = "click";
declare const GRID_DOUBLE_CLICK = "dblclick";
declare const GRID_MOUSE_HOVER = "mouseover";
declare const GRID_FOCUS_OUT = "focusout";
declare const GRID_KEYDOWN = "keydown";
declare const GRID_KEYUP = "keyup";
declare const GRID_SCROLL = "scroll";
declare const GRID_DRAGEND = "dragend";
declare const GRID_CELL_CHANGE = "cellChange";
declare const GRID_CELL_CHANGE_COMMITTED = "cellChangeCommitted";
declare const GRID_CELL_MODE_CHANGE = "cellModeChange";
declare const GRID_EDIT_ROW_MODEL_CHANGE = "editRowModelChange";
declare const GRID_COMPONENT_ERROR = "componentError";
declare const GRID_UNMOUNT = "unmount";
declare const GRID_ELEMENT_FOCUS_OUT = "gridFocusOut";
declare const GRID_CELL_CLICK = "cellClick";
declare const GRID_DOUBLE_CELL_CLICK = "doubleCellClick";
declare const GRID_CELL_HOVER = "cellHover";
declare const GRID_ROW_CLICK = "rowClick";
declare const GRID_DOUBLE_ROW_CLICK = "doubleRowClick";
declare const GRID_ROW_HOVER = "rowHover";
declare const GRID_ROW_SELECTED = "rowSelected";
declare const GRID_SELECTION_CHANGED = "selectionChange";
declare const GRID_COLUMN_HEADER_CLICK = "columnClick";
declare const GRID_COLUMN_HEADER_HOVER = "columnHeaderHover";
declare const GRID_PAGE_CHANGED = "pageChange";
declare const GRID_PAGESIZE_CHANGED = "pageSizeChange";
declare const GRID_COLUMN_FILTER_BUTTON_CLICK = "colFilterButtonClick";
declare const GRID_COLUMN_MENU_BUTTON_CLICK = "colMenuButtonClick";
declare const GRID_SCROLLING_START = "scrolling:start";
declare const GRID_SCROLLING = "scrolling";
declare const GRID_SCROLLING_STOP = "scrolling:stop";
declare const GRID_COL_RESIZE_START = "colResizing:start";
declare const GRID_COL_RESIZE_STOP = "colResizing:stop";
declare const GRID_COL_REORDER_START = "colReordering:dragStart";
declare const GRID_COL_REORDER_DRAG_OVER_HEADER = "colReordering:dragOverHeader";
declare const GRID_COL_REORDER_DRAG_OVER = "colReordering:dragOver";
declare const GRID_COL_REORDER_DRAG_ENTER = "colReordering:dragEnter";
declare const GRID_COL_REORDER_STOP = "colReordering:dragStop";
declare const GRID_ROWS_UPDATED = "rowsUpdated";
declare const GRID_ROWS_SET = "rowsSet";
declare const GRID_ROWS_CLEARED = "rowsCleared";
declare const GRID_COLUMNS_UPDATED = "columnsUpdated";
declare const GRID_SORT_MODEL_CHANGE = "sortModelChange";
declare const GRID_FILTER_MODEL_CHANGE = "filterModelChange";
declare const GRID_STATE_CHANGE = "stateChange";
declare const GRID_MULTIPLE_KEY_PRESS_CHANGED = "multipleKeyPressChange";

declare const GRID_CELL_CSS_CLASS = "MuiDataGrid-cell";
declare const GRID_ROW_CSS_CLASS = "MuiDataGrid-row";
declare const GRID_HEADER_CELL_CSS_CLASS = "MuiDataGrid-colCell";
declare const GRID_HEADER_CELL_SEPARATOR_RESIZABLE_CSS_CLASS = "MuiDataGrid-columnSeparatorResizable";
declare const GRID_HEADER_CELL_TITLE_CSS_CLASS = "MuiDataGrid-colCellTitleContainer";
declare const GRID_DATA_CONTAINER_CSS_CLASS = "data-container";
declare const GRID_HEADER_CELL_DROP_ZONE_CSS_CLASS = "MuiDataGrid-colCell-dropZone";
declare const GRID_HEADER_CELL_DRAGGING_CSS_CLASS = "MuiDataGrid-colCell-dragging";

declare const GRID_DEFAULT_LOCALE_TEXT: GridLocaleText;

declare const useGridColumnMenu: (apiRef: GridApiRef) => void;

declare const gridColumnMenuStateSelector: (state: GridState) => ColumnMenuState;

declare const gridColumnReorderSelector: (state: GridState) => ColumnReorderState;
declare const gridColumnReorderDragColSelector: OutputSelector<GridState, string, (res: ColumnReorderState) => string>;

declare const useGridColumnReorder: (apiRef: GridApiRef) => void;

declare const gridColumnsSelector: (state: GridState) => GridInternalColumns;
declare const allGridColumnsFieldsSelector: (state: GridState) => string[];
declare const gridColumnLookupSelector: (state: GridState) => GridColumnLookup;
declare const allGridColumnsSelector: OutputSelector<GridState, GridColumns, (res1: string[], res2: GridColumnLookup) => GridColumns>;
declare const visibleGridColumnsSelector: OutputSelector<GridState, GridColumns, (res: GridColumns) => GridColumns>;
declare const gridColumnsMetaSelector: OutputSelector<GridState, GridColumnsMeta, (res: GridColumns) => GridColumnsMeta>;
declare const filterableGridColumnsSelector: OutputSelector<GridState, GridColumns, (res: GridColumns) => GridColumns>;
declare const filterableGridColumnsIdsSelector: OutputSelector<GridState, string[], (res: GridColumns) => string[]>;
declare const visibleGridColumnsLengthSelector: OutputSelector<GridState, number, (res: GridColumns) => number>;
declare const gridColumnsTotalWidthSelector: OutputSelector<GridState, number, (res: GridColumnsMeta) => number>;

declare function useGridColumns(columns: GridColumns, apiRef: GridApiRef): void;

declare const useGridApi: (apiRef: GridApiRef) => GridApi;

declare const useGridReducer: <State, Action>(apiRef: GridApiRef, stateId: any, reducer: Reducer<State, Action>, initialState: State) => {
    gridState: GridState;
    dispatch: (args: any) => void;
    gridApi: GridApi;
};

declare const useGridSelector: <State>(apiRef: GridApiRef | undefined, selector: (state: any) => State) => State;

declare const useGridState: (apiRef: GridApiRef) => [GridState, (stateUpdaterFn: (oldState: GridState) => GridState) => void, () => void];

declare const visibleGridRowsStateSelector: (state: GridState) => VisibleGridRowsState;
declare const visibleSortedGridRowsSelector: OutputSelector<GridState, GridRowModel[], (res1: VisibleGridRowsState, res2: GridRowModel[]) => GridRowModel[]>;
declare const visibleGridRowCountSelector: OutputSelector<GridState, number, (res1: VisibleGridRowsState, res2: number) => number>;
declare const filterGridStateSelector: (state: GridState) => FilterModelState;
declare const activeGridFilterItemsSelector: OutputSelector<GridState, GridFilterItem[], (res: FilterModelState) => GridFilterItem[]>;
declare const filterGridItemsCounterSelector: OutputSelector<GridState, number, (res: GridFilterItem[]) => number>;
declare type FilterColumnLookup = Record<string, GridFilterItem[]>;
declare const filterGridColumnLookupSelector: OutputSelector<GridState, FilterColumnLookup, (res: GridFilterItem[]) => FilterColumnLookup>;

declare const useGridFilter: (apiRef: GridApiRef, rowsProp: GridRowsProp) => void;

declare const gridKeyboardStateSelector: (state: GridState) => KeyboardState;
declare const gridKeyboardCellSelector: OutputSelector<GridState, GridCellIndexCoordinates | null, (res: KeyboardState) => GridCellIndexCoordinates | null>;
declare const gridKeyboardMultipleKeySelector: OutputSelector<GridState, boolean, (res: KeyboardState) => boolean>;

declare const useGridKeyboard: (gridRootRef: RefObject<HTMLDivElement>, apiRef: GridApiRef) => void;

declare const gridPaginationSelector: (state: any) => PaginationState;

declare const useGridPagination: (apiRef: GridApiRef) => void;

declare const gridPreferencePanelStateSelector: (state: GridState) => GridPreferencePanelState;
declare const gridViewportSizeStateSelector: (state: GridState) => ElementSize;

declare const useGridPreferencesPanel: (apiRef: GridApiRef) => void;

declare type GridRowsLookup = Record<GridRowId, GridRowModel>;
declare const gridRowsStateSelector: (state: GridState) => InternalGridRowsState;
declare const gridRowCountSelector: OutputSelector<GridState, number, (res: InternalGridRowsState) => number>;
declare const gridRowsLookupSelector: OutputSelector<GridState, GridRowsLookup, (res: InternalGridRowsState) => GridRowsLookup>;
declare const unorderedGridRowModelsSelector: OutputSelector<GridState, GridRowModel[], (res: InternalGridRowsState) => GridRowModel[]>;

declare function addGridRowId(rowData: GridRowData, getRowId?: GridRowIdGetter): GridRowModel;
declare function convertGridRowsPropToState(rows: GridRowsProp, totalRowCount?: number, rowIdGetter?: GridRowIdGetter): InternalGridRowsState;
declare const useGridRows: (apiRef: GridApiRef, rows: GridRowsProp, getRowIdProp?: GridRowIdGetter | undefined) => void;

declare const gridEditRowsStateSelector: (state: GridState) => GridEditRowsModel;

declare function useGridEditRows(apiRef: GridApiRef): void;

declare const gridSelectionStateSelector: (state: GridState) => GridSelectionState;
declare const selectedGridRowsCountSelector: OutputSelector<GridState, number, (res: GridSelectionState) => number>;

declare const useGridSelection: (apiRef: GridApiRef) => void;

declare const sortedGridRowIdsSelector: OutputSelector<GridState, GridRowId[], (res: GridSortingState) => GridRowId[]>;
declare const sortedGridRowsSelector: OutputSelector<GridState, GridRowModel[], (res1: GridRowId[], res2: GridRowsLookup, res3: GridRowModel[]) => GridRowModel[]>;
declare const gridSortModelSelector: OutputSelector<GridState, GridSortModel, (res: GridSortingState) => GridSortModel>;
declare type GridSortColumnLookup = Record<string, {
    sortDirection: GridSortDirection;
    sortIndex?: number;
}>;
declare const gridSortColumnLookupSelector: OutputSelector<GridState, GridSortColumnLookup, (res: GridSortModel) => GridSortColumnLookup>;

declare const useGridSorting: (apiRef: GridApiRef, rowsProp: GridRowsProp) => void;

declare type UpdateRenderedColsFnType = (containerProps: GridContainerProps | null, scrollLeft: number) => boolean;
declare type UseVirtualColumnsReturnType = [
    MutableRefObject<GridRenderColumnsProps | null>,
    UpdateRenderedColsFnType
];
declare const useGridVirtualColumns: (options: GridOptions, apiRef: GridApiRef) => UseVirtualColumnsReturnType;

declare const useGridVirtualRows: (colRef: MutableRefObject<HTMLDivElement | null>, windowRef: MutableRefObject<HTMLDivElement | null>, renderingZoneRef: MutableRefObject<HTMLDivElement | null>, apiRef: GridApiRef) => void;

declare function useGridApiRef(): GridApiRef;
declare function useGridApiRef(apiRefProp: GridApiRef | undefined): GridApiRef;

declare const useGridColumnResize: (columnsRef: RefObject<HTMLDivElement>, apiRef: GridApiRef) => void;

declare const useGridComponents: (componentSlotsProp: GridSlotsComponent | undefined, componentsProps: GridSlotsComponentsProps | undefined, apiRef: GridApiRef) => GridApiRefComponentsProperty;

declare const useGridBaseComponentProps: (apiRef: GridApiRef | undefined) => GridBaseComponentProps | undefined;

declare function useApi(gridRootRef: RefObject<HTMLDivElement>, columnHeadersContainerRef: RefObject<HTMLDivElement>, apiRef: GridApiRef): boolean;

declare function useGridApiEventHandler(apiRef: GridApiRef, eventName: string, handler?: (args: any) => void): void;

declare function useGridApiMethod<T extends Partial<GridApi>>(apiRef: GridApiRef, apiMethods: T, apiName: string): void;

declare const useGridContainerProps: (windowRef: RefObject<HTMLDivElement>, apiRef: GridApiRef) => void;

declare const useNativeEventListener: (apiRef: GridApiRef, ref: MutableRefObject<HTMLDivElement | null> | (() => Element | undefined | null), eventName: string, handler?: ((event: Event) => any) | undefined, options?: AddEventListenerOptions | undefined) => void;

declare function useGridScrollFn(renderingZoneElementRef: RefObject<HTMLDivElement>, columnHeadersElementRef: RefObject<HTMLDivElement>): [GridScrollFn];

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
declare function isDeepEqual(value: any, other: any): boolean;

interface DebouncedFunction extends Function {
    cancel: () => void;
    flush: () => void;
}
declare function isDate(value: any): value is Date;
declare function formatDateToLocalInputDate({ value, withTime, }: {
    value: GridCellValue;
    withTime: boolean;
}): string | number | boolean | object | null | undefined;
declare function isArray(value: any): value is Array<any>;
declare function isString(value: any): value is string;
declare function isNumber(value: any): value is number;
declare function isFunction(value: any): value is Function;
declare function isObject(value: any): value is Record<string, any>;
declare function getThemePaletteMode(palette: any): string;
declare function isMuiV5(): boolean;
declare function muiStyleAlpha(color: string, value: number): string;
declare function localStorageAvailable(): boolean;
declare function mapColDefTypeToInputType(type: string): "number" | "text" | "date" | "datetime-local";

declare const nextGridSortDirection: (sortingOrder: GridSortDirection[], current?: GridSortDirection) => GridSortDirection;
declare const isDesc: (direction: GridSortDirection) => boolean;
declare const gridNillComparer: (v1: GridCellValue, v2: GridCellValue) => number | null;
declare const gridStringNumberComparer: GridComparatorFn;
declare const gridNumberComparer: GridComparatorFn;
declare const gridDateComparer: (v1: GridCellValue, v2: GridCellValue, cellParams1: any, cellParams2: any) => number;

declare function isOverflown(element: Element): boolean;
declare function findParentElementFromClassName(elem: Element, className: string): Element | null;
declare function getRowEl(cell?: Element | null): HTMLElement | null;
declare function isGridCellRoot(elem: Element | null): boolean;
declare function isGridCell(elem: Element | null): boolean;
declare function isGridHeaderTitleContainer(elem: Element): boolean;
declare function getIdFromRowElem(rowEl: Element): string;
declare function getFieldFromCellElem(cellEl: Element): string;
declare function getFieldFromHeaderElem(colCellEl: Element): string;
declare function findHeaderElementFromField(elem: Element, field: string): Element | null;
declare function findGridCellElementsFromCol(col: HTMLElement): NodeListOf<Element> | null;
declare function findGridRootFromCurrent(elem: Element): HTMLDivElement | null;
declare function findGridDataContainerFromCurrent(elem: Element): HTMLDivElement | null;
declare function getGridCellElementFromIndexes(root: Element, { colIndex, rowIndex }: GridCellIndexCoordinates): HTMLDivElement;

declare function classnames(...args: any[]): string;

declare const GRID_MULTIPLE_SELECTION_KEYS: string[];
declare const isMultipleKey: (key: string) => boolean;
declare const isTabKey: (key: string) => boolean;
declare const isSpaceKey: (key: string) => boolean;
declare const isArrowKeys: (key: string) => boolean;
declare const isHomeOrEndKeys: (key: string) => boolean;
declare const isPageKeys: (key: string) => boolean;
declare const isNavigationKey: (key: string) => boolean;

declare function mergeGridColTypes(defaultColumnTypes: GridColumnTypesRecord, optionsColTypes: GridColumnTypesRecord): GridColumnTypesRecord;
declare function removeUndefinedProps(options: Object): {
    constructor: Function;
    toString(): string;
    toLocaleString(): string;
    valueOf(): Object;
    hasOwnProperty(v: PropertyKey): boolean;
    isPrototypeOf(v: Object): boolean;
    propertyIsEnumerable(v: PropertyKey): boolean;
};
declare function mergeGridOptions(defaultOptions: any, options?: any): any;

declare function buildGridCellParams({ element, value, rowIndex, colIndex, rowModel, colDef, api, }: {
    rowModel: GridRowModel;
    colDef: GridColDef;
    rowIndex?: number;
    colIndex?: number;
    value: GridCellValue;
    api: GridApi;
    element?: HTMLElement;
}): GridCellParams;
declare function buildGridRowParams({ element, rowIndex, rowModel, api, }: {
    rowModel: GridRowModel;
    colDef: GridColDef;
    rowIndex: number;
    api: GridApi;
    element?: HTMLElement;
}): GridRowParams;

interface LocalizationV4 {
    props: {
        MuiDataGrid: Pick<GridOptions, 'localeText'>;
    };
}
interface LocalizationV5 {
    components: {
        MuiDataGrid: {
            defaultProps: Pick<GridOptions, 'localeText'>;
        };
    };
}
declare type Localization = LocalizationV4 | LocalizationV5;
declare const getGridLocalization: (gridTranslations: Partial<GridLocaleText>, coreTranslations: any) => Localization;

declare function useEventCallback<T extends (...args: any[]) => any>(func: T): T;
declare const useEnhancedEffect: typeof useLayoutEffect;
declare function useThemeProps({ props: inputProps, name }: {
    props: any;
    name: any;
}): any;
declare function getScrollbarSize(doc: Document): number;

/**
 * I have hesitate to use https://github.com/eligrey/FileSaver.js.
 * If we get bug reports that this project solves, we should consider using it.
 *
 * Related resources.
 * https://blog.logrocket.com/programmatic-file-downloads-in-the-browser-9a5186298d5c/
 * https://github.com/mbrn/filefy/blob/ec4ed0b7415d93be7158c23029f2ea1fa0b8e2d9/src/core/BaseBuilder.ts
 * https://unpkg.com/browse/@progress/kendo-file-saver@1.0.7/dist/es/save-as.js
 * https://github.com/ag-grid/ag-grid/blob/9565c219b6210aa85fa833c929d0728f9d163a91/community-modules/csv-export/src/csvExport/downloader.ts
 */
declare function exportAs(blob: Blob, extension?: GridExportFormat, filename?: string): void;

declare const bgBG: Localization;

declare const deDE: Localization;

declare const enUS: Localization;

declare const frFR: Localization;

declare const ptBR: Localization;

/**
 * Partial set of [[GridOptions]].
 */
declare type GridOptionsProp = Partial<GridOptions>;
/**
 * The grid component react props interface.
 */
interface GridComponentProps extends GridOptionsProp {
    /**
     * The ref object that allows grid manipulation. Can be instantiated with [[useGridApiRef()]].
     */
    apiRef?: GridApiRef;
    /**
     * Set of columns of type [[GridColumns]].
     */
    columns: GridColumns;
    /**
     * Overrideable components.
     */
    components?: GridSlotsComponent;
    /**
     * Overrideable components props dynamic passed to the component at rendering.
     */
    componentsProps?: GridSlotsComponentsProps;
    /**
     * @ignore
     */
    className?: string;
    /**
     * An error that will turn the grid into its error state and display the error component.
     */
    error?: any;
    /**
     * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).
     */
    nonce?: string;
    /**
     * @internal enum
     */
    licenseStatus: string;
    /**
     * If `true`, a  loading overlay is displayed.
     */
    loading?: boolean;
    /**
     * Set a callback fired when the state of the grid is updated.
     */
    onStateChange?: (params: GridStateChangeParams) => void;
    /**
     * Set of rows of type [[GridRowsProp]].
     */
    rows: GridRowsProp;
    /**
     * Set the whole state of the grid.
     */
    state?: Partial<GridState>;
    /**
     * Return the id of a given [[GridRowData]].
     */
    getRowId?: GridRowIdGetter;
}

/**
 * Data Grid component implementing [[GridComponentProps]].
 * @returns JSX.Element
 */

declare const GridComponent: ForwardRefExoticComponent<GridComponentProps & RefAttributes<HTMLDivElement>>;

declare type DataGridProps = Omit<GridComponentProps, 'disableColumnResize' | 'disableColumnReorder' | 'disableMultipleColumnsFiltering' | 'disableMultipleColumnsSorting' | 'disableMultipleSelection' | 'licenseStatus' | 'apiRef' | 'options' | 'pagination'> & {
    disableColumnResize?: true;
    disableColumnReorder?: true;
    disableMultipleColumnsFiltering?: true;
    disableMultipleColumnsSorting?: true;
    disableMultipleSelection?: true;
    pagination?: true;
    apiRef?: undefined;
};
declare const DataGrid: MemoExoticComponent<ForwardRefExoticComponent<Omit<GridComponentProps, "disableMultipleSelection" | "disableMultipleColumnsFiltering" | "disableMultipleColumnsSorting" | "disableColumnResize" | "disableColumnReorder" | "pagination" | "apiRef" | "licenseStatus" | "options"> & {
    disableColumnResize?: true | undefined;
    disableColumnReorder?: true | undefined;
    disableMultipleColumnsFiltering?: true | undefined;
    disableMultipleColumnsSorting?: true | undefined;
    disableMultipleSelection?: true | undefined;
    pagination?: true | undefined;
    apiRef?: undefined;
} & RefAttributes<HTMLDivElement>>>;

export { AutoSizerProps, AutoSizerSize, ColumnHeaderSortIconProps, ColumnMenuProps, ColumnMenuState, ColumnReorderState, ComponentsApi, DEFAULT_GRID_COL_TYPE_KEY, DEFAULT_GRID_OPTIONS, DEFAULT_GRID_SLOTS_COMPONENTS, DEFAULT_GRID_SLOTS_ICONS, DataGrid, DataGridProps, DebouncedFunction, ElementSize, FilterColumnLookup, FilterInputValueProps, FilterItemProps, FilterModel, FilterModelState, GRID_CELL_CHANGE, GRID_CELL_CHANGE_COMMITTED, GRID_CELL_CLICK, GRID_CELL_CSS_CLASS, GRID_CELL_HOVER, GRID_CELL_MODE_CHANGE, GRID_CLICK, GRID_COLUMNS_UPDATED, GRID_COLUMN_FILTER_BUTTON_CLICK, GRID_COLUMN_HEADER_CLICK, GRID_COLUMN_HEADER_HOVER, GRID_COLUMN_MENU_BUTTON_CLICK, GRID_COL_REORDER_DRAG_ENTER, GRID_COL_REORDER_DRAG_OVER, GRID_COL_REORDER_DRAG_OVER_HEADER, GRID_COL_REORDER_START, GRID_COL_REORDER_STOP, GRID_COL_RESIZE_START, GRID_COL_RESIZE_STOP, GRID_COMPONENT_ERROR, GRID_DATA_CONTAINER_CSS_CLASS, GRID_DATETIME_COLUMN_TYPE, GRID_DATETIME_COL_DEF, GRID_DATE_COLUMN_TYPE, GRID_DATE_COL_DEF, GRID_DEFAULT_LOCALE_TEXT, GRID_DOUBLE_CELL_CLICK, GRID_DOUBLE_CLICK, GRID_DOUBLE_ROW_CLICK, GRID_DRAGEND, GRID_EDIT_ROW_MODEL_CHANGE, GRID_ELEMENT_FOCUS_OUT, GRID_EXPERIMENTAL_ENABLED, GRID_FILTER_MODEL_CHANGE, GRID_FOCUS_OUT, GRID_HEADER_CELL_CSS_CLASS, GRID_HEADER_CELL_DRAGGING_CSS_CLASS, GRID_HEADER_CELL_DROP_ZONE_CSS_CLASS, GRID_HEADER_CELL_SEPARATOR_RESIZABLE_CSS_CLASS, GRID_HEADER_CELL_TITLE_CSS_CLASS, GRID_INITIAL_PAGINATION_STATE, GRID_KEYDOWN, GRID_KEYUP, GRID_MOUSE_HOVER, GRID_MULTIPLE_KEY_PRESS_CHANGED, GRID_MULTIPLE_SELECTION_KEYS, GRID_NUMBER_COLUMN_TYPE, GRID_NUMERIC_COL_DEF, GRID_PAGESIZE_CHANGED, GRID_PAGE_CHANGED, GRID_RESIZE, GRID_ROWS_CLEARED, GRID_ROWS_SET, GRID_ROWS_UPDATED, GRID_ROW_CLICK, GRID_ROW_CSS_CLASS, GRID_ROW_HOVER, GRID_ROW_SELECTED, GRID_SCROLL, GRID_SCROLLING, GRID_SCROLLING_START, GRID_SCROLLING_STOP, GRID_SELECTION_CHANGED, GRID_SORT_MODEL_CHANGE, GRID_STATE_CHANGE, GRID_STRING_COLUMN_TYPE, GRID_STRING_COL_DEF, GRID_UNMOUNT, GridAddIcon, GridAlignment, GridApi, GridApiContext, GridApiRef, GridApiRefComponentsProperty, GridArrowDownwardIcon, GridArrowUpwardIcon, GridAutoSizer, GridBaseComponentProps, GridCell, GridCellCheckboxRenderer, GridCellClassFn, GridCellClassNamePropType, GridCellClassParams, GridCellClassRules, GridCellIndexCoordinates, GridCellMode, GridCellModeChangeParams, GridCellParams, GridCellProps, GridCellValue, GridCheckCircleIcon, GridCloseIcon, GridColDef, GridColParams, GridColType, GridColTypeDef, GridColumnApi, GridColumnHeaderItem, GridColumnHeaderMenu, GridColumnHeaderMenuProps, GridColumnHeaderSeparator, GridColumnHeaderSeparatorProps, GridColumnHeaderSortIcon, GridColumnHeaderTitle, GridColumnHeaderTitleProps, GridColumnHeadersItemCollection, GridColumnHeadersItemCollectionProps, GridColumnIcon, GridColumnLookup, GridColumnMenu, GridColumnMenuProps, GridColumnProp, GridColumnTypesRecord, GridColumns, GridColumnsContainer, GridColumnsHeader, GridColumnsMenuItem, GridColumnsMeta, GridColumnsPanel, GridColumnsToolbarButton, GridComparatorFn, GridComponent, GridComponentProps, GridContainerProps, GridCoreApi, GridCsvExportApi, GridDataContainer, GridDensity, GridDensityApi, GridDensityOption, GridDensitySelector, GridDensityTypes, GridDragIcon, GridEditCellParams, GridEditCellProps, GridEditRowApi, GridEditRowModelParams, GridEditRowUpdate, GridEditRowsModel, GridEventsApi, GridExportFormat, GridExportOption, GridFeatureMode, GridFeatureModeConstant, GridFieldComparatorList, GridFilterAltIcon, GridFilterForm, GridFilterFormProps, GridFilterInputValue, GridFilterItem, GridFilterListIcon, GridFilterMenuItem, GridFilterModelParams, GridFilterOperator, GridFilterPanel, GridFilterToolbarButton, GridFooter, GridFooterContainer, GridHeader, GridHeaderCheckbox, GridIconSlotsComponent, GridInternalColumns, GridLeftEmptyCell, GridLinkOperator, GridLoadIcon, GridLoadingOverlay, GridLocaleText, GridMenu, GridMenuIcon, GridNativeColTypes, GridNoRowsOverlay, GridOptions, GridOptionsProp, GridOverlay, GridPageChangeParams, GridPagination, GridPaginationApi, GridPanel, GridPanelContent, GridPanelFooter, GridPanelHeader, GridPanelProps, GridPanelWrapper, GridPreferencePanelState, GridPreferencePanelsValue, GridPreferencesPanel, GridRenderColumnsProps, GridRenderContextProps, GridRenderPaginationProps, GridRenderRowProps, GridRenderingZone, GridRightEmptyCell, GridRoot, GridRootContainerRef, GridRootProps, GridRow, GridRowApi, GridRowCells, GridRowCount, GridRowData, GridRowId, GridRowIdGetter, GridRowModel, GridRowModelUpdate, GridRowParams, GridRowSelectedParams, GridRowsLookup, GridRowsProp, GridSaveAltIcon, GridScrollArea, GridScrollBarState, GridScrollFn, GridScrollParams, GridSearchIcon, GridSelectedRowCount, GridSelectionApi, GridSelectionModelChangeParams, GridSelectionState, GridSeparatorIcon, GridSlotsComponent, GridSlotsComponentsProps, GridSortApi, GridSortColumnLookup, GridSortDirection, GridSortItem, GridSortModel, GridSortModelParams, GridSortingState, GridState, GridStateApi, GridStateChangeParams, GridStickyContainer, GridTableRowsIcon, GridToolbar, GridToolbarContainer, GridToolbarExport, GridTripleDotsVerticalIcon, GridUpdateAction, GridViewHeadlineIcon, GridViewStreamIcon, GridViewport, GridViewportSizeState, GridVirtualizationApi, GridWindow, GridWindowProps, HideGridColMenuItem, InternalGridRowsState, InternalRenderingState, KeyboardState, LocaleTextApi, LocaleTextValue, Localization, LocalizationV4, LocalizationV5, Logger, MenuProps, ObjectWithId, PaginationActions, PaginationState, RowProps, SUBMIT_FILTER_STROKE_TIME, SortGridMenuItems, TranslationKeys, TypeFilterInputValueProps, ValueFormatterParams, ValueGetterParams, VisibleGridRowsState, Watermark, WatermarkProps, activeGridFilterItemsSelector, addGridRowId, allGridColumnsFieldsSelector, allGridColumnsSelector, bgBG, buildGridCellParams, buildGridRowParams, checkGridRowHasId, classnames, convertGridRowsPropToState, deDE, enUS, exportAs, filterGridColumnLookupSelector, filterGridItemsCounterSelector, filterGridStateSelector, filterableGridColumnsIdsSelector, filterableGridColumnsSelector, findGridCellElementsFromCol, findGridDataContainerFromCurrent, findGridRootFromCurrent, findHeaderElementFromField, findParentElementFromClassName, formatDateToLocalInputDate, frFR, getFieldFromCellElem, getFieldFromHeaderElem, getGridCellElementFromIndexes, getGridColDef, getGridDateOperators, getGridDefaultColumnTypes, getGridLocalization, getGridNumericColumnOperators, getGridPageCount, getGridStringOperators, getIdFromRowElem, getInitialGridColumnReorderState, getInitialGridColumnsState, getInitialGridFilterState, getInitialGridRenderingState, getInitialGridRowState, getInitialGridSortingState, getInitialGridState, getInitialVisibleGridRowsState, getRowEl, getScrollbarSize, getThemePaletteMode, gridCheckboxSelectionColDef, gridColumnLookupSelector, gridColumnMenuStateSelector, gridColumnReorderDragColSelector, gridColumnReorderSelector, gridColumnsMetaSelector, gridColumnsSelector, gridColumnsTotalWidthSelector, gridContainerSizesSelector, gridDateComparer, gridDateFormatter, gridDateTimeFormatter, gridEditRowsStateSelector, gridKeyboardCellSelector, gridKeyboardMultipleKeySelector, gridKeyboardStateSelector, gridNillComparer, gridNumberComparer, gridPaginationReducer, gridPaginationSelector, gridPreferencePanelStateSelector, gridRowCountSelector, gridRowsLookupSelector, gridRowsStateSelector, gridScrollBarSizeSelector, gridScrollbarStateSelector, gridSelectionStateSelector, gridSortColumnLookupSelector, gridSortModelSelector, gridStringNumberComparer, gridViewportSizeStateSelector, gridViewportSizesSelector, isArray, isArrowKeys, isDate, isDeepEqual, isDesc, isFunction, isGridCell, isGridCellRoot, isGridHeaderTitleContainer, isHomeOrEndKeys, isMuiV5, isMultipleKey, isNavigationKey, isNumber, isObject, isOverflown, isPageKeys, isSpaceKey, isString, isTabKey, localStorageAvailable, mapColDefTypeToInputType, mergeGridColTypes, mergeGridOptions, muiStyleAlpha, nextGridSortDirection, ptBR, removeUndefinedProps, selectedGridRowsCountSelector, setGridPageActionCreator, setGridPageSizeActionCreator, setGridPageSizeStateUpdate, setGridPageStateUpdate, setGridPaginationModeActionCreator, setGridRowCountActionCreator, setGridRowCountStateUpdate, sortedGridRowIdsSelector, sortedGridRowsSelector, unorderedGridRowModelsSelector, useApi, useEnhancedEffect, useEventCallback, useGridApi, useGridApiEventHandler, useGridApiMethod, useGridApiRef, useGridBaseComponentProps, useGridColumnMenu, useGridColumnReorder, useGridColumnResize, useGridColumns, useGridComponents, useGridContainerProps, useGridEditRows, useGridFilter, useGridKeyboard, useGridPagination, useGridPreferencesPanel, useGridReducer, useGridRows, useGridScrollFn, useGridSelection, useGridSelector, useGridSorting, useGridState, useGridVirtualColumns, useGridVirtualRows, useLogger, useLoggerFactory, useNativeEventListener, useThemeProps, visibleGridColumnsLengthSelector, visibleGridColumnsSelector, visibleGridRowCountSelector, visibleGridRowsStateSelector, visibleSortedGridRowsSelector };
