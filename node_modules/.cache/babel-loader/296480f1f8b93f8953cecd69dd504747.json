{"ast":null,"code":"'use strict';\n\nconst strictUriEncode = require('strict-uri-encode');\n\nconst decodeComponent = require('decode-uri-component');\n\nconst splitOnFirst = require('split-on-first');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nfunction encoderForArrayFormat(options) {\n  switch (options.arrayFormat) {\n    case 'index':\n      return key => (result, value) => {\n        const index = result.length;\n\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n\n        if (value === null) {\n          return [...result, [encode(key, options), '[', index, ']'].join('')];\n        }\n\n        return [...result, [encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')];\n      };\n\n    case 'bracket':\n      return key => (result, value) => {\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n\n        if (value === null) {\n          return [...result, [encode(key, options), '[]'].join('')];\n        }\n\n        return [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n      };\n\n    case 'comma':\n    case 'separator':\n      return key => (result, value) => {\n        if (value === null || value === undefined || value.length === 0) {\n          return result;\n        }\n\n        if (result.length === 0) {\n          return [[encode(key, options), '=', encode(value, options)].join('')];\n        }\n\n        return [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n      };\n\n    default:\n      return key => (result, value) => {\n        if (value === undefined || options.skipNull && value === null || options.skipEmptyString && value === '') {\n          return result;\n        }\n\n        if (value === null) {\n          return [...result, encode(key, options)];\n        }\n\n        return [...result, [encode(key, options), '=', encode(value, options)].join('')];\n      };\n  }\n}\n\nfunction parserForArrayFormat(options) {\n  let result;\n\n  switch (options.arrayFormat) {\n    case 'index':\n      return (key, value, accumulator) => {\n        result = /\\[(\\d*)\\]$/.exec(key);\n        key = key.replace(/\\[\\d*\\]$/, '');\n\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n\n        if (accumulator[key] === undefined) {\n          accumulator[key] = {};\n        }\n\n        accumulator[key][result[1]] = value;\n      };\n\n    case 'bracket':\n      return (key, value, accumulator) => {\n        result = /(\\[\\])$/.exec(key);\n        key = key.replace(/\\[\\]$/, '');\n\n        if (!result) {\n          accumulator[key] = value;\n          return;\n        }\n\n        if (accumulator[key] === undefined) {\n          accumulator[key] = [value];\n          return;\n        }\n\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n\n    case 'comma':\n    case 'separator':\n      return (key, value, accumulator) => {\n        const isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n        const isEncodedArray = typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator);\n        value = isEncodedArray ? decode(value, options) : value;\n        const newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n        accumulator[key] = newValue;\n      };\n\n    default:\n      return (key, value, accumulator) => {\n        if (accumulator[key] === undefined) {\n          accumulator[key] = value;\n          return;\n        }\n\n        accumulator[key] = [].concat(accumulator[key], value);\n      };\n  }\n}\n\nfunction validateArrayFormatSeparator(value) {\n  if (typeof value !== 'string' || value.length !== 1) {\n    throw new TypeError('arrayFormatSeparator must be single character string');\n  }\n}\n\nfunction encode(value, options) {\n  if (options.encode) {\n    return options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n  }\n\n  return value;\n}\n\nfunction decode(value, options) {\n  if (options.decode) {\n    return decodeComponent(value);\n  }\n\n  return value;\n}\n\nfunction keysSorter(input) {\n  if (Array.isArray(input)) {\n    return input.sort();\n  }\n\n  if (typeof input === 'object') {\n    return keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map(key => input[key]);\n  }\n\n  return input;\n}\n\nfunction removeHash(input) {\n  const hashStart = input.indexOf('#');\n\n  if (hashStart !== -1) {\n    input = input.slice(0, hashStart);\n  }\n\n  return input;\n}\n\nfunction getHash(url) {\n  let hash = '';\n  const hashStart = url.indexOf('#');\n\n  if (hashStart !== -1) {\n    hash = url.slice(hashStart);\n  }\n\n  return hash;\n}\n\nfunction extract(input) {\n  input = removeHash(input);\n  const queryStart = input.indexOf('?');\n\n  if (queryStart === -1) {\n    return '';\n  }\n\n  return input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n  if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === 'string' && value.trim() !== '') {\n    value = Number(value);\n  } else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n    value = value.toLowerCase() === 'true';\n  }\n\n  return value;\n}\n\nfunction parse(query, options) {\n  options = Object.assign({\n    decode: true,\n    sort: true,\n    arrayFormat: 'none',\n    arrayFormatSeparator: ',',\n    parseNumbers: false,\n    parseBooleans: false\n  }, options);\n  validateArrayFormatSeparator(options.arrayFormatSeparator);\n  const formatter = parserForArrayFormat(options); // Create an object with no prototype\n\n  const ret = Object.create(null);\n\n  if (typeof query !== 'string') {\n    return ret;\n  }\n\n  query = query.trim().replace(/^[?#&]/, '');\n\n  if (!query) {\n    return ret;\n  }\n\n  for (const param of query.split('&')) {\n    let [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '='); // Missing `=` should be `null`:\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\n    value = value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? value : decode(value, options);\n    formatter(decode(key, options), value, ret);\n  }\n\n  for (const key of Object.keys(ret)) {\n    const value = ret[key];\n\n    if (typeof value === 'object' && value !== null) {\n      for (const k of Object.keys(value)) {\n        value[k] = parseValue(value[k], options);\n      }\n    } else {\n      ret[key] = parseValue(value, options);\n    }\n  }\n\n  if (options.sort === false) {\n    return ret;\n  }\n\n  return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n    const value = ret[key];\n\n    if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n      // Sort object keys, not values\n      result[key] = keysSorter(value);\n    } else {\n      result[key] = value;\n    }\n\n    return result;\n  }, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n  if (!object) {\n    return '';\n  }\n\n  options = Object.assign({\n    encode: true,\n    strict: true,\n    arrayFormat: 'none',\n    arrayFormatSeparator: ','\n  }, options);\n  validateArrayFormatSeparator(options.arrayFormatSeparator);\n\n  const shouldFilter = key => options.skipNull && isNullOrUndefined(object[key]) || options.skipEmptyString && object[key] === '';\n\n  const formatter = encoderForArrayFormat(options);\n  const objectCopy = {};\n\n  for (const key of Object.keys(object)) {\n    if (!shouldFilter(key)) {\n      objectCopy[key] = object[key];\n    }\n  }\n\n  const keys = Object.keys(objectCopy);\n\n  if (options.sort !== false) {\n    keys.sort(options.sort);\n  }\n\n  return keys.map(key => {\n    const value = object[key];\n\n    if (value === undefined) {\n      return '';\n    }\n\n    if (value === null) {\n      return encode(key, options);\n    }\n\n    if (Array.isArray(value)) {\n      return value.reduce(formatter(key), []).join('&');\n    }\n\n    return encode(key, options) + '=' + encode(value, options);\n  }).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n  options = Object.assign({\n    decode: true\n  }, options);\n  const [url_, hash] = splitOnFirst(url, '#');\n  return Object.assign({\n    url: url_.split('?')[0] || '',\n    query: parse(extract(url), options)\n  }, options && options.parseFragmentIdentifier && hash ? {\n    fragmentIdentifier: decode(hash, options)\n  } : {});\n};\n\nexports.stringifyUrl = (object, options) => {\n  options = Object.assign({\n    encode: true,\n    strict: true\n  }, options);\n  const url = removeHash(object.url).split('?')[0] || '';\n  const queryFromUrl = exports.extract(object.url);\n  const parsedQueryFromUrl = exports.parse(queryFromUrl, {\n    sort: false\n  });\n  const query = Object.assign(parsedQueryFromUrl, object.query);\n  let queryString = exports.stringify(query, options);\n\n  if (queryString) {\n    queryString = `?${queryString}`;\n  }\n\n  let hash = getHash(object.url);\n\n  if (object.fragmentIdentifier) {\n    hash = `#${encode(object.fragmentIdentifier, options)}`;\n  }\n\n  return `${url}${queryString}${hash}`;\n};","map":{"version":3,"sources":["C:/Users/skytu/OneDrive/Desktop/EOfficeWeb/node_modules/query-string/index.js"],"names":["strictUriEncode","require","decodeComponent","splitOnFirst","isNullOrUndefined","value","undefined","encoderForArrayFormat","options","arrayFormat","key","result","index","length","skipNull","skipEmptyString","encode","join","arrayFormatSeparator","parserForArrayFormat","accumulator","exec","replace","concat","isArray","includes","isEncodedArray","decode","newValue","split","map","item","validateArrayFormatSeparator","TypeError","strict","encodeURIComponent","keysSorter","input","Array","sort","Object","keys","a","b","Number","removeHash","hashStart","indexOf","slice","getHash","url","hash","extract","queryStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","parse","query","assign","formatter","ret","create","param","k","reduce","Boolean","exports","stringify","object","shouldFilter","objectCopy","filter","x","parseUrl","url_","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryFromUrl","parsedQueryFromUrl","queryString"],"mappings":"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","sourcesContent":["'use strict';\r\nconst strictUriEncode = require('strict-uri-encode');\r\nconst decodeComponent = require('decode-uri-component');\r\nconst splitOnFirst = require('split-on-first');\r\n\r\nconst isNullOrUndefined = value => value === null || value === undefined;\r\n\r\nfunction encoderForArrayFormat(options) {\r\n\tswitch (options.arrayFormat) {\r\n\t\tcase 'index':\r\n\t\t\treturn key => (result, value) => {\r\n\t\t\t\tconst index = result.length;\r\n\r\n\t\t\t\tif (\r\n\t\t\t\t\tvalue === undefined ||\r\n\t\t\t\t\t(options.skipNull && value === null) ||\r\n\t\t\t\t\t(options.skipEmptyString && value === '')\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value === null) {\r\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\t...result,\r\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\r\n\t\t\t\t];\r\n\t\t\t};\r\n\r\n\t\tcase 'bracket':\r\n\t\t\treturn key => (result, value) => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tvalue === undefined ||\r\n\t\t\t\t\t(options.skipNull && value === null) ||\r\n\t\t\t\t\t(options.skipEmptyString && value === '')\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value === null) {\r\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\r\n\t\t\t};\r\n\r\n\t\tcase 'comma':\r\n\t\tcase 'separator':\r\n\t\t\treturn key => (result, value) => {\r\n\t\t\t\tif (value === null || value === undefined || value.length === 0) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (result.length === 0) {\r\n\t\t\t\t\treturn [[encode(key, options), '=', encode(value, options)].join('')];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn key => (result, value) => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tvalue === undefined ||\r\n\t\t\t\t\t(options.skipNull && value === null) ||\r\n\t\t\t\t\t(options.skipEmptyString && value === '')\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (value === null) {\r\n\t\t\t\t\treturn [...result, encode(key, options)];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\r\n\t\t\t};\r\n\t}\r\n}\r\n\r\nfunction parserForArrayFormat(options) {\r\n\tlet result;\r\n\r\n\tswitch (options.arrayFormat) {\r\n\t\tcase 'index':\r\n\t\t\treturn (key, value, accumulator) => {\r\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\r\n\r\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\r\n\r\n\t\t\t\tif (!result) {\r\n\t\t\t\t\taccumulator[key] = value;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (accumulator[key] === undefined) {\r\n\t\t\t\t\taccumulator[key] = {};\r\n\t\t\t\t}\r\n\r\n\t\t\t\taccumulator[key][result[1]] = value;\r\n\t\t\t};\r\n\r\n\t\tcase 'bracket':\r\n\t\t\treturn (key, value, accumulator) => {\r\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\r\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\r\n\r\n\t\t\t\tif (!result) {\r\n\t\t\t\t\taccumulator[key] = value;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (accumulator[key] === undefined) {\r\n\t\t\t\t\taccumulator[key] = [value];\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\r\n\t\t\t};\r\n\r\n\t\tcase 'comma':\r\n\t\tcase 'separator':\r\n\t\t\treturn (key, value, accumulator) => {\r\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\r\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\r\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\r\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\r\n\t\t\t\taccumulator[key] = newValue;\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn (key, value, accumulator) => {\r\n\t\t\t\tif (accumulator[key] === undefined) {\r\n\t\t\t\t\taccumulator[key] = value;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\r\n\t\t\t};\r\n\t}\r\n}\r\n\r\nfunction validateArrayFormatSeparator(value) {\r\n\tif (typeof value !== 'string' || value.length !== 1) {\r\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\r\n\t}\r\n}\r\n\r\nfunction encode(value, options) {\r\n\tif (options.encode) {\r\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\nfunction decode(value, options) {\r\n\tif (options.decode) {\r\n\t\treturn decodeComponent(value);\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\nfunction keysSorter(input) {\r\n\tif (Array.isArray(input)) {\r\n\t\treturn input.sort();\r\n\t}\r\n\r\n\tif (typeof input === 'object') {\r\n\t\treturn keysSorter(Object.keys(input))\r\n\t\t\t.sort((a, b) => Number(a) - Number(b))\r\n\t\t\t.map(key => input[key]);\r\n\t}\r\n\r\n\treturn input;\r\n}\r\n\r\nfunction removeHash(input) {\r\n\tconst hashStart = input.indexOf('#');\r\n\tif (hashStart !== -1) {\r\n\t\tinput = input.slice(0, hashStart);\r\n\t}\r\n\r\n\treturn input;\r\n}\r\n\r\nfunction getHash(url) {\r\n\tlet hash = '';\r\n\tconst hashStart = url.indexOf('#');\r\n\tif (hashStart !== -1) {\r\n\t\thash = url.slice(hashStart);\r\n\t}\r\n\r\n\treturn hash;\r\n}\r\n\r\nfunction extract(input) {\r\n\tinput = removeHash(input);\r\n\tconst queryStart = input.indexOf('?');\r\n\tif (queryStart === -1) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\treturn input.slice(queryStart + 1);\r\n}\r\n\r\nfunction parseValue(value, options) {\r\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\r\n\t\tvalue = Number(value);\r\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\r\n\t\tvalue = value.toLowerCase() === 'true';\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\nfunction parse(query, options) {\r\n\toptions = Object.assign({\r\n\t\tdecode: true,\r\n\t\tsort: true,\r\n\t\tarrayFormat: 'none',\r\n\t\tarrayFormatSeparator: ',',\r\n\t\tparseNumbers: false,\r\n\t\tparseBooleans: false\r\n\t}, options);\r\n\r\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\r\n\r\n\tconst formatter = parserForArrayFormat(options);\r\n\r\n\t// Create an object with no prototype\r\n\tconst ret = Object.create(null);\r\n\r\n\tif (typeof query !== 'string') {\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tquery = query.trim().replace(/^[?#&]/, '');\r\n\r\n\tif (!query) {\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tfor (const param of query.split('&')) {\r\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\r\n\r\n\t\t// Missing `=` should be `null`:\r\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\r\n\t\tvalue = value === undefined ? null : ['comma', 'separator'].includes(options.arrayFormat) ? value : decode(value, options);\r\n\t\tformatter(decode(key, options), value, ret);\r\n\t}\r\n\r\n\tfor (const key of Object.keys(ret)) {\r\n\t\tconst value = ret[key];\r\n\t\tif (typeof value === 'object' && value !== null) {\r\n\t\t\tfor (const k of Object.keys(value)) {\r\n\t\t\t\tvalue[k] = parseValue(value[k], options);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tret[key] = parseValue(value, options);\r\n\t\t}\r\n\t}\r\n\r\n\tif (options.sort === false) {\r\n\t\treturn ret;\r\n\t}\r\n\r\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\r\n\t\tconst value = ret[key];\r\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\r\n\t\t\t// Sort object keys, not values\r\n\t\t\tresult[key] = keysSorter(value);\r\n\t\t} else {\r\n\t\t\tresult[key] = value;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}, Object.create(null));\r\n}\r\n\r\nexports.extract = extract;\r\nexports.parse = parse;\r\n\r\nexports.stringify = (object, options) => {\r\n\tif (!object) {\r\n\t\treturn '';\r\n\t}\r\n\r\n\toptions = Object.assign({\r\n\t\tencode: true,\r\n\t\tstrict: true,\r\n\t\tarrayFormat: 'none',\r\n\t\tarrayFormatSeparator: ','\r\n\t}, options);\r\n\r\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\r\n\r\n\tconst shouldFilter = key => (\r\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\r\n\t\t(options.skipEmptyString && object[key] === '')\r\n\t);\r\n\r\n\tconst formatter = encoderForArrayFormat(options);\r\n\r\n\tconst objectCopy = {};\r\n\r\n\tfor (const key of Object.keys(object)) {\r\n\t\tif (!shouldFilter(key)) {\r\n\t\t\tobjectCopy[key] = object[key];\r\n\t\t}\r\n\t}\r\n\r\n\tconst keys = Object.keys(objectCopy);\r\n\r\n\tif (options.sort !== false) {\r\n\t\tkeys.sort(options.sort);\r\n\t}\r\n\r\n\treturn keys.map(key => {\r\n\t\tconst value = object[key];\r\n\r\n\t\tif (value === undefined) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\r\n\t\tif (value === null) {\r\n\t\t\treturn encode(key, options);\r\n\t\t}\r\n\r\n\t\tif (Array.isArray(value)) {\r\n\t\t\treturn value\r\n\t\t\t\t.reduce(formatter(key), [])\r\n\t\t\t\t.join('&');\r\n\t\t}\r\n\r\n\t\treturn encode(key, options) + '=' + encode(value, options);\r\n\t}).filter(x => x.length > 0).join('&');\r\n};\r\n\r\nexports.parseUrl = (url, options) => {\r\n\toptions = Object.assign({\r\n\t\tdecode: true\r\n\t}, options);\r\n\r\n\tconst [url_, hash] = splitOnFirst(url, '#');\r\n\r\n\treturn Object.assign(\r\n\t\t{\r\n\t\t\turl: url_.split('?')[0] || '',\r\n\t\t\tquery: parse(extract(url), options)\r\n\t\t},\r\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\r\n\t);\r\n};\r\n\r\nexports.stringifyUrl = (object, options) => {\r\n\toptions = Object.assign({\r\n\t\tencode: true,\r\n\t\tstrict: true\r\n\t}, options);\r\n\r\n\tconst url = removeHash(object.url).split('?')[0] || '';\r\n\tconst queryFromUrl = exports.extract(object.url);\r\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\r\n\r\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\r\n\tlet queryString = exports.stringify(query, options);\r\n\tif (queryString) {\r\n\t\tqueryString = `?${queryString}`;\r\n\t}\r\n\r\n\tlet hash = getHash(object.url);\r\n\tif (object.fragmentIdentifier) {\r\n\t\thash = `#${encode(object.fragmentIdentifier, options)}`;\r\n\t}\r\n\r\n\treturn `${url}${queryString}${hash}`;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}