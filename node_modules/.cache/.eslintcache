[{"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\App\\App.js":"2","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\RouterURL\\RouterURL.js":"3","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminLogin\\AdminLogin.js":"4","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Login\\Login.js":"5","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\utils\\Common.js":"6","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminManager\\AdminManager.js":"7","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\ForgotPassword\\ResetPassword.js":"8","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CompanyList\\CompanyList.js":"9","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\EditCompany\\EditCompany.js":"10","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Dashboard\\Dashboard.js":"11","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Error\\Error.js":"12","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\InvoiceContent.js":"13","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\ForgotPassword\\ForgotPassword.js":"14","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\ContractContent.js":"15","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\CreateContract.js":"16","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Notification\\Notification.js":"17","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\CreateInvoice.js":"18","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Document\\Document.js":"19","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\DetailDocument\\ContractDetail.js":"20","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\DetailDocument\\InvoiceDetail.js":"21","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminCompany\\DepartmentManagement\\DepartmentManagement.js":"22","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminCompany\\UserManagement\\UserManagement.js":"23","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CompanyRegister\\CompanyRegister.js":"24","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Profile\\Profile.js":"25","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\App\\firebase.js":"26","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\loginAPI.js":"27","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\companyListAPI.js":"28","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\userListAPI.js":"29","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\Sidebar.js":"30","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetAdminCompany\\GetAdminCompany.js":"31","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\SidebarAdmin.js":"32","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Navbar\\Navbar.js":"33","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Stepper\\ContractStepper.js":"34","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Stepper\\InvoiceStepper.js":"35","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\departmentAPI.js":"36","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\validateAPI.js":"37","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\axiosClient.js":"38","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\notiAPI.js":"39","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetDepartment.js":"40","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetPhone.js":"41","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetEmail.js":"42","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetCreater.js":"43","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\invoiceAPI.js":"44","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\StepDetail.js":"45","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\contractAPI.js":"46","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\PDF\\PDF.js":"47","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\StepDetailContract.js":"48","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\StepInvoice.js":"49","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\Stepper.js":"50"},{"size":266,"mtime":1616869009049,"results":"51","hashOfConfig":"52"},{"size":362,"mtime":1616869008972,"results":"53","hashOfConfig":"52"},{"size":4190,"mtime":1616869008983,"results":"54","hashOfConfig":"52"},{"size":3032,"mtime":1616869008971,"results":"55","hashOfConfig":"52"},{"size":5260,"mtime":1616869008981,"results":"56","hashOfConfig":"52"},{"size":545,"mtime":1616869009050,"results":"57","hashOfConfig":"52"},{"size":456,"mtime":1616869008971,"results":"58","hashOfConfig":"52"},{"size":4621,"mtime":1616997278468,"results":"59","hashOfConfig":"52"},{"size":7407,"mtime":1616869008972,"results":"60","hashOfConfig":"52"},{"size":8108,"mtime":1616869008977,"results":"61","hashOfConfig":"52"},{"size":12059,"mtime":1616950231352,"results":"62","hashOfConfig":"52"},{"size":691,"mtime":1616869008977,"results":"63","hashOfConfig":"52"},{"size":10372,"mtime":1616869008975,"results":"64","hashOfConfig":"52"},{"size":4906,"mtime":1616996720878,"results":"65","hashOfConfig":"52"},{"size":13867,"mtime":1616869008973,"results":"66","hashOfConfig":"52"},{"size":31264,"mtime":1616869008974,"results":"67","hashOfConfig":"52"},{"size":6683,"mtime":1616910643184,"results":"68","hashOfConfig":"52"},{"size":22573,"mtime":1616869008974,"results":"69","hashOfConfig":"52"},{"size":26266,"mtime":1616916166232,"results":"70","hashOfConfig":"52"},{"size":12127,"mtime":1616926128726,"results":"71","hashOfConfig":"52"},{"size":9564,"mtime":1616869008976,"results":"72","hashOfConfig":"52"},{"size":26376,"mtime":1617005289517,"results":"73","hashOfConfig":"52"},{"size":38526,"mtime":1617005746759,"results":"74","hashOfConfig":"52"},{"size":16984,"mtime":1617006254902,"results":"75","hashOfConfig":"52"},{"size":24074,"mtime":1616869008982,"results":"76","hashOfConfig":"52"},{"size":422,"mtime":1616869008972,"results":"77","hashOfConfig":"52"},{"size":341,"mtime":1616869008968,"results":"78","hashOfConfig":"52"},{"size":1425,"mtime":1616869008967,"results":"79","hashOfConfig":"52"},{"size":2177,"mtime":1616996772183,"results":"80","hashOfConfig":"52"},{"size":4666,"mtime":1616501057509,"results":"81","hashOfConfig":"82"},{"size":792,"mtime":1616869008978,"results":"83","hashOfConfig":"52"},{"size":2579,"mtime":1616869008983,"results":"84","hashOfConfig":"52"},{"size":7824,"mtime":1616869008981,"results":"85","hashOfConfig":"52"},{"size":362,"mtime":1616869008985,"results":"86","hashOfConfig":"52"},{"size":300,"mtime":1616869008986,"results":"87","hashOfConfig":"52"},{"size":2414,"mtime":1617004905825,"results":"88","hashOfConfig":"52"},{"size":589,"mtime":1616869008969,"results":"89","hashOfConfig":"52"},{"size":158,"mtime":1616869008967,"results":"90","hashOfConfig":"52"},{"size":364,"mtime":1616869008968,"results":"91","hashOfConfig":"52"},{"size":831,"mtime":1616869008979,"results":"92","hashOfConfig":"52"},{"size":794,"mtime":1616869008980,"results":"93","hashOfConfig":"52"},{"size":794,"mtime":1616869008979,"results":"94","hashOfConfig":"52"},{"size":798,"mtime":1616869008979,"results":"95","hashOfConfig":"52"},{"size":1646,"mtime":1616869008968,"results":"96","hashOfConfig":"52"},{"size":3570,"mtime":1616869008984,"results":"97","hashOfConfig":"52"},{"size":1689,"mtime":1616869008967,"results":"98","hashOfConfig":"52"},{"size":1275,"mtime":1616869008982,"results":"99","hashOfConfig":"52"},{"size":5185,"mtime":1616926088913,"results":"100","hashOfConfig":"52"},{"size":956,"mtime":1616869008985,"results":"101","hashOfConfig":"52"},{"size":1024,"mtime":1616869008985,"results":"102","hashOfConfig":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"1cfysk8",{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"105"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"105"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"105"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"105"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"105"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"105"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"105"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"105"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"105"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"105"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"105"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"165","usedDeprecatedRules":"105"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},"lohtio",{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"105"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\index.js",[],["218","219"],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\App\\App.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\RouterURL\\RouterURL.js",["220"],"import {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport AdminLogin from \"../AdminLogin/AdminLogin\";\r\nimport AdminManager from \"../AdminManager/AdminManager\";\r\nimport Login from \"../Login/Login\";\r\nimport CompanyRegister from \"../CompanyRegister/CompanyRegister\";\r\nimport CompanyList from \"../CompanyList/CompanyList\";\r\nimport ForgotPassword from \"../ForgotPassword/ForgotPassword\";\r\nimport EditCompany from \"../EditCompany/EditCompany\";\r\nimport { getToken, getUser } from \"../../utils/Common\";\r\nimport ResetPassword from \"../ForgotPassword/ResetPassword\";\r\nimport UserManagement from \"../AdminCompany/UserManagement/UserManagement\";\r\nimport CreateContract from \"../CreateDocument/CreateContract\";\r\nimport Dashboard from \"../Dashboard/Dashboard\";\r\nimport Document from \"../Document/Document\";\r\nimport Error from \"../Error/Error\";\r\nimport DepartmentManagerment from \"../AdminCompany/DepartmentManagement/DepartmentManagement\";\r\nimport Notification from \"../Notification/Notification\";\r\nimport CreateInvoice from \"../CreateDocument/CreateInvoice\";\r\nimport InvoiceContent from \"../CreateDocument/InvoiceContent\";\r\nimport Profile from \"../Profile/Profile\";\r\nimport ContractContent from \"../CreateDocument/ContractContent\";\r\nimport InvoiceDetail from \"../DetailDocument/InvoiceDetail\";\r\nimport ContractDetail from \"../DetailDocument/ContractDetail\";\r\n\r\nfunction RouterURL() {\r\n  const PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        getToken() && getUser().Role === \"3\" ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: \"/error\", state: { from: props.location } }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n\r\n  const AdminRoute = ({ component: Component, ...rest }) => (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        getToken() && getUser().Role === \"1\" ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: \"/error\", state: { from: props.location } }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n  const UserRoute = ({ component: Component, ...rest }) => (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        getToken() && getUser().Role !== \"3\" ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: \"/error\", state: { from: props.location } }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route path=\"/error\" component={Error} />\r\n        <Route exact path=\"/\" component={Login} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/admin\" component={AdminLogin} />\r\n        <Route path=\"/forgot-password\" component={ForgotPassword} />\r\n        <Route path=\"/reset-password\" component={ResetPassword} />\r\n        <Route path=\"/error\" component={Error} />\r\n        <UserRoute path=\"/contract\" component={CreateContract} />\r\n        <UserRoute path=\"/invoice\" component={CreateInvoice} />\r\n        <UserRoute path=\"/dashboard\" component={Dashboard} />\r\n        <UserRoute path=\"/invoice-confirm\" component={InvoiceContent} />\r\n        <UserRoute path=\"/contract-confirm\" component={ContractContent} />\r\n        <UserRoute path=\"/document\" component={Document} />\r\n        <UserRoute path=\"/detail/invoice/:id/:name\" component={InvoiceDetail} />\r\n        <UserRoute\r\n          path=\"/detail/contract/:id/:name\"\r\n          component={ContractDetail}\r\n        />\r\n        <UserRoute path=\"/notification\" component={Notification} />\r\n        <AdminRoute path=\"/department\" component={DepartmentManagerment} />\r\n        <AdminRoute path=\"/user-management\" component={UserManagement} />\r\n        <PrivateRoute path=\"/admin-manager\" component={AdminManager} />\r\n        <PrivateRoute path=\"/company-register\" component={CompanyRegister} />\r\n        <PrivateRoute path=\"/company-list\" component={CompanyList} />\r\n        <PrivateRoute path=\"/edit-company\" component={EditCompany} />\r\n        <UserRoute path=\"/profile\" component={Profile} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\nexport default RouterURL;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminLogin\\AdminLogin.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Login\\Login.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\utils\\Common.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminManager\\AdminManager.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\ForgotPassword\\ResetPassword.js",["221","222","223"],"import { useState } from \"react\";\r\nimport { Container, Form, FormGroup } from \"reactstrap\";\r\nimport logo from \"../../images/logo.png\";\r\nimport \"../../css/ResetPassword.css\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useHistory, useLocation } from \"react-router\";\r\nimport support from \"../../images/support.png\";\r\nimport md5 from \"md5\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport { toast } from \"react-toastify\";\r\nimport { removeUserSession } from \"../../utils/Common\";\r\n\r\nfunction ResetPassword() {\r\n  const user = localStorage.getItem(\"user\");\r\n  const history = useHistory();\r\n  const [password, setPassword] = useState({\r\n    new_password: \"\",\r\n    confirm_password: \"\",\r\n  });\r\n  const [error, setError] = useState({\r\n    correct: false,\r\n    message: \"\",\r\n  });\r\n  const [error2, setError2] = useState({\r\n    correct: false,\r\n    message: \"\",\r\n  });\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const regex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$/;\r\n\r\n    if (regex.exec(password.new_password) === null) {\r\n      setError({\r\n        correct: true,\r\n        message: \"Password must be more than 6 characters\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          correct: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (!regex.test(password.new_password.trim())) {\r\n      setError({\r\n        correct: true,\r\n        message: \"Password must be at least 6 characters, 1 upper case\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          correct: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (password.confirm_password.trim() === null) {\r\n      setError2({\r\n        correct: true,\r\n        message: \"Please input new password again\",\r\n      });\r\n      setTimeout(() => {\r\n        setError2({\r\n          correct: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (\r\n      password.confirm_password.trim() !== password.new_password.trim()\r\n    ) {\r\n      setError2({\r\n        correct: true,\r\n        message: \"Password confirm is not match\",\r\n      });\r\n      setTimeout(() => {\r\n        setError2({\r\n          correct: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else {\r\n      const params = {\r\n        email: user,\r\n        newPassword: md5(password.new_password),\r\n      };\r\n      userListAPI\r\n        .forgotPassword(params)\r\n        .then(function () {\r\n          toast.success(\"Change password successfully\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          setTimeout(() => {\r\n            localStorage.removeItem(\"user\");\r\n            history.push(\"/\");\r\n          }, 5000);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  function handleOnChange(event) {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    setPassword({\r\n      ...password,\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"background\">\r\n      <Container className=\"a\">\r\n        <Form className=\"reset\">\r\n          <FormGroup>\r\n            <img src={logo} alt=\"\" />\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <h3>Forgot Password?</h3>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <div>\r\n              <TextField\r\n                fullWidth\r\n                type=\"password\"\r\n                name=\"new_password\"\r\n                required\r\n                onChange={handleOnChange}\r\n                placeholder=\"New password\"\r\n                variant=\"outlined\"\r\n                error={error.correct}\r\n                helperText={error.message}\r\n              />\r\n            </div>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <TextField\r\n              fullWidth\r\n              type=\"password\"\r\n              name=\"confirm_password\"\r\n              required\r\n              onChange={handleOnChange}\r\n              placeholder=\"Confirm new password\"\r\n              variant=\"outlined\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className=\"update\">\r\n            <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\r\n              Update\r\n            </Button>\r\n          </FormGroup>\r\n        </Form>\r\n        <img\r\n          style={{ position: \"fixed\", bottom: 0, left: 0 }}\r\n          src={support}\r\n          alt=\"\"\r\n          width=\"500\"\r\n          height=\"100\"\r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResetPassword;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CompanyList\\CompanyList.js",["224","225","226"],"import {\r\n  Container,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle,\r\n  Table,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport companyListAPI from \"../../api/companyListAPI\";\r\nimport SidebarAdmin from \"../Sidebar/SidebarAdmin\";\r\nimport \"../../css/CompanyList.css\";\r\nimport GetAdminCompany from \"../GetAdminCompany/GetAdminCompany\";\r\nimport Moment from \"moment\";\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\n\r\nfunction CompanyList() {\r\n  const [filter, setFilter] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const toggle = () => setFilter((prevState) => !prevState);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage] = useState(10);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [data, setData] = useState([]);\r\n  const [postList, setPostList] = useState([]);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n  const currentPosts = postList.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  function changePage(event, newPage) {\r\n    setPage(newPage);\r\n  }\r\n  useEffect(() => {\r\n    async function fetListData() {\r\n      try {\r\n        const response = await companyListAPI.getAll();\r\n        setPostList(response.data);\r\n        setData(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetListData();\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 2000);\r\n  }, []);\r\n  function Active() {\r\n    setPostList(\r\n      data.filter((data) => {\r\n        if (data.status === 1) {\r\n          return data;\r\n        }\r\n      })\r\n    );\r\n  }\r\n  function listDeactive() {\r\n    setPostList(\r\n      data.filter((data) => {\r\n        if (data.status !== 1) {\r\n          return data;\r\n        }\r\n      })\r\n    );\r\n  }\r\n  function All() {\r\n    setPostList(data);\r\n  }\r\n  return (\r\n    <div>\r\n      <SidebarAdmin />\r\n      <div className=\"main-panel1\">\r\n        <Container fluid={true}>\r\n          <div className=\"search_form\">\r\n            <Form>\r\n              <FormGroup>\r\n                <Row>\r\n                  <Col xs={10}>\r\n                    <Input\r\n                      type=\"search\"\r\n                      className=\"form-control rounded\"\r\n                      value={search}\r\n                      onChange={(event) => {\r\n                        setSearch(event.target.value);\r\n                      }}\r\n                      placeholder=\"Search by name company\"\r\n                    />\r\n                  </Col>\r\n                  <Col xs={2}>\r\n                    <Dropdown isOpen={filter} toggle={toggle}>\r\n                      <DropdownToggle color=\"primary\" caret>\r\n                        Filter\r\n                      </DropdownToggle>\r\n                      <DropdownMenu>\r\n                        <DropdownItem onClick={All}>All</DropdownItem>\r\n                        <DropdownItem onClick={Active}>Active</DropdownItem>\r\n                        <DropdownItem onClick={listDeactive}>\r\n                          Deactive\r\n                        </DropdownItem>\r\n                      </DropdownMenu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                </Row>\r\n              </FormGroup>\r\n            </Form>\r\n          </div>\r\n          {loading ? (\r\n            <ScaleLoader color={\"#2512DF\"} loading={loading} size={35} />\r\n          ) : (\r\n            <div hidden={search !== \"\" ? true : false}>\r\n              <TablePagination\r\n                component=\"div\"\r\n                count={postList.length}\r\n                page={page}\r\n                onChangePage={changePage}\r\n                rowsPerPage={rowsPerPage}\r\n                labelRowsPerPage=\"\"\r\n                rowsPerPageOptions={[]}\r\n              />\r\n              <Table hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th>No</th>\r\n                    <th>Company Name</th>\r\n                    <th>Manager Name</th>\r\n                    <th>Date Created</th>\r\n                    <th>Status</th>\r\n                    <th>Phone Number</th>\r\n                    <th>Edits/Details</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {currentPosts.map((data, key) => (\r\n                    <tr key={key}>\r\n                      <th>{data.id}</th>\r\n                      <td>{data.name}</td>\r\n                      <td>\r\n                        <GetAdminCompany id={data.adminId} />\r\n                      </td>\r\n                      <td>\r\n                        {Moment(data.dateCreate).format(\"DD/MM/YYYY HH:mm:ss\")}\r\n                      </td>\r\n                      <td>\r\n                        {data.status === 1 ? (\r\n                          <p style={{ color: \"green\" }}>Active</p>\r\n                        ) : (\r\n                          <p style={{ color: \"red\" }}>Deactive</p>\r\n                        )}\r\n                      </td>\r\n                      <td>{data.phone}</td>\r\n                      <td>\r\n                        <Link\r\n                          to={{\r\n                            pathname: \"/edit-company\",\r\n                            state: data,\r\n                          }}\r\n                        >\r\n                          Edit/Detail\r\n                        </Link>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          )}\r\n          <Table hidden={search === \"\" ? true : false}>\r\n            <thead>\r\n              <tr>\r\n                <th>No</th>\r\n                <th>Company Name</th>\r\n                <th>Manager Name</th>\r\n                <th>Date Created</th>\r\n                <th>Status</th>\r\n                <th>Phone Number</th>\r\n                <th>Edits/Details</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data\r\n                .filter((data) => {\r\n                  if (data.name.toLowerCase().includes(search.toLowerCase())) {\r\n                    return data;\r\n                  }\r\n                })\r\n                .map((data) => (\r\n                  <tr key={data.id}>\r\n                    <th>{data.id}</th>\r\n                    <td>{data.name}</td>\r\n                    <td>\r\n                      <GetAdminCompany id={data.adminId} />\r\n                    </td>\r\n                    <td>{data.dateCreate}</td>\r\n                    <td>\r\n                      {data.status === 1 ? (\r\n                        <p style={{ color: \"green\" }}>Active</p>\r\n                      ) : (\r\n                        <p style={{ color: \"red\" }}>Deactive</p>\r\n                      )}\r\n                    </td>\r\n                    <td>{data.phone}</td>\r\n                    <td>\r\n                      <Link\r\n                        to={{\r\n                          pathname: \"/edit-company\",\r\n                          state: data,\r\n                        }}\r\n                      >\r\n                        Edit/Detail\r\n                      </Link>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default CompanyList;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\EditCompany\\EditCompany.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Dashboard\\Dashboard.js",["227","228"],"import { Container, Form, FormGroup, Label, Row, Col, Table } from \"reactstrap\";\r\nimport \"../../css/Dashboard.css\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport notsigned from \"../../images/status.png\";\r\nimport doneinvoice from \"../../images/invoicecompleted.png\";\r\nimport done from \"../../images/true.png\";\r\nimport invoiceAPI from \"../../api/invoiceAPI\";\r\nimport { getUser } from \"../../utils/Common\";\r\nimport contractAPI from \"../../api/contractAPI\";\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\nimport moment from \"moment\";\r\nimport notiAPI from \"../../api/notiAPI\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport notDoc from \"../../images/1.png\";\r\n\r\nfunction Dashboard() {\r\n  const history = useHistory();\r\n  const [noti, setNoti] = useState([]);\r\n  const [hidden, setHidden] = useState(true);\r\n  const [listContract, setListContract] = useState([]);\r\n  const [listInvoice, setListInvoice] = useState([]);\r\n  const [currentPage] = useState(1);\r\n  const [postPerPage] = useState(5);\r\n  const indexOfLastPost = currentPage * postPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postPerPage;\r\n  const invoice = listInvoice\r\n    .sort((a, b) => {\r\n      return (\r\n        new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\r\n      );\r\n    })\r\n    .reverse();\r\n  const contract = listContract\r\n    .sort((a, b) => {\r\n      return (\r\n        new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\r\n      );\r\n    })\r\n    .reverse();\r\n  const currentPostsContract = contract.slice(\r\n    indexOfFirstPost,\r\n    indexOfLastPost\r\n  );\r\n  const currentPostsInvoice = invoice.slice(indexOfFirstPost, indexOfLastPost);\r\n  let [loadingInvoice, setLoadingInvoice] = useState(true);\r\n  let [loadingContract, setLoadingContract] = useState(true);\r\n  var listNoti = noti\r\n    .sort((a, b) => {\r\n      return (\r\n        new Date(a.createdDate).getTime() - new Date(b.createdDate).getTime()\r\n      );\r\n    })\r\n    .reverse();\r\n  const currentPostsNoti = listNoti.slice(indexOfFirstPost, indexOfLastPost);\r\n  useEffect(() => {\r\n    async function fetListNoti() {\r\n      try {\r\n        const res = await notiAPI.getById(getUser().Id);\r\n        setNoti(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetListNoti();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function getListDocument() {\r\n      try {\r\n        if (getUser().Role === \"1\") {\r\n          await contractAPI\r\n            .getContractByCompanyId(getUser().CompanyId)\r\n            .then(function (contract) {\r\n              invoiceAPI\r\n                .getInvoiceByCompanyId(getUser().CompanyId)\r\n                .then(function (invoice) {\r\n                  setListInvoice(invoice.data);\r\n                  setListContract(contract.data);\r\n                  setTimeout(() => {\r\n                    setLoadingContract(false);\r\n                  }, 2000);\r\n                  setTimeout(() => {\r\n                    setLoadingInvoice(false);\r\n                  }, 2000);\r\n                })\r\n                .catch(function (error) {\r\n                  console.log(error);\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n            });\r\n        } else {\r\n          await invoiceAPI\r\n            .getInvoiceByViewerId(getUser().Id)\r\n            .then(function (res1) {\r\n              invoiceAPI\r\n                .getInvoiceBySignerId(getUser().Id)\r\n                .then(function (res2) {\r\n                  contractAPI\r\n                    .getContractByViewerId(getUser().Id)\r\n                    .then(function (res3) {\r\n                      contractAPI\r\n                        .getContractBySignerId(getUser().Id)\r\n                        .then(function (res4) {\r\n                          const listInvoice1 = [...res1.data, ...res2.data];\r\n                          const listContract1 = [...res3.data, ...res4.data];\r\n                          setListInvoice(listInvoice1);\r\n                          setListContract(listContract1);\r\n                          if (listInvoice1 === \"\") {\r\n                            setHidden(false);\r\n                          } else {\r\n                            setHidden(true);\r\n                          }\r\n                          setTimeout(() => {\r\n                            setLoadingContract(false);\r\n                          }, 2000);\r\n                          setTimeout(() => {\r\n                            setLoadingInvoice(false);\r\n                          }, 2000);\r\n                        })\r\n                        .catch(function (error) {\r\n                          console.log(error);\r\n                        });\r\n                    })\r\n                    .catch(function (error) {\r\n                      console.log(error);\r\n                    });\r\n                })\r\n                .catch(function (error) {\r\n                  console.log(error);\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n            });\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getListDocument();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <main className=\"main-panel\">\r\n        <Container fluid>\r\n          <div>\r\n            <Row>\r\n              <Col>\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Label className=\"title\">Contract</Label>\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    {loadingContract ? (\r\n                      <ScaleLoader\r\n                        color={\"#2512DF\"}\r\n                        loading={loadingContract}\r\n                        size={35}\r\n                      />\r\n                    ) : (\r\n                      <Table hover>\r\n                        <tbody>\r\n                          {currentPostsContract.map((data) => (\r\n                            <tr\r\n                              key={data.id}\r\n                              onClick={() =>\r\n                                history.push({\r\n                                  pathname:\r\n                                    \"/detail/contract/\" +\r\n                                    data.id +\r\n                                    \"/\" +\r\n                                    data.title,\r\n                                  state: data,\r\n                                })\r\n                              }\r\n                            >\r\n                              <td>\r\n                                <p\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"demo-2\"\r\n                                >\r\n                                  {data.title}\r\n                                </p>\r\n                              </td>\r\n                              <td>\r\n                                {data.status < 2 ? (\r\n                                  <img src={notsigned} alt=\"\" />\r\n                                ) : (\r\n                                  <img src={done} alt=\"\" />\r\n                                )}\r\n                              </td>\r\n                              <td style={{ textAlign: \"right\" }}>\r\n                                {moment(data.dateCreate).format(\"DD/MM/YYYY\")}\r\n                              </td>\r\n                            </tr>\r\n                          ))}\r\n                        </tbody>\r\n                      </Table>\r\n                    )}\r\n                  </FormGroup>\r\n                </Form>\r\n                <div>\r\n                  <Link\r\n                    to=\"/document\"\r\n                    hidden={listContract.length > 5 ? false : true}\r\n                  >\r\n                    See more\r\n                  </Link>\r\n                </div>\r\n              </Col>\r\n              <Col>\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Label className=\"title\">Invoice</Label>\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    {loadingInvoice ? (\r\n                      <ScaleLoader\r\n                        color={\"#2512DF\"}\r\n                        loading={loadingInvoice}\r\n                        size={35}\r\n                      />\r\n                    ) : (\r\n                      <Table hover>\r\n                        <tbody>\r\n                          {currentPostsInvoice.map((data) => (\r\n                            <tr\r\n                              key={data.id}\r\n                              onClick={() =>\r\n                                history.push({\r\n                                  pathname:\r\n                                    \"/detail/invoice/\" +\r\n                                    data.id +\r\n                                    \"/\" +\r\n                                    data.title,\r\n                                  state: data,\r\n                                })\r\n                              }\r\n                            >\r\n                              <td>\r\n                                <p\r\n                                  style={{ textAlign: \"left\" }}\r\n                                  className=\"demo-2\"\r\n                                >\r\n                                  {data.title}\r\n                                </p>\r\n                              </td>\r\n                              <td>\r\n                                {data.status < 2 ? (\r\n                                  <img src={notsigned} alt=\"\" />\r\n                                ) : (\r\n                                  <img src={doneinvoice} alt=\"\" />\r\n                                )}\r\n                              </td>\r\n                              <td style={{ textAlign: \"right\" }}>\r\n                                {moment(data.dateCreate).format(\"DD/MM/YYYY\")}\r\n                              </td>\r\n                            </tr>\r\n                          ))}\r\n                        </tbody>\r\n                        {/* <img src={notDoc} alt=\"\" width=\"300px\" height=\"300px\" /> */}\r\n                      </Table>\r\n                    )}\r\n                  </FormGroup>\r\n                </Form>\r\n                <div>\r\n                  <Link\r\n                    to=\"/document\"\r\n                    hidden={listInvoice.length > 5 ? false : true}\r\n                  >\r\n                    See more\r\n                  </Link>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Form>\r\n              <FormGroup>\r\n                <Label className=\"title\">Activity Log</Label>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Table hover style={{ marginTop: 20 }}>\r\n                  <tbody>\r\n                    {currentPostsNoti.map((row) => (\r\n                      <tr key={row.id}>\r\n                        <td>\r\n                          <Row style={{ fontWeight: \"bold\", marginLeft: 1 }}>\r\n                            {row.content}\r\n                          </Row>\r\n                          <Row style={{ marginLeft: 10 }}>{row.title}</Row>\r\n                          <Row style={{ marginLeft: 10 }}>\r\n                            <Link to=\"/\">View detail</Link>\r\n                          </Row>\r\n                        </td>\r\n                        <td style={{ position: \"absolute\", right: 10 }}>\r\n                          {moment(row.createdDate).format(\r\n                            \"DD/MM/YYYY HH:mm:ss\"\r\n                          )}\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </Table>\r\n              </FormGroup>\r\n            </Form>\r\n            <div>\r\n              <Link\r\n                to=\"/notification\"\r\n                hidden={listNoti.length > 5 ? false : true}\r\n              >\r\n                See more\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default Dashboard;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Error\\Error.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\InvoiceContent.js",["229","230","231"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\r\nimport StepInvoice from \"../Sidebar/StepInvoice\";\r\nimport PDF from \"../PDF/PDF\";\r\nimport \"../../css/CreateDoc.css\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { forwardRef, useEffect, useState } from \"react\";\r\nimport { getUser } from \"../../utils/Common\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport invoiceAPI from \"../../api/invoiceAPI\";\r\nimport Moment from \"moment\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  InputAdornment,\r\n  Slide,\r\n  TablePagination,\r\n} from \"@material-ui/core\";\r\nimport TitleIcon from \"@material-ui/icons/Title\";\r\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport \"date-fns\";\r\nimport EventAvailableIcon from \"@material-ui/icons/EventAvailable\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport moment from \"moment\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\n\r\ntoast.configure();\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"down\" ref={ref} {...props} />;\r\n});\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.common.black,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction InvoiceContent() {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [create, setCreate] = useState(false);\r\n  function toogle() {\r\n    setCreate(!create);\r\n  }\r\n  const [signer, setSigner] = useState(\"\");\r\n  const viewer = location.state.viewer;\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage] = useState(4);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n  const currentPosts = viewer.slice(indexOfFirstPost, indexOfLastPost);\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  useEffect(() => {\r\n    async function getSigner() {\r\n      try {\r\n        const res = await userListAPI.getUserById(\r\n          location.state.data.signer.id\r\n        );\r\n        setSigner(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getSigner();\r\n  }, [location.state.data.signer.id]);\r\n\r\n  async function handleCreated(e) {\r\n    e.preventDefault();\r\n    const file = location.state.file[0];\r\n    const convertBase64 = await base64(file);\r\n    const url = convertBase64.slice(28);\r\n    const position =\r\n      \"page=\" +\r\n      location.state.numberPage +\r\n      \",x=\" +\r\n      location.state.signLocation.x +\r\n      \",y=\" +\r\n      location.state.signLocation.y;\r\n    const params = {\r\n      dateCreate: Moment(new Date()).format(\r\n        \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n      ),\r\n      creatorId: getUser().Id,\r\n      dateExpire: location.state.date,\r\n      title: location.state.data.title,\r\n      signerId: location.state.data.signer.id,\r\n      signLocation: position,\r\n      invoiceURL: url,\r\n    };\r\n    invoiceAPI\r\n      .addInvoice(params)\r\n      .then(function (res) {\r\n        const invoiceId = res.data.id;\r\n        const viewer = {\r\n          invoiceId: invoiceId,\r\n          listViewersId: location.state.listViewerId,\r\n        };\r\n        invoiceAPI\r\n          .addViewerInvoice(viewer)\r\n          .then(function () {\r\n            toast.success(\"You has created invoice successfully\", {\r\n              position: toast.POSITION.TOP_CENTER,\r\n            });\r\n            history.push({\r\n              pathname:\r\n                \"/detail/invoice/\" +\r\n                invoiceId +\r\n                \"/\" +\r\n                location.state.data.title,\r\n            });\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n  function base64(file) {\r\n    return new Promise((resolve) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onload = () => {\r\n        resolve(fileReader.result);\r\n      };\r\n    });\r\n  }\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <StepInvoice activeStep={5} />\r\n      <main className=\"main-invoice\">\r\n        <Container fluid={true}>\r\n          <Row>\r\n            <Col>\r\n              <Paper style={{ marginTop: \"20px\" }} elevation={3}>\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                  }}\r\n                >\r\n                  Invoice Content\r\n                </Label>\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={location.state.data.title}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <TitleIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  value={signer.name}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <BorderColorIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n\r\n                <TableContainer style={{ marginTop: \"20px\", padding: \"10px\" }}>\r\n                  <Table aria-label=\"customized table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <StyledTableCell>Viewer name</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">Email</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">\r\n                          Phone number\r\n                        </StyledTableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {currentPosts.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                          <StyledTableCell component=\"th\" scope=\"row\">\r\n                            {row.name}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            {row.email}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            {row.phone}\r\n                          </StyledTableCell>\r\n                        </StyledTableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                  component=\"div\"\r\n                  count={viewer.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  labelRowsPerPage=\"\"\r\n                  onChangePage={handleChangePage}\r\n                  rowsPerPageOptions={[]}\r\n                />\r\n                <TextField\r\n                  label=\"Date expiration\"\r\n                  value={moment(location.state.date).format(\r\n                    \"DD/MM/YYYY HH:mm:ss\"\r\n                  )}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <EventAvailableIcon color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </Paper>\r\n              <Button\r\n                style={{ marginTop: \"20px\", marginRight: \"10px\" }}\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                onClick={() => history.push(\"/document\")}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                style={{ marginTop: \"20px\" }}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={toogle}\r\n              >\r\n                Create\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Form className=\"form-doc\">\r\n                <FormGroup row>\r\n                  <div>\r\n                    <PDF pdf={location.state.file[0]} />\r\n                  </div>\r\n                </FormGroup>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <Dialog\r\n          open={create}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          onClose={toogle}\r\n          disableBackdropClick\r\n          disableEscapeKeyDown\r\n          fullWidth\r\n        >\r\n          <DialogTitle>{\"Do you want create Invoice?\"}</DialogTitle>\r\n          <DialogActions>\r\n            <Button onClick={toogle} color=\"secondary\" variant=\"contained\">\r\n              No\r\n            </Button>\r\n            <Button onClick={handleCreated} color=\"primary\" variant=\"contained\">\r\n              Yes\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default InvoiceContent;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\ForgotPassword\\ForgotPassword.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\ContractContent.js",["232","233","234","235"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\r\nimport StepContract from \"../Sidebar/Stepper\";\r\nimport PDF from \"../PDF/PDF\";\r\nimport \"../../css/CreateDoc.css\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { forwardRef, useEffect, useState } from \"react\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport companyListAPI from \"../../api/companyListAPI\";\r\nimport { getUser } from \"../../utils/Common\";\r\nimport contractAPI from \"../../api/contractAPI\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Moment from \"moment\";\r\nimport { toast } from \"react-toastify\";\r\nimport axios from \"axios\";\r\nimport EventAvailableIcon from \"@material-ui/icons/EventAvailable\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TitleIcon from \"@material-ui/icons/Title\";\r\nimport BusinessIcon from \"@material-ui/icons/Business\";\r\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\r\nimport {\r\n  InputAdornment,\r\n  Paper,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  Table,\r\n  TextField,\r\n  withStyles,\r\n  TablePagination,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogActions,\r\n  Slide,\r\n} from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"down\" ref={ref} {...props} />;\r\n});\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.common.black,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction ContractContent() {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [create, setCreate] = useState(false);\r\n  const [signer, setSigner] = useState(\"\");\r\n  const [guest, setGuest] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage] = useState(2);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n  const viewer = location.state.viewer;\r\n  const currentPosts = viewer.slice(indexOfFirstPost, indexOfLastPost);\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  function toogle() {\r\n    setCreate(!create);\r\n  }\r\n  useEffect(() => {\r\n    async function getSigner() {\r\n      try {\r\n        const res = await userListAPI.getUserById(\r\n          location.state.data.signer.id\r\n        );\r\n        setSigner(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getSigner();\r\n  }, [location.state.data.signer.id]);\r\n  useEffect(() => {\r\n    async function getCompany() {\r\n      try {\r\n        const res = await companyListAPI.getCompanyById(getUser().CompanyId);\r\n        setCompany(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getCompany();\r\n  }, []);\r\n  useEffect(() => {\r\n    async function getGuest() {\r\n      try {\r\n        const res = await userListAPI.getUserById(\r\n          location.state.data.signer_guest.id\r\n        );\r\n        setGuest(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getGuest();\r\n  }, [location.state.data.signer_guest.id]);\r\n\r\n  async function handleCreated(e) {\r\n    e.preventDefault();\r\n    const file = location.state.file[0];\r\n    const convertBase64 = await base64(file);\r\n    const url = convertBase64.slice(28);\r\n    const position =\r\n      \"page=\" +\r\n      location.state.numberPage +\r\n      \",x=\" +\r\n      location.state.signLocationA.x +\r\n      \",y=\" +\r\n      location.state.signLocationA.y +\r\n      \"|page=\" +\r\n      location.state.numberPage +\r\n      \",x=\" +\r\n      location.state.signLocationB.x +\r\n      \",y=\" +\r\n      location.state.signLocationB.y;\r\n    const params = {\r\n      dateCreate: Moment(new Date()).format(\r\n        \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n      ),\r\n      creatorId: getUser().Id,\r\n      dateExpire: location.state.date,\r\n      title: location.state.data.title,\r\n      contractURL: url,\r\n      signLocation: position,\r\n    };\r\n    contractAPI\r\n      .addContract(params)\r\n      .then(function (res) {\r\n        const contractId = res.data.id;\r\n        const listSigner = [];\r\n        listSigner.push(location.state.data.signer.id);\r\n        listSigner.push(location.state.data.signer_guest.id);\r\n        const data = {\r\n          contractId: contractId,\r\n          listSignersId: listSigner,\r\n        };\r\n        axios\r\n          .put(\r\n            \"https://datnxeoffice.azurewebsites.net/api/contracts/addsignertocontract\",\r\n            data,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${getUser().IdToken}`,\r\n              },\r\n            }\r\n          )\r\n          .then(function (res) {\r\n            const listViewerId = [];\r\n            location.state.viewer.map((v) => {\r\n              listViewerId.push(v.id);\r\n            });\r\n            listViewerId.push(getUser().Id);\r\n            const viewer = {\r\n              contractId: contractId,\r\n              listViewersId: listViewerId,\r\n            };\r\n            axios\r\n              .put(\r\n                \"https://datnxeoffice.azurewebsites.net/api/contracts/addviewertocontract\",\r\n                viewer,\r\n                {\r\n                  headers: {\r\n                    Authorization: `Bearer ${getUser().IdToken}`,\r\n                  },\r\n                }\r\n              )\r\n              .then(function (res) {\r\n                toast.success(\"You has created contract successfully\", {\r\n                  position: toast.POSITION.TOP_CENTER,\r\n                });\r\n                history.push({\r\n                  pathname:\r\n                    \"/detail/contract/\" +\r\n                    contractId +\r\n                    \"/\" +\r\n                    location.state.data.title,\r\n                });\r\n              })\r\n              .catch(function (error) {\r\n                console.log(error);\r\n              });\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function base64(file) {\r\n    return new Promise((resolve) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onload = () => {\r\n        resolve(fileReader.result);\r\n      };\r\n    });\r\n  }\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <StepContract activeStep={7} />\r\n      <main className=\"main-contract\">\r\n        <Container fluid>\r\n          <Row>\r\n            <Col>\r\n              <Paper style={{ marginTop: \"20px\" }} elevation={3}>\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                  }}\r\n                >\r\n                  Contract Content\r\n                </Label>\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={location.state.data.title}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <TitleIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={company.name}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <BusinessIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={signer.name}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <BorderColorIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={location.state.data.company_guest.name}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <BusinessIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={guest.name}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <BorderColorIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TableContainer>\r\n                  <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <StyledTableCell>Viewer name</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">Email</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">\r\n                          Phone number\r\n                        </StyledTableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {currentPosts.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                          <StyledTableCell component=\"th\" scope=\"row\">\r\n                            {row.name}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            {row.email}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            {row.phone}\r\n                          </StyledTableCell>\r\n                        </StyledTableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                  component=\"div\"\r\n                  count={viewer.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  labelRowsPerPage=\"\"\r\n                  onChangePage={handleChangePage}\r\n                  rowsPerPageOptions={[]}\r\n                />\r\n\r\n                <TextField\r\n                  label=\"Date expiration\"\r\n                  value={moment(location.state.date).format(\r\n                    \"DD/MM/YYYY HH:mm:ss\"\r\n                  )}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <EventAvailableIcon color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </Paper>\r\n              <Button\r\n                style={{ marginTop: \"20px\", marginRight: \"10px\" }}\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                onClick={() => history.push(\"/document\")}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                style={{ marginTop: \"20px\" }}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={toogle}\r\n              >\r\n                Create\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Form className=\"form-doc\">\r\n                <FormGroup row>\r\n                  <div>\r\n                    <PDF pdf={location.state.file[0]} />\r\n                  </div>\r\n                </FormGroup>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <Dialog\r\n          open={create}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          onClose={toogle}\r\n          disableBackdropClick\r\n          disableEscapeKeyDown\r\n          fullWidth\r\n        >\r\n          <DialogTitle>{\"Do you want create Contract?\"}</DialogTitle>\r\n          <DialogActions>\r\n            <Button onClick={toogle} color=\"secondary\" variant=\"contained\">\r\n              No\r\n            </Button>\r\n            <Button onClick={handleCreated} color=\"primary\" variant=\"contained\">\r\n              Yes\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default ContractContent;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\CreateContract.js",["236","237","238","239","240","241","242","243","244","245"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"../../css/CreateDoc.css\";\r\nimport VerticalLinearStepper from \"../Sidebar/Stepper\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport companyListAPI from \"../../api/companyListAPI\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport { getUser } from \"../../utils/Common\";\r\nimport demo from \"../../images/demo.png\";\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport EditLocationIcon from \"@material-ui/icons/EditLocation\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport BackupIcon from \"@material-ui/icons/Backup\";\r\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport \"date-fns\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Moment from \"moment\";\r\nimport { InputAdornment, Slide, Snackbar, Tooltip } from \"@material-ui/core\";\r\nimport TitleIcon from \"@material-ui/icons/Title\";\r\nimport { toast } from \"react-toastify\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nfunction TransitionLeft(props) {\r\n  return <Slide {...props} direction=\"right\" />;\r\n}\r\ntoast.configure();\r\nfunction CreateDocument() {\r\n  const [listCompany, setListCompany] = useState([]);\r\n  const [fileName, setFileName] = useState(\"\");\r\n  const [listSinger, setListSigner] = useState([]);\r\n  const [listGuest, setListGuest] = useState([]);\r\n  const history = useHistory();\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n  const [locaA, setLocaA] = useState(true);\r\n  const [locaB, setLocaB] = useState(true);\r\n  const [show, setShow] = useState(false);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [file, setFile] = useState([]);\r\n  const [dataUpload, setDataUpload] = useState({\r\n    title: \"\",\r\n    signer: null,\r\n    company_guest: \"\",\r\n    signer_guest: null,\r\n  });\r\n  const [alert, setAlert] = useState({\r\n    file: false,\r\n    title: false,\r\n    signerA: false,\r\n    signerB: false,\r\n    company: false,\r\n    date: false,\r\n    location: false,\r\n    message: \"\",\r\n  });\r\n  const [positionA, setPositionA] = useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const [positionB, setPositionB] = useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const [cursor, setCursor] = useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const [color, setColor] = useState({\r\n    signerA: \"#808080ad\",\r\n    signerB: \"#808080ad\",\r\n  });\r\n  const [viewer, setViewer] = useState([]);\r\n  const [viewerGuest, setViewerGuest] = useState([]);\r\n  const [numPages, setNumPages] = useState(\"\");\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n\r\n  function onDocumentLoadSuccess({ numPages }) {\r\n    setNumPages(numPages);\r\n    setPageNumber(1);\r\n  }\r\n  const handleChange = (event, value) => {\r\n    setPageNumber(value);\r\n  };\r\n\r\n  function handleOnChange(event) {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    setDataUpload({\r\n      ...dataUpload,\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetListCompany() {\r\n      try {\r\n        const response = await companyListAPI.getAll();\r\n        setListCompany(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetListCompany();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function fetListUser() {\r\n      const companyId = getUser().CompanyId;\r\n      try {\r\n        const response = await userListAPI.getUserByCompanyId(companyId);\r\n        setListSigner(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetListUser();\r\n  }, []);\r\n  useEffect(() => {\r\n    async function fetListGuest() {\r\n      const id = dataUpload.company_guest.id;\r\n      try {\r\n        const response = await userListAPI.getUserByCompanyId(id);\r\n        setListGuest(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetListGuest();\r\n  }, [dataUpload.company_guest]);\r\n\r\n  function handleContent() {\r\n    if (selectedDate === null) {\r\n      setAlert({\r\n        ...alert,\r\n        date: true,\r\n        message: \"Please select expiration date !!!\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(\r\n          {\r\n            ...alert,\r\n            date: false,\r\n            message: \"\",\r\n          },\r\n          3000\r\n        );\r\n      });\r\n    } else if (\r\n      Moment(selectedDate).format(\"DD-MM-YYYY\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\") <\r\n      Moment(new Date()).format(\"DD-MM-YYYY\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\")\r\n    ) {\r\n      setAlert({\r\n        ...alert,\r\n        date: true,\r\n        message: \"Expiration date can't less than current date !!!\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert({\r\n          ...alert,\r\n          date: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (positionA.x === 0 && positionA.y === 0) {\r\n      setAlert({\r\n        ...alert,\r\n        location: true,\r\n      });\r\n      setTimeout(() => {\r\n        setAlert({\r\n          ...alert,\r\n          location: false,\r\n        });\r\n      }, 3000);\r\n    } else if (positionB.x === 0 && positionB.y === 0) {\r\n      setAlert({\r\n        ...alert,\r\n        location: true,\r\n      });\r\n      setTimeout(() => {\r\n        setAlert({\r\n          ...alert,\r\n          location: false,\r\n        });\r\n      }, 3000);\r\n    } else {\r\n      const listViewer = [...viewer, ...viewerGuest];\r\n      history.push({\r\n        pathname: \"/contract-confirm\",\r\n        state: {\r\n          file: file,\r\n          data: dataUpload,\r\n          viewer: listViewer,\r\n          signLocationA: positionA,\r\n          signLocationB: positionB,\r\n          numberPage: pageNumber,\r\n          date: Moment(selectedDate).format(\r\n            \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n          ),\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  function getLocationA(e) {\r\n    setPositionA({\r\n      x: e.nativeEvent.offsetX,\r\n      y: e.nativeEvent.offsetY,\r\n    });\r\n    setLocaA(true);\r\n  }\r\n  function getLocationB(e) {\r\n    setPositionB({\r\n      x: e.nativeEvent.offsetX,\r\n      y: e.nativeEvent.offsetY,\r\n    });\r\n    setLocaB(true);\r\n  }\r\n\r\n  function handleA(e) {\r\n    e.preventDefault();\r\n    setColor({ ...color, signerA: \"#808080ad\" });\r\n    setPositionA({ x: 0, y: 0 });\r\n    setLocaA(!locaA);\r\n  }\r\n\r\n  function handleB(e) {\r\n    e.preventDefault();\r\n    setColor({ ...color, signerB: \"#808080ad\" });\r\n    setPositionB({ x: 0, y: 0 });\r\n    setLocaB(!locaB);\r\n  }\r\n  useEffect(() => {\r\n    addEventListeners();\r\n    return () => removeEventListeners();\r\n  }, []);\r\n\r\n  const addEventListeners = () => {\r\n    document.addEventListener(\"mousemove\", onMouseMove);\r\n  };\r\n\r\n  const removeEventListeners = () => {\r\n    document.removeEventListener(\"mousemove\", onMouseMove);\r\n  };\r\n  const onMouseMove = (e) => {\r\n    setCursor({ x: e.clientX, y: e.clientY });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <VerticalLinearStepper activeStep={activeStep} />\r\n      <main className=\"main-contract\">\r\n        <Snackbar\r\n          style={{ marginTop: 70 }}\r\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n          open={alert.location}\r\n          autoHideDuration={3000}\r\n          TransitionComponent={TransitionLeft}\r\n        >\r\n          <Alert variant=\"filled\" severity=\"error\">\r\n            Please choose location sign to continue...\r\n          </Alert>\r\n        </Snackbar>\r\n        <Container fluid={true}>\r\n          <div\r\n            hidden={locaA}\r\n            className=\"cursor\"\r\n            style={{\r\n              left: `${cursor.x}px`,\r\n              top: `${cursor.y}px`,\r\n            }}\r\n          />\r\n          <div\r\n            hidden={locaB}\r\n            className=\"cursor\"\r\n            style={{\r\n              left: `${cursor.x}px`,\r\n              top: `${cursor.y}px`,\r\n            }}\r\n          />\r\n          <Row>\r\n            <Col>\r\n              <Tooltip title=\"Choose location sign A\" placement=\"top-start\">\r\n                <IconButton\r\n                  style={{\r\n                    float: \"left\",\r\n                    background: color.signerA,\r\n                    marginTop: \"20px\",\r\n                  }}\r\n                  color=\"secondary\"\r\n                  onClick={handleA}\r\n                  hidden={pageNumber === 0 ? true : false}\r\n                >\r\n                  <EditLocationIcon color=\"error\" fontSize=\"large\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <Tooltip title=\"Choose location sign B\" placement=\"top-start\">\r\n                <IconButton\r\n                  style={{\r\n                    float: \"left\",\r\n                    background: color.signerB,\r\n                    marginLeft: \"20px\",\r\n                    marginTop: \"20px\",\r\n                  }}\r\n                  color=\"secondary\"\r\n                  onClick={handleB}\r\n                  hidden={pageNumber === 0 ? true : false}\r\n                >\r\n                  <EditLocationIcon color=\"error\" fontSize=\"large\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <div\r\n                hidden={activeStep === 0 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                  }}\r\n                >\r\n                  DOCUMENT INFORMATION\r\n                </Label>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Document type\"\r\n                  value=\"Contract\"\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <InsertDriveFileIcon fontSize=\"large\" color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n\r\n                <input\r\n                  accept=\"application/pdf\"\r\n                  id=\"icon-button-file\"\r\n                  type=\"file\"\r\n                  style={{ display: \"none\", width: 0 }}\r\n                  onChange={(e) => {\r\n                    if (e.target.files.length !== 0) {\r\n                      if (e.target.files[0].type !== \"application/pdf\") {\r\n                        setAlert({\r\n                          ...alert,\r\n                          file: true,\r\n                          message: \"Please choose file PDF...\",\r\n                        });\r\n                        setTimeout(() => {\r\n                          setAlert({\r\n                            ...alert,\r\n                            file: false,\r\n                            message: \"\",\r\n                          });\r\n                        }, 3000);\r\n                      } else if (e.target.files[0].size > 10485760) {\r\n                        setAlert({\r\n                          ...alert,\r\n                          file: true,\r\n                          message: \"File don't larger 10MB\",\r\n                        });\r\n                        setTimeout(() => {\r\n                          setAlert({\r\n                            ...alert,\r\n                            file: false,\r\n                            message: \"\",\r\n                          });\r\n                        }, 3000);\r\n                      } else {\r\n                        setFile(e.target.files);\r\n                        setFileName(e.target.files[0].name);\r\n                        setShow(true);\r\n                      }\r\n                    }\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Choose file\"\r\n                  error={alert.file}\r\n                  helperText={alert.message}\r\n                  value={fileName}\r\n                  fullWidth\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <label htmlFor=\"icon-button-file\">\r\n                          <IconButton color=\"primary\" component=\"span\">\r\n                            <BackupIcon fontSize=\"large\" />\r\n                          </IconButton>\r\n                        </label>\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                  style={{ marginTop: \"30px\" }}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (file.length === 0) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        file: true,\r\n                        message: \"Please choose file upload !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          file: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                  style={{ marginTop: \"30px\" }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 1 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                  }}\r\n                >\r\n                  TITLE OF CONTRACT\r\n                </Label>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Title Contract\"\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  required\r\n                  error={alert.title}\r\n                  helperText={alert.message}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <TitleIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={handleOnChange}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  hidden={activeStep === 0 ? true : false}\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (dataUpload.title.trim() === \"\") {\r\n                      setAlert({\r\n                        ...alert,\r\n                        title: true,\r\n                        message: \"Please input title of contract !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          title: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else if (dataUpload.title.length > 255) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        title: true,\r\n                        message: \"Title max length 255 characters !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          title: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 2 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                    marginBottom: \"30px\",\r\n                  }}\r\n                >\r\n                  SELECT SIGNER TO SIGN CONTRACT\r\n                </Label>\r\n                <Autocomplete\r\n                  id=\"combo-box-demo\"\r\n                  options={listSinger}\r\n                  getOptionLabel={(option) => option.name}\r\n                  onChange={(event, newValue) => {\r\n                    setDataUpload({ ...dataUpload, signer: newValue });\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label=\"Signer name\"\r\n                      variant=\"outlined\"\r\n                      name=\"signer\"\r\n                      error={alert.signerA}\r\n                      helperText={alert.message}\r\n                    />\r\n                  )}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (dataUpload.signer === null) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        signerA: true,\r\n                        message: \"Please choose one signer contract !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          signerA: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 3 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                    marginBottom: \"30px\",\r\n                  }}\r\n                >\r\n                  SELECT COMPANY GUEST\r\n                </Label>\r\n                <Autocomplete\r\n                  options={listCompany}\r\n                  getOptionLabel={(option) => option.name}\r\n                  onChange={(event, newValue) => {\r\n                    setDataUpload({ ...dataUpload, company_guest: newValue });\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label=\"Company guest\"\r\n                      variant=\"outlined\"\r\n                      name=\"company_guest\"\r\n                      error={alert.company}\r\n                      helperText={alert.message}\r\n                    />\r\n                  )}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (dataUpload.company_guest === \"\") {\r\n                      setAlert({\r\n                        ...alert,\r\n                        company: true,\r\n                        message: \"Please select company guest !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          company: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 4 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                    marginBottom: \"30px\",\r\n                  }}\r\n                >\r\n                  SELECT SIGNER GUEST\r\n                </Label>\r\n                <Autocomplete\r\n                  id=\"combo-box-demo\"\r\n                  options={listGuest}\r\n                  getOptionLabel={(option) => option.name}\r\n                  onChange={(event, newValue) => {\r\n                    setDataUpload({ ...dataUpload, signer_guest: newValue });\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label=\"Signer guest\"\r\n                      variant=\"outlined\"\r\n                      name=\"signer_guest\"\r\n                      error={alert.signerB}\r\n                      helperText={alert.message}\r\n                    />\r\n                  )}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={(e) => {\r\n                    if (dataUpload.signer_guest === null) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        signerB: true,\r\n                        message:\r\n                          \"Please choose one singer guest to sign contract !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          signerB: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 5 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Row>\r\n                  <Label\r\n                    style={{\r\n                      fontSize: \"30px\",\r\n                      fontWeight: \"bold\",\r\n                      color: \"blue\",\r\n                      float: \"left\",\r\n                      marginBottom: \"30px\",\r\n                      marginLeft: \"12px\",\r\n                    }}\r\n                  >\r\n                    VIEWER CAN VIEW CONTRACT\r\n                  </Label>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <Autocomplete\r\n                      multiple\r\n                      id=\"tags-outlined\"\r\n                      options={listSinger}\r\n                      getOptionLabel={(option) => option.name}\r\n                      filterSelectedOptions\r\n                      onChange={(event, newValue) => {\r\n                        setViewer(newValue);\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          variant=\"outlined\"\r\n                          label=\"Select viewer\"\r\n                          placeholder=\"Viewer \"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Col>\r\n                  <Col>\r\n                    <Autocomplete\r\n                      multiple\r\n                      id=\"tags-outlined\"\r\n                      options={listGuest}\r\n                      getOptionLabel={(option) => option.name}\r\n                      filterSelectedOptions\r\n                      onChange={(event, newValue) => {\r\n                        setViewerGuest(newValue);\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          variant=\"outlined\"\r\n                          label=\"Select viewer\"\r\n                          placeholder=\"Viewer guest\"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setActiveStep(activeStep + 1);\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 6 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                  }}\r\n                >\r\n                  DATE EXPIRATION INVOICE\r\n                </Label>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid container justify=\"space-around\">\r\n                    <KeyboardDatePicker\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      id=\"date-picker-dialog\"\r\n                      label=\"Date expiration\"\r\n                      format=\"MM/dd/yyyy\"\r\n                      value={selectedDate}\r\n                      name=\"date\"\r\n                      error={alert.date}\r\n                      helperText={alert.message}\r\n                      onChange={handleDateChange}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  hidden={activeStep === 0 ? true : false}\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={handleContent}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n            <Col>\r\n              <Form className=\"form-doc\">\r\n                <FormGroup row>\r\n                  <div hidden={show} style={{ marginTop: \"4rem\" }}>\r\n                    <img src={demo} alt=\"demo\" width=\"600\" height=\"600\" />\r\n                  </div>\r\n                  <Paper elevation={3}>\r\n                    <Document\r\n                      file={file[0]}\r\n                      onLoadSuccess={onDocumentLoadSuccess}\r\n                      noData={false}\r\n                      onClick={(e) => {\r\n                        if (locaA === false) {\r\n                          getLocationA(e);\r\n                          setColor({ ...color, signerA: \"#3541da\" });\r\n                        } else if (locaB === false) {\r\n                          getLocationB(e);\r\n                          setColor({ ...color, signerB: \"#3541da\" });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Page pageNumber={pageNumber} />\r\n                    </Document>\r\n                  </Paper>\r\n                  <div\r\n                    hidden={pageNumber === 0 ? true : false}\r\n                    style={{ marginLeft: \"30%\" }}\r\n                  >\r\n                    <Typography\r\n                      style={{\r\n                        marginTop: \"5px\",\r\n                      }}\r\n                    >\r\n                      Page: {pageNumber}/{numPages}\r\n                    </Typography>\r\n                    <Pagination\r\n                      variant=\"outlined\"\r\n                      count={numPages}\r\n                      page={pageNumber}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </div>\r\n                </FormGroup>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default CreateDocument;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Notification\\Notification.js",["246","247"],"import { Container, Row, Table } from \"reactstrap\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"../../css/Notification.css\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport notiAPI from \"../../api/notiAPI\";\r\nimport moment from \"moment\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\nimport {\r\n  FormControl,\r\n  FormHelperText,\r\n  MenuItem,\r\n  Select,\r\n} from \"@material-ui/core\";\r\nimport { getUser } from \"../../utils/Common\";\r\n\r\nfunction Notification() {\r\n  const [all, setAll] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage] = useState(10);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n  const [filter, setFilter] = useState([]);\r\n  const [filterByStatus, setFilterByStatus] = useState(\"1\");\r\n  const [filterByType, setFilterByType] = useState(\"1\");\r\n  const handleChange = (event) => {\r\n    setFilterByStatus(event.target.value);\r\n  };\r\n  const handleChange2 = (event) => {\r\n    setFilterByType(event.target.value);\r\n  };\r\n  var listNoti = filter\r\n    .sort((a, b) => {\r\n      return (\r\n        new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\r\n      );\r\n    })\r\n    .reverse();\r\n  const currentPost = listNoti.slice(indexOfFirstPost, indexOfLastPost);\r\n  useEffect(() => {\r\n    async function fetListNoti() {\r\n      try {\r\n        const res = await notiAPI.getById(getUser().Id);\r\n        setFilter(res.data);\r\n        setAll(\r\n          res.data\r\n            .sort((a, b) => {\r\n              return (\r\n                new Date(a.dateCreate).getTime() -\r\n                new Date(b.dateCreate).getTime()\r\n              );\r\n            })\r\n            .reverse()\r\n        );\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1000);\r\n    fetListNoti();\r\n  }, []);\r\n  function changePage(event, newPage) {\r\n    setPage(newPage);\r\n  }\r\n  function filterSeen() {\r\n    setFilter(\r\n      all\r\n        .filter((data) => {\r\n          if (data.status === 1) {\r\n            return data;\r\n          }\r\n        })\r\n        .sort((a, b) => {\r\n          return (\r\n            new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\r\n          );\r\n        })\r\n        .reverse()\r\n    );\r\n  }\r\n  function filterNotSeen() {\r\n    setFilter(\r\n      all\r\n        .filter((data) => {\r\n          if (data.status === 0) {\r\n            return data;\r\n          }\r\n        })\r\n        .sort((a, b) => {\r\n          return (\r\n            new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\r\n          );\r\n        })\r\n        .reverse()\r\n    );\r\n  }\r\n  function filterAll() {\r\n    setFilter(\r\n      all\r\n        .sort((a, b) => {\r\n          return (\r\n            new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\r\n          );\r\n        })\r\n        .reverse()\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <main className=\"main-panel\">\r\n        <Container fluid>\r\n          <Row>\r\n            <p\r\n              style={{\r\n                float: \"left\",\r\n                fontSize: \"18px\",\r\n                marginTop: \"20px\",\r\n                marginLeft: 10,\r\n              }}\r\n            >\r\n              Notification management\r\n            </p>\r\n            <Button\r\n              style={{ position: \"absolute\", right: 0, marginTop: \"20px\" }}\r\n              color=\"primary\"\r\n            >\r\n              Mark all announcements as read\r\n            </Button>\r\n          </Row>\r\n          <Row>\r\n            <FormControl variant=\"outlined\" size=\"small\">\r\n              <Select\r\n                style={{ marginLeft: 10, width: 160 }}\r\n                value={filterByType}\r\n                onChange={handleChange2}\r\n              >\r\n                <MenuItem value=\"1\">All</MenuItem>\r\n                <MenuItem value=\"2\">Contract</MenuItem>\r\n                <MenuItem value=\"3\">Invoice</MenuItem>\r\n              </Select>\r\n              <FormHelperText>-Filter by type-</FormHelperText>\r\n            </FormControl>\r\n            <FormControl variant=\"outlined\" size=\"small\">\r\n              <Select\r\n                style={{ marginLeft: 10, width: 160 }}\r\n                value={filterByStatus}\r\n                onChange={handleChange}\r\n              >\r\n                <MenuItem onClick={filterAll} value=\"1\">\r\n                  All\r\n                </MenuItem>\r\n                <MenuItem onClick={filterSeen} value=\"2\">\r\n                  Seen\r\n                </MenuItem>\r\n                <MenuItem onClick={filterNotSeen} value=\"3\">\r\n                  Not Seen\r\n                </MenuItem>\r\n              </Select>\r\n              <FormHelperText>-Filter by status-</FormHelperText>\r\n            </FormControl>\r\n            <TablePagination\r\n              component=\"div\"\r\n              style={{ position: \"absolute\", right: 0 }}\r\n              count={filter.length}\r\n              page={page}\r\n              rowsPerPage={rowsPerPage}\r\n              onChangePage={changePage}\r\n              labelRowsPerPage=\"\"\r\n              rowsPerPageOptions={[]}\r\n            />\r\n          </Row>\r\n          {loading ? (\r\n            <ScaleLoader color={\"#2512DF\"} loading={loading} size={35} />\r\n          ) : (\r\n            <Table style={{ marginTop: 20 }} hover>\r\n              <tbody>\r\n                {currentPost.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    style={{\r\n                      background: row.status === 0 ? \"#b3aeae75\" : \"white\",\r\n                      padding: 10,\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                  >\r\n                    <td>\r\n                      <Row style={{ fontWeight: \"bold\", marginLeft: 1 }}>\r\n                        {row.content}\r\n                      </Row>\r\n                      <Row style={{ marginLeft: 10 }}>{row.title}</Row>\r\n                      <Row style={{ marginLeft: 10 }}>\r\n                        <Link to=\"/\">View detail</Link>\r\n                      </Row>\r\n                    </td>\r\n                    <td style={{ position: \"absolute\", right: 10 }}>\r\n                      {moment(row.createdDate).format(\"DD/MM/YYYY HH:mm:ss\")}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          )}\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default Notification;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\CreateInvoice.js",["248","249","250","251","252","253","254","255","256","257","258"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\r\nimport StepInvoice from \"../Sidebar/StepInvoice\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"../../css/CreateDoc.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getUser } from \"../../utils/Common\";\r\nimport demo from \"../../images/demo.png\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport EditLocationIcon from \"@material-ui/icons/EditLocation\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport BackupIcon from \"@material-ui/icons/Backup\";\r\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport \"date-fns\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Moment from \"moment\";\r\nimport { InputAdornment, Slide, Tooltip } from \"@material-ui/core\";\r\nimport TitleIcon from \"@material-ui/icons/Title\";\r\nimport { toast } from \"react-toastify\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\ntoast.configure();\r\nfunction TransitionLeft(props) {\r\n  return <Slide {...props} direction=\"right\" />;\r\n}\r\nfunction CreateInvoice() {\r\n  const history = useHistory();\r\n  const [listSinger, setListSigner] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [file, setFile] = useState([]);\r\n  const [color, setColor] = useState(\"#808080ad\");\r\n  const [alert, setAlert] = useState({\r\n    file: false,\r\n    title: false,\r\n    signer: false,\r\n    location: false,\r\n    date: false,\r\n    message: \"\",\r\n  });\r\n  const handleChange = (event, value) => {\r\n    setPageNumber(value);\r\n  };\r\n  const [fileName, setFileName] = useState(\"\");\r\n  const [dataUpload, setDataUpload] = useState({\r\n    title: \"\",\r\n    signer: null,\r\n  });\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n  const [position, setPosition] = useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const [cursor, setCursor] = useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const [viewer, setViewer] = useState([]);\r\n  const [numPages, setNumPages] = useState(\"\");\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n  function onDocumentLoadSuccess({ numPages }) {\r\n    setNumPages(numPages);\r\n    setPageNumber(1);\r\n  }\r\n  function handleOnChange(event) {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    setDataUpload({\r\n      ...dataUpload,\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  function handleContent() {\r\n    const listViewerId = [getUser().Id];\r\n    viewer.map((view) => {\r\n      listViewerId.push(view.id);\r\n    });\r\n\r\n    if (selectedDate === null) {\r\n      setAlert({\r\n        ...alert,\r\n        date: true,\r\n        message: \"Please choose date expiration invoice\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert({\r\n          ...alert,\r\n          date: false,\r\n        });\r\n      }, 3000);\r\n    } else if (\r\n      Moment(selectedDate).format(\"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\") <\r\n      Moment(new Date()).format(\"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\")\r\n    ) {\r\n      setAlert({\r\n        ...alert,\r\n        date: true,\r\n        message: \"Expiration date can't less than current date\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert({\r\n          ...alert,\r\n          date: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (position.x === 0 && position.y === 0) {\r\n      setAlert({\r\n        ...alert,\r\n        location: true,\r\n      });\r\n      setTimeout(() => {\r\n        setAlert({\r\n          ...alert,\r\n          location: false,\r\n        });\r\n      }, 3000);\r\n    } else {\r\n      history.push({\r\n        pathname: \"/invoice-confirm\",\r\n        state: {\r\n          file: file,\r\n          data: dataUpload,\r\n          date: Moment(selectedDate).format(\r\n            \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n          ),\r\n          viewer: viewer,\r\n          listViewerId: listViewerId,\r\n          signLocation: position,\r\n          numberPage: pageNumber,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const companyId = getUser().CompanyId;\r\n    async function fetListUser() {\r\n      try {\r\n        const response = await userListAPI.getUserByCompanyId(companyId);\r\n        setListSigner(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetListUser();\r\n  }, []);\r\n  const [locaA, setLocaA] = useState(true);\r\n  function choseLocation(e) {\r\n    e.preventDefault();\r\n    setColor(\"#808080ad\");\r\n    setPosition({ x: 0, y: 0 });\r\n    setLocaA(!locaA);\r\n  }\r\n  function getLocation(e) {\r\n    setPosition({\r\n      x: e.nativeEvent.offsetX,\r\n      y: e.nativeEvent.offsetY,\r\n    });\r\n    setLocaA(true);\r\n  }\r\n  useEffect(() => {\r\n    addEventListeners();\r\n    return () => removeEventListeners();\r\n  }, []);\r\n\r\n  const addEventListeners = () => {\r\n    document.addEventListener(\"mousemove\", onMouseMove);\r\n  };\r\n\r\n  const removeEventListeners = () => {\r\n    document.removeEventListener(\"mousemove\", onMouseMove);\r\n  };\r\n  const onMouseMove = (e) => {\r\n    setCursor({ x: e.clientX, y: e.clientY });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <StepInvoice activeStep={activeStep} />\r\n      <main className=\"main-invoice\">\r\n        <Snackbar\r\n          style={{ marginTop: 70 }}\r\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n          open={alert.location}\r\n          autoHideDuration={3000}\r\n          TransitionComponent={TransitionLeft}\r\n        >\r\n          <Alert variant=\"filled\" severity=\"error\">\r\n            Please choose location sign to continue\r\n          </Alert>\r\n        </Snackbar>\r\n\r\n        <Container fluid={true}>\r\n          <div\r\n            hidden={locaA}\r\n            className=\"cursor\"\r\n            style={{\r\n              left: `${cursor.x}px`,\r\n              top: `${cursor.y}px`,\r\n            }}\r\n          />\r\n          <Row>\r\n            <Col className=\"form-upload\">\r\n              <Tooltip title=\"Select location sign\" placement=\"right\">\r\n                <IconButton\r\n                  style={{ float: \"left\", background: color }}\r\n                  color=\"secondary\"\r\n                  onClick={choseLocation}\r\n                  hidden={pageNumber === 0 ? true : false}\r\n                >\r\n                  <EditLocationIcon color=\"error\" fontSize=\"large\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <div\r\n                hidden={activeStep === 0 ? false : true}\r\n                style={{ marginTop: \"10%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                  }}\r\n                >\r\n                  DOCUMENT INFORMATION\r\n                </Label>\r\n\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Document type\"\r\n                  value=\"Invoice\"\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <InsertDriveFileIcon fontSize=\"large\" color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n\r\n                <input\r\n                  accept=\".pdf\"\r\n                  id=\"icon-button-file\"\r\n                  type=\"file\"\r\n                  style={{ display: \"none\", width: 0 }}\r\n                  onChange={(e) => {\r\n                    if (e.target.files.length !== 0) {\r\n                      if (e.target.files[0].type !== \"application/pdf\") {\r\n                        setAlert({\r\n                          ...alert,\r\n                          file: true,\r\n                          message: \"Please choose file PDF\",\r\n                        });\r\n                        setTimeout(() => {\r\n                          setAlert({\r\n                            ...alert,\r\n                            file: false,\r\n                            message: \"\",\r\n                          });\r\n                        }, 3000);\r\n                      } else if (e.target.files[0].size > 10485760) {\r\n                        setAlert({\r\n                          ...alert,\r\n                          file: true,\r\n                          message: \"File don't larger 10MB\",\r\n                        });\r\n                        setTimeout(() => {\r\n                          setAlert({\r\n                            ...alert,\r\n                            file: false,\r\n                            message: \"\",\r\n                          });\r\n                        }, 3000);\r\n                      } else {\r\n                        setFile(e.target.files);\r\n                        setFileName(e.target.files[0].name);\r\n                        setShow(true);\r\n                      }\r\n                    }\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Choose file\"\r\n                  error={alert.file}\r\n                  helperText={alert.message}\r\n                  value={fileName}\r\n                  fullWidth\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <label htmlFor=\"icon-button-file\">\r\n                          <IconButton color=\"primary\" component=\"span\">\r\n                            <BackupIcon fontSize=\"large\" />\r\n                          </IconButton>\r\n                        </label>\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                  style={{ marginTop: \"30px\" }}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (file.length === 0) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        file: true,\r\n                        message: \"Please choose file upload !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          file: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                  style={{ marginTop: \"30px\" }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 1 ? false : true}\r\n                style={{ marginTop: \"10%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                  }}\r\n                >\r\n                  TITLE OF INVOICE\r\n                </Label>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Title invoice\"\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  required\r\n                  error={alert.title}\r\n                  helperText={alert.message}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <TitleIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={handleOnChange}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  hidden={activeStep === 0 ? true : false}\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (dataUpload.title.trim() === \"\") {\r\n                      setAlert({\r\n                        ...alert,\r\n                        title: true,\r\n                        message: \"Please input title invoice\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          title: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else if (dataUpload.title.length > 255) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        title: true,\r\n                        message: \"Title max length 255 characters !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          title: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 2 ? false : true}\r\n                style={{ marginTop: \"10%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                    marginBottom: \"30px\",\r\n                  }}\r\n                >\r\n                  SELECT SIGNER TO SIGN INVOICE\r\n                </Label>\r\n                <Autocomplete\r\n                  id=\"combo-box-demo\"\r\n                  options={listSinger}\r\n                  getOptionLabel={(option) => option.name}\r\n                  onChange={(event, newValue) => {\r\n                    setDataUpload({ ...dataUpload, signer: newValue });\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label=\"Signer name\"\r\n                      variant=\"outlined\"\r\n                      name=\"signer\"\r\n                      error={alert.signer}\r\n                      helperText={alert.message}\r\n                    />\r\n                  )}\r\n                />\r\n\r\n                <Button\r\n                  variant=\"contained\"\r\n                  hidden={activeStep === 0 ? true : false}\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (dataUpload.signer === null) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        signer: true,\r\n                        message: \"Please select a signer to sign invoice\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          signer: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 3 ? false : true}\r\n                style={{ marginTop: \"10%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                    marginBottom: \"30px\",\r\n                  }}\r\n                >\r\n                  VIEWER CAN VIEW INVOICE\r\n                </Label>\r\n                <Autocomplete\r\n                  multiple\r\n                  id=\"tags-outlined\"\r\n                  options={listSinger}\r\n                  getOptionLabel={(option) => option.name}\r\n                  filterSelectedOptions\r\n                  onChange={(event, newValue) => {\r\n                    setViewer(newValue);\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      variant=\"outlined\"\r\n                      label=\"Select viewer\"\r\n                      placeholder=\"Viewer\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  hidden={activeStep === 0 ? true : false}\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setActiveStep(activeStep + 1);\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 4 ? false : true}\r\n                style={{ marginTop: \"10%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                  }}\r\n                >\r\n                  DATE EXPIRATION INVOICE\r\n                </Label>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid container justify=\"space-around\">\r\n                    <KeyboardDatePicker\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      id=\"date-picker-dialog\"\r\n                      label=\"Date expiration\"\r\n                      format=\"MM/dd/yyyy\"\r\n                      value={selectedDate}\r\n                      name=\"date\"\r\n                      error={alert.date}\r\n                      helperText={alert.message}\r\n                      onChange={handleDateChange}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  hidden={activeStep === 0 ? true : false}\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={handleContent}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n            <Col>\r\n              <Form className=\"form-doc\">\r\n                <FormGroup row>\r\n                  <div hidden={show} style={{ marginTop: \"4rem\" }}>\r\n                    <img src={demo} alt=\"demo\" width=\"600\" height=\"600\" />\r\n                  </div>\r\n\r\n                  <Paper elevation={3}>\r\n                    <Document\r\n                      file={file[0]}\r\n                      onLoadSuccess={onDocumentLoadSuccess}\r\n                      onClick={(e) => {\r\n                        if (locaA === false) {\r\n                          getLocation(e);\r\n                          setColor(\"#3541da\");\r\n                        }\r\n                      }}\r\n                      noData={false}\r\n                    >\r\n                      <Page pageNumber={pageNumber} />\r\n                    </Document>\r\n                  </Paper>\r\n                  <div\r\n                    hidden={pageNumber === 0 ? true : false}\r\n                    style={{ marginLeft: \"30%\" }}\r\n                  >\r\n                    <Typography\r\n                      style={{\r\n                        marginTop: \"5px\",\r\n                      }}\r\n                    >\r\n                      Page: {pageNumber}/{numPages}\r\n                    </Typography>\r\n                    <Pagination\r\n                      variant=\"outlined\"\r\n                      count={numPages}\r\n                      page={pageNumber}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </div>\r\n                </FormGroup>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default CreateInvoice;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Document\\Document.js",["259","260","261","262","263","264","265","266","267"],"import {\r\n  Container,\r\n  Row,\r\n  FormGroup,\r\n  Col,\r\n  Table,\r\n  Label,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalFooter,\r\n} from \"reactstrap\";\r\n\r\nimport \"../../css/Document.css\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport { forwardRef, useEffect, useState } from \"react\";\r\nimport notsigned from \"../../images/status.png\";\r\nimport done from \"../../images/true.png\";\r\nimport invoicecompleted from \"../../images/invoicecompleted.png\";\r\nimport choo from \"../../images/choo.png\";\r\nimport invoiceAPI from \"../../api/invoiceAPI\";\r\nimport GetCreater from \"../GetData/GetCreater\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport contractAPI from \"../../api/contractAPI\";\r\nimport { getUser } from \"../../utils/Common\";\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Moment from \"moment\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport { InputAdornment } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport InvoiceStepper from \"../Stepper/InvoiceStepper\";\r\nimport ContractStepper from \"../Stepper/ContractStepper\";\r\n\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"down\" ref={ref} {...props} />;\r\n});\r\nfunction Document() {\r\n  const history = useHistory();\r\n  let [loading, setLoading] = useState(true);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [dele, setDel] = useState(false);\r\n  const toogle = () => setIsOpen(!isOpen);\r\n  const [filter, setFilter] = useState('1');\r\n  const [postList, setPostList] = useState([]);\r\n  const [listAllDocument, setListAllDocument] = useState([]);\r\n  const [listInvoice, setListInvoice] = useState([]);\r\n  const [listContract, setListContract] = useState([]);\r\n  const [find, setFind] = useState(\"\");\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage] = useState(10);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n\r\n  var post = postList\r\n    .sort((a, b) => {\r\n      return (\r\n        new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\r\n      );\r\n    })\r\n    .reverse();\r\n  const currentPosts = post.slice(indexOfFirstPost, indexOfLastPost);\r\n  function changePage(event, newPage) {\r\n    setPage(newPage);\r\n  }\r\n  const [value, setValue] = useState(0);\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function getListDocument() {\r\n      try {\r\n        if (getUser().Role === \"1\") {\r\n          await contractAPI\r\n            .getContractByCompanyId(getUser().CompanyId)\r\n            .then(function (contract) {\r\n              invoiceAPI\r\n                .getInvoiceByCompanyId(getUser().CompanyId)\r\n                .then(function (invoice) {\r\n                  const list = [...contract.data, ...invoice.data];\r\n                  setListAllDocument(list);\r\n                  setPostList(list);\r\n                  setListInvoice(invoice.data);\r\n                  setListContract(contract.data);\r\n                  setTimeout(() => {\r\n                    setLoading(false);\r\n                  }, 2000);\r\n                })\r\n                .catch(function (error) {\r\n                  console.log(error);\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n            });\r\n        } else {\r\n          await invoiceAPI\r\n            .getInvoiceByViewerId(getUser().Id)\r\n            .then(function (res1) {\r\n              invoiceAPI\r\n                .getInvoiceBySignerId(getUser().Id)\r\n                .then(function (res2) {\r\n                  contractAPI\r\n                    .getContractByViewerId(getUser().Id)\r\n                    .then(function (res3) {\r\n                      contractAPI\r\n                        .getContractBySignerId(getUser().Id)\r\n                        .then(function (res4) {\r\n                          const list = [\r\n                            ...res1.data,\r\n                            ...res2.data,\r\n                            ...res3.data,\r\n                            ...res4.data,\r\n                          ];\r\n                          const listInvoice1 = [...res1.data, ...res2.data];\r\n                          const listContract1 = [...res3.data, ...res4.data];\r\n                          setListAllDocument(list);\r\n                          setPostList(list);\r\n                          setListInvoice(listInvoice1);\r\n                          setListContract(listContract1);\r\n                          setTimeout(() => {\r\n                            setLoading(false);\r\n                          }, 2000);\r\n                        })\r\n                        .catch(function (error) {\r\n                          console.log(error);\r\n                        });\r\n                    })\r\n                    .catch(function (error) {\r\n                      console.log(error);\r\n                    });\r\n                })\r\n                .catch(function (error) {\r\n                  console.log(error);\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n            });\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getListDocument();\r\n  }, []);\r\n\r\n  function AddContract() {\r\n    history.push(\"/contract\");\r\n  }\r\n  function AddInvoice() {\r\n    history.push(\"/invoice\");\r\n  }\r\n\r\n  function All() {\r\n    setPage(0);\r\n    setPostList(listAllDocument);\r\n    setValue(0);\r\n  }\r\n  function Invoice() {\r\n    setPage(0);\r\n    setPostList(\r\n      listAllDocument.filter((data) => {\r\n        if (data.invoiceURL) {\r\n          return data;\r\n        }\r\n      })\r\n    );\r\n    setValue(0);\r\n  }\r\n  function Contract() {\r\n    setPage(0);\r\n    setPostList(\r\n      listAllDocument.filter((data) => {\r\n        if (data.contractUrl) {\r\n          return data;\r\n        }\r\n      })\r\n    );\r\n\r\n    setValue(0);\r\n  }\r\n  function Signed() {\r\n    setPage(0);\r\n    if (filter === \"1\") {\r\n      setPostList(\r\n        listAllDocument.filter((data) => {\r\n          if (data.status === 2) {\r\n            return data;\r\n          }\r\n        })\r\n      );\r\n    } else if (filter === \"2\") {\r\n      setPostList(\r\n        listContract.filter((data) => {\r\n          if (data.status === 2) {\r\n            return data;\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      setPostList(\r\n        listInvoice.filter((data) => {\r\n          if (data.status === 2) {\r\n            return data;\r\n          }\r\n        })\r\n      );\r\n    }\r\n  }\r\n  function NotSigned() {\r\n    setPage(0);\r\n    if (filter === \"1\") {\r\n      setPostList(\r\n        listAllDocument.filter((data) => {\r\n          if (data.status < 2) {\r\n            return data;\r\n          }\r\n        })\r\n      );\r\n    } else if (filter === \"2\") {\r\n      setPostList(\r\n        listContract.filter((data) => {\r\n          if (data.status < 2) {\r\n            return data;\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      setPostList(\r\n        listInvoice.filter((data) => {\r\n          if (data.status < 2) {\r\n            return data;\r\n          }\r\n        })\r\n      );\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <main className=\"main-panel\">\r\n        <Dialog open={isOpen} onClose={toogle} TransitionComponent={Transition}>\r\n          <DialogContent>\r\n            <img\r\n              style={{ marginLeft: \"20%\" }}\r\n              src={choo}\r\n              alt=\"\"\r\n              width=\"280px\"\r\n              height=\"280px\"\r\n            />\r\n          </DialogContent>\r\n          <DialogTitle>\r\n            Please select the type of document you want create?\r\n          </DialogTitle>\r\n          <DialogActions style={{ paddingBottom: \"30px\" }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ marginRight: \"15%\" }}\r\n              onClick={AddContract}\r\n            >\r\n              Contract\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ marginRight: \"20%\", width: \"104px\" }}\r\n              onClick={AddInvoice}\r\n            >\r\n              Invoice\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Container fluid={true}>\r\n          <div className=\"form-create\">\r\n            <FormGroup row>\r\n              <Button\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                onClick={toogle}\r\n              >\r\n                +Create\r\n              </Button>\r\n              <Col>\r\n                <Row>\r\n                  <TextField\r\n                    name=\"search\"\r\n                    type=\"text\"\r\n                    variant=\"outlined\"\r\n                    value={find}\r\n                    placeholder=\"Search by name document\"\r\n                    onChange={(event) => {\r\n                      setFind(event.target.value);\r\n                    }}\r\n                    size=\"small\"\r\n                    fullWidth\r\n                    style={{ marginLeft: 20 }}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <SearchIcon color=\"primary\" />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Row>\r\n              </Col>\r\n\r\n              <FormControl\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                style={{ marginLeft: 20 }}\r\n              >\r\n                <Select\r\n                  defaultValue={1}\r\n                  onChange={(e) => setFilter(e.target.value)}\r\n                >\r\n                  <MenuItem onClick={All} value=\"1\">\r\n                    All\r\n                  </MenuItem>\r\n                  <MenuItem onClick={Contract} value=\"2\">\r\n                    Contract\r\n                  </MenuItem>\r\n                  <MenuItem onClick={Invoice} value=\"3\">\r\n                    Invoice\r\n                  </MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <Col>\r\n                <Row>\r\n                  <Paper\r\n                    square\r\n                    elevation={0}\r\n                    style={{ position: \"absolute\", right: 0, height: 40 }}\r\n                  >\r\n                    <Tabs\r\n                      value={value}\r\n                      indicatorColor=\"primary\"\r\n                      textColor=\"primary\"\r\n                      onChange={handleChange}\r\n                    >\r\n                      <Tab\r\n                        style={{ fontWeight: \"bold\" }}\r\n                        value={3}\r\n                        onClick={Signed}\r\n                        label=\"Signed\"\r\n                      />\r\n                      <Tab\r\n                        style={{ fontWeight: \"bold\" }}\r\n                        value={2}\r\n                        onClick={NotSigned}\r\n                        label=\"Not signed\"\r\n                      />\r\n                    </Tabs>\r\n                  </Paper>\r\n                </Row>\r\n              </Col>\r\n            </FormGroup>\r\n            <TablePagination\r\n              hidden={find !== \"\" ? true : false}\r\n              component=\"div\"\r\n              count={postList.length}\r\n              page={page}\r\n              onChangePage={changePage}\r\n              rowsPerPage={rowsPerPage}\r\n              labelRowsPerPage=\"\"\r\n              rowsPerPageOptions={[]}\r\n            />\r\n          </div>\r\n          {loading ? (\r\n            <ScaleLoader color={\"#2512DF\"} loading={loading} size={40} />\r\n          ) : (\r\n            <Table hidden={find !== \"\" ? true : false} hover>\r\n              <tbody>\r\n                {currentPosts.map((doc, key) => (\r\n                  <tr key={key}>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (doc.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        } else if (doc.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}>Creator name</Label>\r\n                      <br />\r\n                      <Label className=\"demo-2\">\r\n                        <GetCreater id={doc.creatorId} />\r\n                      </Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (doc.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        } else if (doc.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}>\r\n                        Title document\r\n                      </Label>\r\n                      <br />\r\n                      <Label className=\"demo demo-2\">{doc.title}</Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (doc.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        } else if (doc.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}>Status</Label>\r\n                      <br />\r\n                      <Label className=\"step\">\r\n                        {doc.contractUrl ? (\r\n                          <ContractStepper value={doc.status} />\r\n                        ) : (\r\n                          <div>\r\n                            <InvoiceStepper value={doc.status === 2 ? 1 : doc.status} />\r\n                          </div>\r\n                        )}\r\n                      </Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (doc.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        } else if (doc.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label></Label>\r\n                      <br />\r\n                      <Label>\r\n                        {doc.invoiceURL ? (\r\n                          <img\r\n                            hidden={doc.status === 2 ? false : true}\r\n                            src={invoicecompleted}\r\n                            alt=\"\"\r\n                          />\r\n                        ) : (\r\n                          <img\r\n                            hidden={doc.status === 2 ? false : true}\r\n                            src={done}\r\n                            alt=\"\"\r\n                          />\r\n                        )}\r\n                        <img\r\n                          hidden={doc.status < 2 ? false : true}\r\n                          src={notsigned}\r\n                          alt=\"\"\r\n                        />\r\n                      </Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (doc.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        } else if (doc.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}></Label>\r\n                      <br />\r\n                      <Label>\r\n                        {Moment(doc.dateCreate).format(\"DD/MM/YYYY HH:mm:ss\")}\r\n                      </Label>\r\n                    </td>\r\n                    <td>\r\n                      <Label></Label>\r\n                      <br />\r\n                      <Label hidden={doc.status < 2 ? false : true}>\r\n                        <DeleteIcon\r\n                          onClick={() => setDel(true)}\r\n                          fontSize=\"default\"\r\n                          style={{ cursor: \"pointer\" }}\r\n                        />\r\n                      </Label>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          )}\r\n          <Table hover hidden={find === \"\" ? true : false}>\r\n            <tbody>\r\n              {postList\r\n                .filter((data) => {\r\n                  if (data.title.toLowerCase().includes(find.toLowerCase())) {\r\n                    return data;\r\n                  }\r\n                })\r\n                .map((data, key) => (\r\n                  <tr key={key}>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (data.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        } else if (data.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}>Creator name</Label>\r\n                      <br />\r\n                      <Label className=\"demo-2\">\r\n                        <GetCreater id={data.creatorId} />\r\n                      </Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (data.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        } else if (data.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}>\r\n                        Title document\r\n                      </Label>\r\n                      <br />\r\n                      <Label className=\"demo demo-2\">{data.title}</Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (data.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        } else if (data.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}>Status</Label>\r\n                      <br />\r\n                      <Label className=\"step\">\r\n                        {data.contractUrl ? (\r\n                          <ContractStepper value={data.status} />\r\n                        ) : (\r\n                          <div>\r\n                            <InvoiceStepper value={data.status === 2 ? 1 : data.status} />\r\n                          </div>\r\n                        )}\r\n                      </Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (data.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        } else if (data.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label></Label>\r\n                      <br />\r\n                      <Label>\r\n                        {data.invoiceURL ? (\r\n                          <img\r\n                            hidden={data.status === 2 ? false : true}\r\n                            src={invoicecompleted}\r\n                            alt=\"\"\r\n                          />\r\n                        ) : (\r\n                          <img\r\n                            hidden={data.status === 2 ? false : true}\r\n                            src={done}\r\n                            alt=\"\"\r\n                          />\r\n                        )}\r\n                        <img\r\n                          hidden={data.status < 2 ? false : true}\r\n                          src={notsigned}\r\n                          alt=\"\"\r\n                        />\r\n                      </Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (data.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        } else if (data.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}></Label>\r\n                      <br />\r\n                      <Label>\r\n                        {Moment(data.dateCreate).format(\"DD/MM/YYYY\")}\r\n                      </Label>\r\n                    </td>\r\n                    <td>\r\n                      <Label></Label>\r\n                      <br />\r\n                      <Label hidden={data.status < 2 ? false : true}>\r\n                        <DeleteIcon\r\n                          onClick={() => setDel(true)}\r\n                          fontSize=\"default\"\r\n                          style={{ cursor: \"pointer\" }}\r\n                        />\r\n                      </Label>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </Table>\r\n          <Modal isOpen={dele}>\r\n            <ModalHeader>Are you sure delete document?</ModalHeader>\r\n            <ModalFooter>\r\n              <Button\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                style={{ marginRight: \"5px\" }}\r\n                onClick={() => setDel(!dele)}\r\n              >\r\n                No\r\n              </Button>\r\n              <Button color=\"primary\" variant=\"contained\">\r\n                Yes\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default Document;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\DetailDocument\\ContractDetail.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\DetailDocument\\InvoiceDetail.js",["268"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\r\nimport StepDetail from \"../Sidebar/StepDetail\";\r\nimport PDF from \"../PDF/PDF\";\r\nimport notsigned from \"../../images/status.png\";\r\nimport done from \"../../images/invoicecompleted.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport invoiceAPI from \"../../api/invoiceAPI\";\r\nimport GetCreater from \"../GetData/GetCreater\";\r\nimport fileDownload from \"js-file-download\";\r\nimport axios from \"axios\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { InputAdornment, TablePagination } from \"@material-ui/core\";\r\nimport TitleIcon from \"@material-ui/icons/Title\";\r\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport \"date-fns\";\r\nimport Moment from \"moment\";\r\nimport EventAvailableIcon from \"@material-ui/icons/EventAvailable\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport GetEmail from \"../GetData/GetEmail\";\r\nimport GetPhone from \"../GetData/GetPhone\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport printJS from \"print-js\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.common.black,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction InvoiceDetail() {\r\n  const [activeStep, setActiveStep] = useState(1);\r\n  const [document, setDocument] = useState([]);\r\n  const [signer, setSigner] = useState([]);\r\n  const [viewer, setViewer] = useState([]);\r\n  const [signerId, setSignerId] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage] = useState(2);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n  const currentPosts = viewer.slice(indexOfFirstPost, indexOfLastPost);\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  const param = useParams();\r\n  useEffect(() => {\r\n    async function getInvoiceById() {\r\n      try {\r\n        const res = await invoiceAPI.getInvoiceById(param.id);\r\n        setDocument(res.data);\r\n        setViewer(res.data.viewers);\r\n        setActiveStep(res.data.status + 1);\r\n        setSignerId(res.data.signerId);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getInvoiceById();\r\n  }, []);\r\n  useEffect(() => {\r\n    async function getSigner() {\r\n      try {\r\n        const res = await userListAPI.getUserById(signerId);\r\n        setSigner(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getSigner();\r\n  }, [signerId]);\r\n\r\n  function printFile() {\r\n    printJS({\r\n      printable: document.invoiceURL,\r\n      type: \"pdf\",\r\n    });\r\n  }\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <StepDetail activeStep={activeStep} />\r\n      <main className=\"main-invoice\">\r\n        <Container fluid={true}>\r\n          <Row>\r\n            <Col>\r\n              <Paper style={{ marginTop: \"20px\" }} elevation={3}>\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                  }}\r\n                >\r\n                  Invoice Content\r\n                </Label>\r\n                <br />\r\n                <Label style={{ marginTop: \"10px\" }}>\r\n                  <img\r\n                    hidden={document.status === 3 ? false : true}\r\n                    src={done}\r\n                    alt=\"\"\r\n                  />\r\n                  <img\r\n                    hidden={document.status !== 3 ? false : true}\r\n                    src={notsigned}\r\n                    alt=\"\"\r\n                  />\r\n                </Label>\r\n\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={document.title}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <TitleIcon color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  value={signer.name}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <BorderColorIcon color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n\r\n                <TableContainer style={{ marginTop: \"20px\", padding: \"10px\" }}>\r\n                  <Table aria-label=\"customized table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <StyledTableCell>Viewer name</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">Email</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">\r\n                          Phone number\r\n                        </StyledTableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {currentPosts.map((row) => (\r\n                        <StyledTableRow key={row.viewerId}>\r\n                          <StyledTableCell component=\"th\" scope=\"row\">\r\n                            <GetCreater id={row.viewerId} />\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            <GetEmail id={row.viewerId} />\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            <GetPhone id={row.viewerId} />\r\n                          </StyledTableCell>\r\n                        </StyledTableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                  component=\"div\"\r\n                  count={viewer.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  labelRowsPerPage=\"\"\r\n                  onChangePage={handleChangePage}\r\n                  rowsPerPageOptions={[]}\r\n                />\r\n                <TextField\r\n                  label=\"Date expiration\"\r\n                  value={Moment(document.dateSign).format(\r\n                    \"DD/MM/YYYY HH:mm:ss\"\r\n                  )}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <EventAvailableIcon color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </Paper>\r\n              <Button\r\n                hidden={activeStep >= 3 ? false : true}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                style={{ marginTop: \"20px\", marginRight: \"10px\" }}\r\n                startIcon={<SaveIcon />}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  axios\r\n                    .get(document.invoiceURL, {\r\n                      responseType: \"blob\",\r\n                    })\r\n                    .then(function (res) {\r\n                      fileDownload(res.data, document.title + \".pdf\");\r\n                    })\r\n                    .catch(function (error) {\r\n                      console.log(error);\r\n                    });\r\n                }}\r\n              >\r\n                Save\r\n              </Button>\r\n              <Button\r\n                hidden={activeStep >= 3 ? false : true}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                style={{ marginTop: \"20px\" }}\r\n                startIcon={<PrintIcon />}\r\n                onClick={printFile}\r\n              >\r\n                Print\r\n              </Button>\r\n            </Col>\r\n\r\n            <Col>\r\n              <Form className=\"form-doc\">\r\n                <FormGroup row>\r\n                  <div>\r\n                    <PDF pdf={document.invoiceURL} />\r\n                  </div>\r\n                </FormGroup>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default InvoiceDetail;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminCompany\\DepartmentManagement\\DepartmentManagement.js",["269","270","271","272","273","274","275","276","277","278","279","280"],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminCompany\\UserManagement\\UserManagement.js",["281","282","283","284","285","286","287","288","289"],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CompanyRegister\\CompanyRegister.js",["290","291","292","293","294","295","296","297","298","299","300","301","302","303","304"],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Profile\\Profile.js",["305"],"import {\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Container,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport companyListAPI from \"../../api/companyListAPI\";\r\nimport \"../../css/Profile.css\";\r\nimport { getUser, removeUserSession } from \"../../utils/Common\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport departmentAPI from \"../../api/departmentAPI\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport BusinessIcon from \"@material-ui/icons/Business\";\r\nimport {\r\n  Card,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport md5 from \"md5\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport * as Icon from \"react-icons/ai\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nfunction Profile() {\r\n  const history = useHistory();\r\n  const [changePassword, setChangePassword] = useState(false);\r\n  const [avatar, setAvatar] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [childDepartment, setChildDepartment] = useState(\"\");\r\n  const [oldPass, setOldPass] = useState(\"\");\r\n  const [password, setPassword] = useState({\r\n    current_pass: \"\",\r\n    new_pass: \"\",\r\n    confirm_pass: \"\",\r\n  });\r\n  const [user1, setUser] = useState([]);\r\n  const [error, setError] = useState({\r\n    old: false,\r\n    message_old: \"\",\r\n    new: false,\r\n    message_new: \"\",\r\n    confirm_new: false,\r\n    message_confirm: \"\",\r\n  });\r\n  const [userProfile, setUserProfile] = useState({\r\n    username: \"\",\r\n    address: \"\",\r\n  });\r\n  const [newAvater, setNewAvatar] = useState(false);\r\n  const [error1, setError1] = useState(true);\r\n  const [error2, setError2] = useState(true);\r\n  const [error3, setError3] = useState({\r\n    1: true,\r\n    2: true,\r\n    3: true,\r\n  });\r\n  function handleOnChange(e) {\r\n    const target = e.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    setPassword({\r\n      ...password,\r\n      [name]: value,\r\n    });\r\n  }\r\n  const [open, setOpen] = useState(false);\r\n  useEffect(() => {\r\n    async function fetPassword() {\r\n      try {\r\n        const response = await userListAPI.getUserById(getUser().Id);\r\n        setOldPass(response.data.password);\r\n        setUser(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetPassword();\r\n  }, []);\r\n  function handleChangePassword(e) {\r\n    e.preventDefault();\r\n    const md5CurrentPass = md5(password.current_pass);\r\n    var pattern = new RegExp(\r\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$/\r\n    );\r\n    if (password.current_pass.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        old: true,\r\n        message_old: \"Please enter current password\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          old: false,\r\n          message_old: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (password.new_pass.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        new: true,\r\n        message_new: \"Please enter new password\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          new: false,\r\n          message_new: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (password.confirm_pass.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        confirm_new: true,\r\n        message_confirm: \"Please enter confirm new password\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          confirm_new: false,\r\n          message_confirm: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (!pattern.test(password.new_pass.trim())) {\r\n      setError({\r\n        ...error,\r\n        new: true,\r\n        message_new: \"Password must be at least 6 characters, 1 upper case\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          confirm_new: false,\r\n          message_confirm: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (password.new_pass.trim() !== password.confirm_pass.trim()) {\r\n      setError({\r\n        ...error,\r\n        confirm_new: true,\r\n        message_confirm: \"Password confirm is not match\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          confirm_new: false,\r\n          message_confirm: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (md5CurrentPass !== oldPass) {\r\n      setError({\r\n        ...error,\r\n        old: true,\r\n        message_old: \"Current password is incorrect\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          old: false,\r\n          message_old: \"\",\r\n        });\r\n      }, 3000);\r\n    } else {\r\n      const md5Newpass = md5(password.new_pass);\r\n      const params = {\r\n        id: getUser().Id,\r\n        oldPassword: md5CurrentPass,\r\n        newPassword: md5Newpass,\r\n      };\r\n      userListAPI\r\n        .changePassword(params)\r\n        .then(function () {\r\n          toast.success(\"Change password successfully\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          setChangePassword(false);\r\n          setTimeout(() => {\r\n            removeUserSession();\r\n            history.push(\"/\");\r\n          }, 6000);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    async function fetCompany() {\r\n      try {\r\n        const response = await companyListAPI.getCompanyById(\r\n          getUser().CompanyId\r\n        );\r\n        setCompany(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetCompany();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function fetDepartment() {\r\n      try {\r\n        const response = await departmentAPI.getDepartmentById(\r\n          getUser().DepartmentId\r\n        );\r\n        setDepartment(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetDepartment();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function fetSubDepartment() {\r\n      try {\r\n        const response = await departmentAPI.getSubDepartmentById(\r\n          getUser().SubDepartmentId\r\n        );\r\n        setChildDepartment(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetSubDepartment();\r\n  }, []);\r\n\r\n  function handleNewAvatar(e) {\r\n    e.preventDefault();\r\n    const url = avatar.substring(23);\r\n    const params = {\r\n      id: getUser().Id,\r\n      avatar: url,\r\n      password: oldPass,\r\n      phone: getUser().Phone,\r\n      address: getUser().Address,\r\n      subDepartmentId: getUser().SubDepartmentId,\r\n      departmentId: getUser().DepartmentId,\r\n    };\r\n    userListAPI\r\n      .changeAvatar(params)\r\n      .then(function () {\r\n        window.location.reload();\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n  const [a, setA] = useState(\"\");\r\n  const getBase64FromUrl = async (url) => {\r\n    const data = await fetch(url);\r\n    const blob = await data.blob();\r\n    return new Promise((resolve) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(blob);\r\n      reader.onloadend = function () {\r\n        const base64data = reader.result;\r\n        resolve(base64data);\r\n        setA(base64data);\r\n      };\r\n    });\r\n  };\r\n  getBase64FromUrl(user1.avatar);\r\n  function handleEdit(e) {\r\n    e.preventDefault();\r\n    if (userProfile.address.trim().length > 255) {\r\n      setError3({\r\n        ...error3,\r\n        3: false,\r\n      });\r\n      setTimeout(() => {\r\n        setError3({\r\n          ...error3,\r\n          3: true,\r\n        });\r\n      });\r\n    } else {\r\n      const params = {\r\n        id: getUser().Id,\r\n        password: oldPass,\r\n        avatar: a.substring(37),\r\n        phone: getUser().Phone,\r\n        address: userProfile.address,\r\n        subDepartmentId: getUser().SubDepartmentId,\r\n        departmentId: getUser().DepartmentId,\r\n      };\r\n      userListAPI\r\n        .updateUser(params)\r\n        .then(function () {\r\n          window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <main className=\"main-panel\" style={{ backgroundColor: \"#e8e7e7\" }}>\r\n        <div className=\"avatar-col\">\r\n          <Label\r\n            style={{\r\n              float: \"left\",\r\n              fontWeight: \"bolder\",\r\n              color: \"white\",\r\n              marginTop: 20,\r\n              marginLeft: 20,\r\n              border: \"1px solid #ffff\",\r\n              borderRadius: \"25px\",\r\n              padding: 10,\r\n            }}\r\n          >\r\n            USER PROFILE\r\n          </Label>\r\n        </div>\r\n        <Container fluid={true}>\r\n          <Col style={{ top: \"-200px\" }}>\r\n            <div>\r\n              <img\r\n                src={user1.avatar}\r\n                alt=\"avatar\"\r\n                style={{ borderRadius: \"50%\" }}\r\n                width=\"300px\"\r\n                height=\"300px\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <input\r\n                accept=\"image/*\"\r\n                id=\"icon-button-file\"\r\n                type=\"file\"\r\n                hidden={true}\r\n                onChange={(e) => {\r\n                  if (e.target.files.length !== 0) {\r\n                    if (\r\n                      e.target.files[0].type !== \"image/jpeg\" &&\r\n                      e.target.files[0].type !== \"image/png\" &&\r\n                      e.target.files[0].type !== \"image/jpg\"\r\n                    ) {\r\n                      setError1(false);\r\n                      setTimeout(() => {\r\n                        setError1(true);\r\n                      }, 3000);\r\n                    } else if (e.target.files[0].size > 31457280) {\r\n                      setError2(false);\r\n                      setTimeout(() => {\r\n                        setError2(true);\r\n                      }, 3000);\r\n                    } else {\r\n                      var file = e.target.files[0];\r\n                      var reader = new FileReader();\r\n                      reader.readAsDataURL(file);\r\n                      reader.onloadend = function () {\r\n                        setAvatar(reader.result);\r\n                      }.bind(this);\r\n                      setNewAvatar(true);\r\n                    }\r\n                  }\r\n                }}\r\n              />\r\n              <label htmlFor=\"icon-button-file\">\r\n                <IconButton\r\n                  color=\"primary\"\r\n                  aria-label=\"upload picture\"\r\n                  component=\"span\"\r\n                >\r\n                  <PhotoCamera />\r\n                </IconButton>\r\n              </label>\r\n              <div hidden={error1} style={{ color: \"red\" }}>\r\n                We only support PNG or JPG pictures.\r\n              </div>\r\n              <div hidden={error2} style={{ color: \"red\" }}>\r\n                We don't support image larger 30MB .\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <Button\r\n                color=\"primary\"\r\n                onClick={() => setChangePassword(!changePassword)}\r\n              >\r\n                Change password\r\n              </Button>\r\n            </div>\r\n          </Col>\r\n          <Row>\r\n            <Col xl={8} style={{ top: \"-200px\" }}>\r\n              <Card>\r\n                <CardHeader\r\n                  style={{ padding: \"1.25rem 1.5rem\", marginBottom: 0 }}\r\n                >\r\n                  <Row>\r\n                    <Col xs={8}>\r\n                      <h5 className=\"mb-0\">My account</h5>\r\n                    </Col>\r\n                    <Col xs={4} className=\"text-right\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<EditIcon />}\r\n                        style={{ float: \"right\" }}\r\n                        size=\"small\"\r\n                        onClick={() => setOpen(true)}\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <Form>\r\n                    <h6 className=\"heading-small text-muted mb-4\">\r\n                      User information\r\n                    </h6>\r\n                    <div className=\"pl-lg-4\">\r\n                      <Row>\r\n                        <Col lg={6}>\r\n                          <FormGroup style={{ textAlign: \"left\" }}>\r\n                            <Label\r\n                              className=\"form-control-label\"\r\n                              for=\"input-username\"\r\n                            >\r\n                              Account name\r\n                            </Label>\r\n                            <input\r\n                              id=\"input-username\"\r\n                              name=\"username\"\r\n                              placeholder=\"Username\"\r\n                              type=\"text\"\r\n                              className=\"form-control1-alternative form-control1\"\r\n                              value={getUser().Name}\r\n                              disabled\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                          <FormGroup style={{ textAlign: \"left\" }}>\r\n                            <Label\r\n                              className=\"form-control-label\"\r\n                              for=\"input-email\"\r\n                            >\r\n                              Email\r\n                            </Label>\r\n                            <input\r\n                              id=\"input-email\"\r\n                              placeholder=\"Email\"\r\n                              type=\"email\"\r\n                              className=\"form-control1-alternative form-control1\"\r\n                              value={getUser().Email}\r\n                              disabled\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col lg={6}>\r\n                          <FormGroup style={{ textAlign: \"left\" }}>\r\n                            <Label\r\n                              className=\"form-control-label\"\r\n                              for=\"input-department\"\r\n                            >\r\n                              Department\r\n                            </Label>\r\n                            <input\r\n                              id=\"input-department\"\r\n                              placeholder=\"Department\"\r\n                              type=\"text\"\r\n                              className=\"form-control1-alternative form-control1\"\r\n                              value={department.name}\r\n                              disabled\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                          <FormGroup style={{ textAlign: \"left\" }}>\r\n                            <Label\r\n                              className=\"form-control-label\"\r\n                              for=\"input-username\"\r\n                            >\r\n                              Child Department\r\n                            </Label>\r\n                            <input\r\n                              id=\"input-username\"\r\n                              placeholder=\"Child Department\"\r\n                              type=\"text\"\r\n                              className=\"form-control1-alternative form-control1\"\r\n                              value={childDepartment.name}\r\n                              disabled\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n                      </Row>\r\n                    </div>\r\n                    <hr className=\"my-4\" />\r\n                    <h6 className=\"heading-small text-muted mb-4\">\r\n                      Contact information\r\n                    </h6>\r\n                    <div className=\"pl-lg-4\">\r\n                      <Row>\r\n                        <Col lg={6}>\r\n                          <FormGroup style={{ textAlign: \"left\" }}>\r\n                            <Label\r\n                              className=\"form-control-label\"\r\n                              for=\"input-phone\"\r\n                            >\r\n                              Phone number\r\n                            </Label>\r\n                            <input\r\n                              id=\"input-phone\"\r\n                              placeholder=\"Phone number\"\r\n                              type=\"tel\"\r\n                              className=\"form-control1-alternative form-control1\"\r\n                              value={getUser().Phone}\r\n                              disabled\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                          <FormGroup style={{ textAlign: \"left\" }}>\r\n                            <Label\r\n                              className=\"form-control-label\"\r\n                              for=\"input-address\"\r\n                            >\r\n                              Address\r\n                            </Label>\r\n                            <input\r\n                              name=\"address\"\r\n                              onChange={(e) =>\r\n                                setUserProfile({\r\n                                  ...userProfile,\r\n                                  address: e.target.value,\r\n                                })\r\n                              }\r\n                              id=\"input-address\"\r\n                              placeholder=\"Address\"\r\n                              type=\"text\"\r\n                              className=\"form-control1-alternative form-control1\"\r\n                              defaultValue={user1.address}\r\n                            />\r\n                            <div hidden={error3[3]} style={{ color: \"red\" }}>\r\n                              Address must not larger 255 characters\r\n                            </div>\r\n                          </FormGroup>\r\n                        </Col>\r\n                      </Row>\r\n                    </div>\r\n                  </Form>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Col xl={4} style={{ top: \"-200px\" }}>\r\n              <Card>\r\n                <CardHeader\r\n                  style={{ padding: \"1.25rem 1.5rem\", marginBottom: 0 }}\r\n                >\r\n                  <Row>\r\n                    <Col>\r\n                      <BusinessIcon color=\"primary\" fontSize=\"large\" />\r\n                      <h5>{company.name}</h5>\r\n                    </Col>\r\n                  </Row>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <Form>\r\n                    <h6 className=\"heading-small text-muted mb-4\">\r\n                      Company information\r\n                    </h6>\r\n                    <Row>\r\n                      <Col>\r\n                        <FormGroup style={{ textAlign: \"left\" }}>\r\n                          <Label\r\n                            className=\"form-control-label\"\r\n                            for=\"input-address\"\r\n                          >\r\n                            Address\r\n                          </Label>\r\n                          <input\r\n                            id=\"input-address\"\r\n                            placeholder=\"Address\"\r\n                            type=\"text\"\r\n                            className=\"form-control1-alternative form-control1\"\r\n                            value={company.address}\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                  </Form>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Dialog open={changePassword}>\r\n            <DialogTitle>Create new password</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText>\r\n                To change your password, please enter your current password\r\n                here. And enter new your password then confirm.\r\n              </DialogContentText>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                name=\"current_pass\"\r\n                label=\"Current Password\"\r\n                type=\"password\"\r\n                onChange={handleOnChange}\r\n                error={error.old}\r\n                helperText={error.message_old}\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                autoFocus\r\n                name=\"new_pass\"\r\n                margin=\"dense\"\r\n                label=\"New Password\"\r\n                type=\"password\"\r\n                error={error.new}\r\n                helperText={error.message_new}\r\n                onChange={handleOnChange}\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                autoFocus\r\n                name=\"confirm_pass\"\r\n                margin=\"dense\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                error={error.confirm_new}\r\n                helperText={error.message_confirm}\r\n                onChange={handleOnChange}\r\n                fullWidth\r\n              />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                onClick={() => setChangePassword(!changePassword)}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={handleChangePassword}\r\n              >\r\n                Update\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n          <Dialog open={newAvater}>\r\n            <DialogTitle>\r\n              Confirm your new profile picture\r\n              <Icon.AiOutlineClose\r\n                style={{ cursor: \"pointer\", float: \"right\" }}\r\n                onClick={() => {\r\n                  setAvatar(\"\");\r\n                  setNewAvatar(false);\r\n                }}\r\n              />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <img\r\n                src={avatar}\r\n                style={{ borderRadius: \"50%\" }}\r\n                alt=\"\"\r\n                width=\"400px\"\r\n                height=\"400px\"\r\n              />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                variant=\"contained\"\r\n                fullWidth\r\n                color=\"primary\"\r\n                onClick={handleNewAvatar}\r\n              >\r\n                Set new profile picture\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n          <Dialog open={open} fullWidth>\r\n            <DialogTitle>Are you want update profile?</DialogTitle>\r\n            <DialogActions>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => setOpen(false)}\r\n                color=\"secondary\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={handleEdit}\r\n                color=\"primary\"\r\n                autoFocus\r\n              >\r\n                Update\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default Profile;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\App\\firebase.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\loginAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\companyListAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\userListAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\Sidebar.js",[],["306","307"],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetAdminCompany\\GetAdminCompany.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\SidebarAdmin.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Navbar\\Navbar.js",["308","309","310"],"import * as Icon from \"react-icons/fa\";\r\nimport * as AiIcon from \"react-icons/ai\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { IconContext } from \"react-icons\";\r\nimport * as IoIcon from \"react-icons/io\";\r\nimport * as IoOIcon from \"react-icons/io5\";\r\nimport logo from \"../../images/eoffice.png\";\r\nimport \"../../css/Navbar.css\";\r\nimport { getUser, removeUserSession } from \"../../utils/Common\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport notiAPI from \"../../api/notiAPI\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nfunction Navbar() {\r\n  const history = useHistory();\r\n  const [sidebar, setSidebar] = useState(false);\r\n  const showSidebar = () => setSidebar(!sidebar);\r\n  const [listNoti, setListNoti] = useState([]);\r\n  const [openNoti, setOpenNoti] = useState(false);\r\n  const [openProfile, setOpenProfile] = useState(false);\r\n  const count = listNoti.length;\r\n  const [currentPage] = useState(1);\r\n  const [postPerPage] = useState(9);\r\n  const indexOfLastPost = currentPage * postPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - postPerPage;\r\n  var postNotification = listNoti\r\n    .sort((a, b) => {\r\n      return (\r\n        new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\r\n      );\r\n    })\r\n    .reverse();\r\n  const currentPostsNoti = postNotification.slice(\r\n    indexOfFirstPost,\r\n    indexOfLastPost\r\n  );\r\n  const [users, setUsers] = useState([]);\r\n  useEffect(() => {\r\n    async function fetListNoti() {\r\n      try {\r\n        const res = await notiAPI.getById(getUser().Id);\r\n        setListNoti(\r\n          res.data.filter((noti) => {\r\n            if (noti.status === 0) {\r\n              return noti;\r\n            }\r\n          })\r\n        );\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetListNoti();\r\n  }, []);\r\n  useEffect(() => {\r\n    async function getUsers() {\r\n      try {\r\n        const response = await userListAPI.getUserById(getUser().Id);\r\n        setUsers(response.data);\r\n      } catch (error) {\r\n        if (error.response.status === 401) {\r\n          removeUserSession();\r\n          history.push(\"/\");\r\n        }\r\n      }\r\n    }\r\n    getUsers();\r\n  }, []);\r\n  function NavItemProfile(props) {\r\n    return (\r\n      <li\r\n        className=\"navbar-item\"\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          setOpenProfile(!openProfile);\r\n          setOpenNoti(false);\r\n        }}\r\n      >\r\n        {props.icon}\r\n        {openProfile && props.children}\r\n      </li>\r\n    );\r\n  }\r\n  function NavItemNoti(props) {\r\n    return (\r\n      <li\r\n        className=\"navbar-item\"\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          setOpenNoti(!openNoti);\r\n          setOpenProfile(false);\r\n        }}\r\n      >\r\n        {props.icon}\r\n        {openNoti && props.children}\r\n      </li>\r\n    );\r\n  }\r\n  function Logout(e) {\r\n    e.preventDefault();\r\n    removeUserSession();\r\n    history.push(\"/\");\r\n  }\r\n  function Profile(e) {\r\n    e.preventDefault();\r\n    history.push(\"/profile\");\r\n  }\r\n  function DropdownMenu2() {\r\n    function DropdownItem2(props) {\r\n      return (\r\n        <div className=\"menu-item\" onClick={props.function}>\r\n          {props.children}\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"dropdown-navbar\">\r\n        {currentPostsNoti.map((noti, index) => {\r\n          return (\r\n            <div key={index}>\r\n              <DropdownItem2>{noti.title}</DropdownItem2>\r\n            </div>\r\n          );\r\n        })}\r\n        <Link to=\"/notification\" hidden={count < 10 ? true : false}>\r\n          See more\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n  function DropdownMenu1() {\r\n    function DropdownItem1(props) {\r\n      return (\r\n        <div className=\"menu-item\" onClick={props.function}>\r\n          <span className=\"icon-button\">{props.leftIcon}</span>\r\n          {props.children}\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"dropdown-navbar\">\r\n        <DropdownItem1 leftIcon={<AccountCircleIcon />} function={Profile}>\r\n          My Profile\r\n        </DropdownItem1>\r\n        <DropdownItem1 leftIcon={<ExitToAppIcon />} function={Logout}>\r\n          Logout\r\n        </DropdownItem1>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <IconContext.Provider value={{ color: \"#404f9f\" }}>\r\n      <div className=\"navbar1 navbar-fixed-top\">\r\n        <Icon.FaBars\r\n          onClick={() => {\r\n            showSidebar();\r\n            setTimeout(() => {\r\n              setSidebar(false);\r\n            }, 10000);\r\n          }}\r\n          className=\"menu-bars\"\r\n        />\r\n        <img src={logo} alt=\"\" style={{ marginLeft: 20, marginTop: 10 }} />\r\n        <nav style={{ display: \"flex\", right: 20, position: \"absolute\" }}>\r\n          <ul className=\"navbar-nav\">\r\n            <NavItemNoti\r\n              icon={\r\n                <Badge badgeContent={count < 10 ? count : \"9+\"} color=\"error\">\r\n                  <NotificationsIcon\r\n                    style={{ cursor: \"pointer\" }}\r\n                    color=\"action\"\r\n                    fontSize=\"large\"\r\n                  />\r\n                </Badge>\r\n              }\r\n            >\r\n              <DropdownMenu2 />\r\n            </NavItemNoti>\r\n            <NavItemProfile\r\n              icon={\r\n                <img\r\n                  className=\"icon-button\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  src={users.avatar}\r\n                  alt=\"avatar\"\r\n                />\r\n              }\r\n            >\r\n              <DropdownMenu1 />\r\n            </NavItemProfile>\r\n            <li className=\"nav-text\">\r\n              <span style={{ fontWeight: \"bolder\" }}>{getUser().Name}</span>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n      <nav className={sidebar ? \"nav-menu active\" : \"nav-menu\"}>\r\n        <ul className=\"nav-menu-items sn-bg-4\" onClick={showSidebar}>\r\n          <li className=\"navbar-toogle\">\r\n            <img src={logo} alt=\"\" style={{ marginLeft: 70, marginTop: 10 }} />\r\n            <IoOIcon.IoClose\r\n              onClick={showSidebar}\r\n              className=\"menu-bars-close\"\r\n            />\r\n          </li>\r\n          <li className=\"nav-text\">\r\n            <Link to=\"/dashboard\">\r\n              <AiIcon.AiOutlineDashboard />\r\n              <span style={{ marginLeft: 20 }}>Dashboard</span>\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-text\">\r\n            <Link to=\"/document\">\r\n              <IoOIcon.IoDocumentOutline />\r\n              <span style={{ marginLeft: 20 }}>Document</span>\r\n            </Link>\r\n          </li>\r\n          <li\r\n            className=\"nav-text\"\r\n            hidden={getUser().Role === \"2\" ? true : false}\r\n          >\r\n            <Link to=\"/user-management\">\r\n              <AiIcon.AiOutlineUser />\r\n              <span style={{ marginLeft: 20 }}>User Management</span>\r\n            </Link>\r\n          </li>\r\n          <li\r\n            className=\"nav-text\"\r\n            hidden={getUser().Role === \"2\" ? true : false}\r\n          >\r\n            <Link to=\"/department\">\r\n              <AiIcon.AiOutlineDashboard />\r\n              <span style={{ marginLeft: 20 }}>Department Management</span>\r\n            </Link>\r\n          </li>\r\n          <li className=\"nav-text\">\r\n            <Link to=\"/notification\">\r\n              <IoIcon.IoIosNotificationsOutline />\r\n              <span style={{ marginLeft: 20 }}>Notification</span>\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </IconContext.Provider>\r\n  );\r\n}\r\nexport default Navbar;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Stepper\\ContractStepper.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Stepper\\InvoiceStepper.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\departmentAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\validateAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\axiosClient.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\notiAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetDepartment.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetPhone.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetEmail.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetCreater.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\invoiceAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\StepDetail.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\contractAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\PDF\\PDF.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\StepDetailContract.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\StepInvoice.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\Stepper.js",[],{"ruleId":"311","replacedBy":"312"},{"ruleId":"313","replacedBy":"314"},{"ruleId":"315","severity":1,"message":"316","line":2,"column":20,"nodeType":"317","messageId":"318","endLine":2,"endColumn":26},{"ruleId":"315","severity":1,"message":"319","line":7,"column":22,"nodeType":"317","messageId":"318","endLine":7,"endColumn":33},{"ruleId":"315","severity":1,"message":"320","line":12,"column":10,"nodeType":"317","messageId":"318","endLine":12,"endColumn":27},{"ruleId":"315","severity":1,"message":"321","line":25,"column":10,"nodeType":"317","messageId":"318","endLine":25,"endColumn":16},{"ruleId":"322","severity":1,"message":"323","line":57,"column":26,"nodeType":"324","messageId":"325","endLine":57,"endColumn":28},{"ruleId":"322","severity":1,"message":"323","line":66,"column":26,"nodeType":"324","messageId":"325","endLine":66,"endColumn":28},{"ruleId":"322","severity":1,"message":"323","line":188,"column":32,"nodeType":"324","messageId":"325","endLine":188,"endColumn":34},{"ruleId":"315","severity":1,"message":"326","line":15,"column":8,"nodeType":"317","messageId":"318","endLine":15,"endColumn":14},{"ruleId":"315","severity":1,"message":"327","line":20,"column":10,"nodeType":"317","messageId":"318","endLine":20,"endColumn":16},{"ruleId":"328","severity":1,"message":"329","line":105,"column":22,"nodeType":"330","messageId":"331","endLine":105,"endColumn":23},{"ruleId":"328","severity":1,"message":"329","line":105,"column":28,"nodeType":"330","messageId":"331","endLine":105,"endColumn":29},{"ruleId":"328","severity":1,"message":"329","line":105,"column":45,"nodeType":"330","messageId":"331","endLine":105,"endColumn":46},{"ruleId":"328","severity":1,"message":"329","line":137,"column":22,"nodeType":"330","messageId":"331","endLine":137,"endColumn":23},{"ruleId":"328","severity":1,"message":"329","line":137,"column":28,"nodeType":"330","messageId":"331","endLine":137,"endColumn":29},{"ruleId":"328","severity":1,"message":"329","line":137,"column":45,"nodeType":"330","messageId":"331","endLine":137,"endColumn":46},{"ruleId":"322","severity":1,"message":"332","line":168,"column":43,"nodeType":"324","messageId":"333","endLine":168,"endColumn":45},{"ruleId":"328","severity":1,"message":"329","line":165,"column":48,"nodeType":"330","messageId":"331","endLine":165,"endColumn":49},{"ruleId":"328","severity":1,"message":"329","line":165,"column":54,"nodeType":"330","messageId":"331","endLine":165,"endColumn":55},{"ruleId":"328","severity":1,"message":"329","line":165,"column":71,"nodeType":"330","messageId":"331","endLine":165,"endColumn":72},{"ruleId":"328","severity":1,"message":"329","line":166,"column":46,"nodeType":"330","messageId":"331","endLine":166,"endColumn":47},{"ruleId":"328","severity":1,"message":"329","line":166,"column":52,"nodeType":"330","messageId":"331","endLine":166,"endColumn":53},{"ruleId":"328","severity":1,"message":"329","line":166,"column":69,"nodeType":"330","messageId":"331","endLine":166,"endColumn":70},{"ruleId":"328","severity":1,"message":"329","line":214,"column":26,"nodeType":"330","messageId":"331","endLine":214,"endColumn":27},{"ruleId":"328","severity":1,"message":"329","line":214,"column":32,"nodeType":"330","messageId":"331","endLine":214,"endColumn":33},{"ruleId":"328","severity":1,"message":"329","line":214,"column":49,"nodeType":"330","messageId":"331","endLine":214,"endColumn":50},{"ruleId":"334","severity":1,"message":"335","line":252,"column":6,"nodeType":"336","endLine":252,"endColumn":8,"suggestions":"337"},{"ruleId":"322","severity":1,"message":"323","line":73,"column":24,"nodeType":"324","messageId":"325","endLine":73,"endColumn":26},{"ruleId":"322","severity":1,"message":"323","line":89,"column":24,"nodeType":"324","messageId":"325","endLine":89,"endColumn":26},{"ruleId":"322","severity":1,"message":"332","line":94,"column":23,"nodeType":"324","messageId":"333","endLine":94,"endColumn":25},{"ruleId":"328","severity":1,"message":"329","line":111,"column":48,"nodeType":"330","messageId":"331","endLine":111,"endColumn":49},{"ruleId":"328","severity":1,"message":"329","line":111,"column":54,"nodeType":"330","messageId":"331","endLine":111,"endColumn":55},{"ruleId":"328","severity":1,"message":"329","line":111,"column":71,"nodeType":"330","messageId":"331","endLine":111,"endColumn":72},{"ruleId":"328","severity":1,"message":"329","line":112,"column":46,"nodeType":"330","messageId":"331","endLine":112,"endColumn":47},{"ruleId":"328","severity":1,"message":"329","line":112,"column":52,"nodeType":"330","messageId":"331","endLine":112,"endColumn":53},{"ruleId":"328","severity":1,"message":"329","line":112,"column":69,"nodeType":"330","messageId":"331","endLine":112,"endColumn":70},{"ruleId":"328","severity":1,"message":"329","line":144,"column":26,"nodeType":"330","messageId":"331","endLine":144,"endColumn":27},{"ruleId":"328","severity":1,"message":"329","line":144,"column":32,"nodeType":"330","messageId":"331","endLine":144,"endColumn":33},{"ruleId":"328","severity":1,"message":"329","line":144,"column":49,"nodeType":"330","messageId":"331","endLine":144,"endColumn":50},{"ruleId":"334","severity":1,"message":"335","line":184,"column":6,"nodeType":"336","endLine":184,"endColumn":8,"suggestions":"338"},{"ruleId":"322","severity":1,"message":"323","line":176,"column":37,"nodeType":"324","messageId":"325","endLine":176,"endColumn":39},{"ruleId":"322","severity":1,"message":"323","line":187,"column":37,"nodeType":"324","messageId":"325","endLine":187,"endColumn":39},{"ruleId":"322","severity":1,"message":"323","line":200,"column":39,"nodeType":"324","messageId":"325","endLine":200,"endColumn":41},{"ruleId":"322","severity":1,"message":"323","line":208,"column":36,"nodeType":"324","messageId":"325","endLine":208,"endColumn":38},{"ruleId":"322","severity":1,"message":"323","line":216,"column":35,"nodeType":"324","messageId":"325","endLine":216,"endColumn":37},{"ruleId":"322","severity":1,"message":"323","line":228,"column":39,"nodeType":"324","messageId":"325","endLine":228,"endColumn":41},{"ruleId":"322","severity":1,"message":"323","line":236,"column":36,"nodeType":"324","messageId":"325","endLine":236,"endColumn":38},{"ruleId":"322","severity":1,"message":"323","line":244,"column":35,"nodeType":"324","messageId":"325","endLine":244,"endColumn":37},{"ruleId":"322","severity":1,"message":"323","line":551,"column":32,"nodeType":"324","messageId":"325","endLine":551,"endColumn":34},{"ruleId":"334","severity":1,"message":"339","line":82,"column":6,"nodeType":"336","endLine":82,"endColumn":8,"suggestions":"340"},{"ruleId":"328","severity":1,"message":"329","line":127,"column":24,"nodeType":"330","messageId":"331","endLine":127,"endColumn":25},{"ruleId":"328","severity":1,"message":"329","line":127,"column":30,"nodeType":"330","messageId":"331","endLine":127,"endColumn":31},{"ruleId":"328","severity":1,"message":"329","line":127,"column":47,"nodeType":"330","messageId":"331","endLine":127,"endColumn":48},{"ruleId":"328","severity":1,"message":"329","line":191,"column":24,"nodeType":"330","messageId":"331","endLine":191,"endColumn":25},{"ruleId":"328","severity":1,"message":"329","line":191,"column":30,"nodeType":"330","messageId":"331","endLine":191,"endColumn":31},{"ruleId":"328","severity":1,"message":"329","line":191,"column":47,"nodeType":"330","messageId":"331","endLine":191,"endColumn":48},{"ruleId":"328","severity":1,"message":"329","line":253,"column":24,"nodeType":"330","messageId":"331","endLine":253,"endColumn":25},{"ruleId":"328","severity":1,"message":"329","line":253,"column":30,"nodeType":"330","messageId":"331","endLine":253,"endColumn":31},{"ruleId":"328","severity":1,"message":"329","line":253,"column":47,"nodeType":"330","messageId":"331","endLine":253,"endColumn":48},{"ruleId":"328","severity":1,"message":"329","line":319,"column":24,"nodeType":"330","messageId":"331","endLine":319,"endColumn":25},{"ruleId":"328","severity":1,"message":"329","line":319,"column":30,"nodeType":"330","messageId":"331","endLine":319,"endColumn":31},{"ruleId":"328","severity":1,"message":"329","line":319,"column":47,"nodeType":"330","messageId":"331","endLine":319,"endColumn":48},{"ruleId":"322","severity":1,"message":"323","line":125,"column":30,"nodeType":"324","messageId":"325","endLine":125,"endColumn":32},{"ruleId":"322","severity":1,"message":"323","line":132,"column":30,"nodeType":"324","messageId":"325","endLine":132,"endColumn":32},{"ruleId":"322","severity":1,"message":"323","line":139,"column":30,"nodeType":"324","messageId":"325","endLine":139,"endColumn":32},{"ruleId":"328","severity":1,"message":"329","line":362,"column":24,"nodeType":"330","messageId":"331","endLine":362,"endColumn":25},{"ruleId":"328","severity":1,"message":"329","line":362,"column":30,"nodeType":"330","messageId":"331","endLine":362,"endColumn":31},{"ruleId":"328","severity":1,"message":"329","line":362,"column":47,"nodeType":"330","messageId":"331","endLine":362,"endColumn":48},{"ruleId":"322","severity":1,"message":"323","line":899,"column":33,"nodeType":"324","messageId":"325","endLine":899,"endColumn":35},{"ruleId":"341","severity":1,"message":"342","line":1109,"column":19,"nodeType":"343","endLine":1109,"endColumn":49},{"ruleId":"341","severity":1,"message":"342","line":1111,"column":19,"nodeType":"343","endLine":1111,"endColumn":47},{"ruleId":"328","severity":1,"message":"329","line":67,"column":22,"nodeType":"330","messageId":"331","endLine":67,"endColumn":23},{"ruleId":"328","severity":1,"message":"329","line":67,"column":28,"nodeType":"330","messageId":"331","endLine":67,"endColumn":29},{"ruleId":"328","severity":1,"message":"329","line":67,"column":45,"nodeType":"330","messageId":"331","endLine":67,"endColumn":46},{"ruleId":"328","severity":1,"message":"329","line":80,"column":26,"nodeType":"330","messageId":"331","endLine":80,"endColumn":27},{"ruleId":"328","severity":1,"message":"329","line":80,"column":32,"nodeType":"330","messageId":"331","endLine":80,"endColumn":33},{"ruleId":"328","severity":1,"message":"329","line":80,"column":49,"nodeType":"330","messageId":"331","endLine":80,"endColumn":50},{"ruleId":"328","severity":1,"message":"329","line":92,"column":30,"nodeType":"330","messageId":"331","endLine":92,"endColumn":31},{"ruleId":"328","severity":1,"message":"329","line":92,"column":36,"nodeType":"330","messageId":"331","endLine":92,"endColumn":37},{"ruleId":"328","severity":1,"message":"329","line":92,"column":53,"nodeType":"330","messageId":"331","endLine":92,"endColumn":54},{"ruleId":"328","severity":1,"message":"329","line":104,"column":32,"nodeType":"330","messageId":"331","endLine":104,"endColumn":33},{"ruleId":"328","severity":1,"message":"329","line":104,"column":38,"nodeType":"330","messageId":"331","endLine":104,"endColumn":39},{"ruleId":"328","severity":1,"message":"329","line":104,"column":55,"nodeType":"330","messageId":"331","endLine":104,"endColumn":56},{"ruleId":"328","severity":1,"message":"329","line":121,"column":36,"nodeType":"330","messageId":"331","endLine":121,"endColumn":37},{"ruleId":"328","severity":1,"message":"329","line":121,"column":42,"nodeType":"330","messageId":"331","endLine":121,"endColumn":43},{"ruleId":"328","severity":1,"message":"329","line":121,"column":59,"nodeType":"330","messageId":"331","endLine":121,"endColumn":60},{"ruleId":"344","severity":1,"message":"345","line":374,"column":25,"nodeType":"346","messageId":"347","endLine":374,"endColumn":29,"fix":"348"},{"ruleId":"311","replacedBy":"349"},{"ruleId":"313","replacedBy":"350"},{"ruleId":"315","severity":1,"message":"351","line":16,"column":8,"nodeType":"317","messageId":"318","endLine":16,"endColumn":21},{"ruleId":"322","severity":1,"message":"323","line":47,"column":34,"nodeType":"324","messageId":"325","endLine":47,"endColumn":36},{"ruleId":"334","severity":1,"message":"352","line":72,"column":6,"nodeType":"336","endLine":72,"endColumn":8,"suggestions":"353"},"no-native-reassign",["354"],"no-negated-in-lhs",["355"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","'removeUserSession' is defined but never used.","'error2' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'notDoc' is defined but never used.","'hidden' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","Array.prototype.map() expects a return value from arrow function.","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addEventListeners' and 'removeEventListeners'. Either include them or remove the dependency array.","ArrayExpression",["356"],["357"],"React Hook useEffect has a missing dependency: 'param.id'. Either include it or remove the dependency array.",["358"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"359","text":"360"},["354"],["355"],"'MoreHorizIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["361"],"no-global-assign","no-unsafe-negation",{"desc":"362","fix":"363"},{"desc":"362","fix":"364"},{"desc":"365","fix":"366"},[10565,10576],"",{"desc":"367","fix":"368"},"Update the dependencies array to be: [addEventListeners, removeEventListeners]",{"range":"369","text":"370"},{"range":"371","text":"370"},"Update the dependencies array to be: [param.id]",{"range":"372","text":"373"},"Update the dependencies array to be: [history]",{"range":"374","text":"375"},[7227,7229],"[addEventListeners, removeEventListeners]",[5540,5542],[3084,3086],"[param.id]",[2469,2471],"[history]"]