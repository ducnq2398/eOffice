[{"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\App\\App.js":"2","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\RouterURL\\RouterURL.js":"3","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminLogin\\AdminLogin.js":"4","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Login\\Login.js":"5","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\utils\\Common.js":"6","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminManager\\AdminManager.js":"7","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\ForgotPassword\\ResetPassword.js":"8","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CompanyList\\CompanyList.js":"9","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\EditCompany\\EditCompany.js":"10","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Dashboard\\Dashboard.js":"11","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Error\\Error.js":"12","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\InvoiceContent.js":"13","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\ForgotPassword\\ForgotPassword.js":"14","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\ContractContent.js":"15","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\CreateContract.js":"16","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Notification\\Notification.js":"17","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\CreateInvoice.js":"18","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Document\\Document.js":"19","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\DetailDocument\\ContractDetail.js":"20","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\DetailDocument\\InvoiceDetail.js":"21","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminCompany\\DepartmentManagement\\DepartmentManagement.js":"22","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminCompany\\UserManagement\\UserManagement.js":"23","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CompanyRegister\\CompanyRegister.js":"24","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Profile\\Profile.js":"25","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\App\\firebase.js":"26","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\loginAPI.js":"27","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\companyListAPI.js":"28","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\userListAPI.js":"29","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\Sidebar.js":"30","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetAdminCompany\\GetAdminCompany.js":"31","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\SidebarAdmin.js":"32","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Navbar\\Navbar.js":"33","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Stepper\\ContractStepper.js":"34","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Stepper\\InvoiceStepper.js":"35","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\departmentAPI.js":"36","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\validateAPI.js":"37","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\axiosClient.js":"38","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\notiAPI.js":"39","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetDepartment.js":"40","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetPhone.js":"41","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetEmail.js":"42","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetCreater.js":"43","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\invoiceAPI.js":"44","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\StepDetail.js":"45","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\contractAPI.js":"46","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\PDF\\PDF.js":"47","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\StepDetailContract.js":"48","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\StepInvoice.js":"49","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\Stepper.js":"50"},{"size":266,"mtime":1616869009049,"results":"51","hashOfConfig":"52"},{"size":362,"mtime":1616869008972,"results":"53","hashOfConfig":"52"},{"size":4190,"mtime":1616869008983,"results":"54","hashOfConfig":"52"},{"size":3032,"mtime":1616869008971,"results":"55","hashOfConfig":"52"},{"size":5260,"mtime":1616869008981,"results":"56","hashOfConfig":"52"},{"size":545,"mtime":1616869009050,"results":"57","hashOfConfig":"52"},{"size":456,"mtime":1616869008971,"results":"58","hashOfConfig":"52"},{"size":4632,"mtime":1617026329500,"results":"59","hashOfConfig":"52"},{"size":7407,"mtime":1616869008972,"results":"60","hashOfConfig":"52"},{"size":8108,"mtime":1616869008977,"results":"61","hashOfConfig":"52"},{"size":13995,"mtime":1617035894573,"results":"62","hashOfConfig":"52"},{"size":691,"mtime":1616869008977,"results":"63","hashOfConfig":"52"},{"size":10372,"mtime":1616869008975,"results":"64","hashOfConfig":"52"},{"size":4906,"mtime":1616996720878,"results":"65","hashOfConfig":"52"},{"size":13867,"mtime":1616869008973,"results":"66","hashOfConfig":"52"},{"size":31264,"mtime":1616869008974,"results":"67","hashOfConfig":"52"},{"size":8482,"mtime":1617036154749,"results":"68","hashOfConfig":"52"},{"size":22573,"mtime":1616869008974,"results":"69","hashOfConfig":"52"},{"size":27824,"mtime":1617029467548,"results":"70","hashOfConfig":"52"},{"size":12127,"mtime":1617034670581,"results":"71","hashOfConfig":"52"},{"size":9564,"mtime":1616869008976,"results":"72","hashOfConfig":"52"},{"size":26109,"mtime":1617028637932,"results":"73","hashOfConfig":"52"},{"size":38526,"mtime":1617005746759,"results":"74","hashOfConfig":"52"},{"size":16984,"mtime":1617006254902,"results":"75","hashOfConfig":"52"},{"size":24074,"mtime":1616869008982,"results":"76","hashOfConfig":"52"},{"size":422,"mtime":1616869008972,"results":"77","hashOfConfig":"52"},{"size":341,"mtime":1616869008968,"results":"78","hashOfConfig":"52"},{"size":1425,"mtime":1616869008967,"results":"79","hashOfConfig":"52"},{"size":2177,"mtime":1616996772183,"results":"80","hashOfConfig":"52"},{"size":4666,"mtime":1616501057509,"results":"81","hashOfConfig":"82"},{"size":792,"mtime":1616869008978,"results":"83","hashOfConfig":"52"},{"size":2579,"mtime":1616869008983,"results":"84","hashOfConfig":"52"},{"size":8863,"mtime":1617036053462,"results":"85","hashOfConfig":"52"},{"size":362,"mtime":1617029096462,"results":"86","hashOfConfig":"52"},{"size":300,"mtime":1617029101416,"results":"87","hashOfConfig":"52"},{"size":2414,"mtime":1617004905825,"results":"88","hashOfConfig":"52"},{"size":589,"mtime":1616869008969,"results":"89","hashOfConfig":"52"},{"size":158,"mtime":1616869008967,"results":"90","hashOfConfig":"52"},{"size":584,"mtime":1617035705975,"results":"91","hashOfConfig":"52"},{"size":831,"mtime":1616869008979,"results":"92","hashOfConfig":"52"},{"size":794,"mtime":1616869008980,"results":"93","hashOfConfig":"52"},{"size":794,"mtime":1616869008979,"results":"94","hashOfConfig":"52"},{"size":798,"mtime":1616869008979,"results":"95","hashOfConfig":"52"},{"size":1863,"mtime":1617021018556,"results":"96","hashOfConfig":"52"},{"size":3570,"mtime":1616869008984,"results":"97","hashOfConfig":"52"},{"size":1909,"mtime":1617020994765,"results":"98","hashOfConfig":"52"},{"size":1275,"mtime":1616869008982,"results":"99","hashOfConfig":"52"},{"size":5185,"mtime":1616926088913,"results":"100","hashOfConfig":"52"},{"size":956,"mtime":1616869008985,"results":"101","hashOfConfig":"52"},{"size":1024,"mtime":1616869008985,"results":"102","hashOfConfig":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"1cfysk8",{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"105"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"105"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"105"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"105"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"105"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"105"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"105"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"105"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"105"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"105"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"105"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"165","usedDeprecatedRules":"105"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},"lohtio",{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\index.js",[],["217","218"],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\App\\App.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\RouterURL\\RouterURL.js",["219"],"import {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport AdminLogin from \"../AdminLogin/AdminLogin\";\r\nimport AdminManager from \"../AdminManager/AdminManager\";\r\nimport Login from \"../Login/Login\";\r\nimport CompanyRegister from \"../CompanyRegister/CompanyRegister\";\r\nimport CompanyList from \"../CompanyList/CompanyList\";\r\nimport ForgotPassword from \"../ForgotPassword/ForgotPassword\";\r\nimport EditCompany from \"../EditCompany/EditCompany\";\r\nimport { getToken, getUser } from \"../../utils/Common\";\r\nimport ResetPassword from \"../ForgotPassword/ResetPassword\";\r\nimport UserManagement from \"../AdminCompany/UserManagement/UserManagement\";\r\nimport CreateContract from \"../CreateDocument/CreateContract\";\r\nimport Dashboard from \"../Dashboard/Dashboard\";\r\nimport Document from \"../Document/Document\";\r\nimport Error from \"../Error/Error\";\r\nimport DepartmentManagerment from \"../AdminCompany/DepartmentManagement/DepartmentManagement\";\r\nimport Notification from \"../Notification/Notification\";\r\nimport CreateInvoice from \"../CreateDocument/CreateInvoice\";\r\nimport InvoiceContent from \"../CreateDocument/InvoiceContent\";\r\nimport Profile from \"../Profile/Profile\";\r\nimport ContractContent from \"../CreateDocument/ContractContent\";\r\nimport InvoiceDetail from \"../DetailDocument/InvoiceDetail\";\r\nimport ContractDetail from \"../DetailDocument/ContractDetail\";\r\n\r\nfunction RouterURL() {\r\n  const PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        getToken() && getUser().Role === \"3\" ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: \"/error\", state: { from: props.location } }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n\r\n  const AdminRoute = ({ component: Component, ...rest }) => (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        getToken() && getUser().Role === \"1\" ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: \"/error\", state: { from: props.location } }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n  const UserRoute = ({ component: Component, ...rest }) => (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        getToken() && getUser().Role !== \"3\" ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{ pathname: \"/error\", state: { from: props.location } }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route path=\"/error\" component={Error} />\r\n        <Route exact path=\"/\" component={Login} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/admin\" component={AdminLogin} />\r\n        <Route path=\"/forgot-password\" component={ForgotPassword} />\r\n        <Route path=\"/reset-password\" component={ResetPassword} />\r\n        <Route path=\"/error\" component={Error} />\r\n        <UserRoute path=\"/contract\" component={CreateContract} />\r\n        <UserRoute path=\"/invoice\" component={CreateInvoice} />\r\n        <UserRoute path=\"/dashboard\" component={Dashboard} />\r\n        <UserRoute path=\"/invoice-confirm\" component={InvoiceContent} />\r\n        <UserRoute path=\"/contract-confirm\" component={ContractContent} />\r\n        <UserRoute path=\"/document\" component={Document} />\r\n        <UserRoute path=\"/detail/invoice/:id/:name\" component={InvoiceDetail} />\r\n        <UserRoute\r\n          path=\"/detail/contract/:id/:name\"\r\n          component={ContractDetail}\r\n        />\r\n        <UserRoute path=\"/notification\" component={Notification} />\r\n        <AdminRoute path=\"/department\" component={DepartmentManagerment} />\r\n        <AdminRoute path=\"/user-management\" component={UserManagement} />\r\n        <PrivateRoute path=\"/admin-manager\" component={AdminManager} />\r\n        <PrivateRoute path=\"/company-register\" component={CompanyRegister} />\r\n        <PrivateRoute path=\"/company-list\" component={CompanyList} />\r\n        <PrivateRoute path=\"/edit-company\" component={EditCompany} />\r\n        <UserRoute path=\"/profile\" component={Profile} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\nexport default RouterURL;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminLogin\\AdminLogin.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Login\\Login.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\utils\\Common.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminManager\\AdminManager.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\ForgotPassword\\ResetPassword.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CompanyList\\CompanyList.js",["220","221","222"],"import {\r\n  Container,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownMenu,\r\n  DropdownToggle,\r\n  Table,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport companyListAPI from \"../../api/companyListAPI\";\r\nimport SidebarAdmin from \"../Sidebar/SidebarAdmin\";\r\nimport \"../../css/CompanyList.css\";\r\nimport GetAdminCompany from \"../GetAdminCompany/GetAdminCompany\";\r\nimport Moment from \"moment\";\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\n\r\nfunction CompanyList() {\r\n  const [filter, setFilter] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const toggle = () => setFilter((prevState) => !prevState);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage] = useState(10);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [data, setData] = useState([]);\r\n  const [postList, setPostList] = useState([]);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n  const currentPosts = postList.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n  function changePage(event, newPage) {\r\n    setPage(newPage);\r\n  }\r\n  useEffect(() => {\r\n    async function fetListData() {\r\n      try {\r\n        const response = await companyListAPI.getAll();\r\n        setPostList(response.data);\r\n        setData(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetListData();\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 2000);\r\n  }, []);\r\n  function Active() {\r\n    setPostList(\r\n      data.filter((data) => {\r\n        if (data.status === 1) {\r\n          return data;\r\n        }\r\n      })\r\n    );\r\n  }\r\n  function listDeactive() {\r\n    setPostList(\r\n      data.filter((data) => {\r\n        if (data.status !== 1) {\r\n          return data;\r\n        }\r\n      })\r\n    );\r\n  }\r\n  function All() {\r\n    setPostList(data);\r\n  }\r\n  return (\r\n    <div>\r\n      <SidebarAdmin />\r\n      <div className=\"main-panel1\">\r\n        <Container fluid={true}>\r\n          <div className=\"search_form\">\r\n            <Form>\r\n              <FormGroup>\r\n                <Row>\r\n                  <Col xs={10}>\r\n                    <Input\r\n                      type=\"search\"\r\n                      className=\"form-control rounded\"\r\n                      value={search}\r\n                      onChange={(event) => {\r\n                        setSearch(event.target.value);\r\n                      }}\r\n                      placeholder=\"Search by name company\"\r\n                    />\r\n                  </Col>\r\n                  <Col xs={2}>\r\n                    <Dropdown isOpen={filter} toggle={toggle}>\r\n                      <DropdownToggle color=\"primary\" caret>\r\n                        Filter\r\n                      </DropdownToggle>\r\n                      <DropdownMenu>\r\n                        <DropdownItem onClick={All}>All</DropdownItem>\r\n                        <DropdownItem onClick={Active}>Active</DropdownItem>\r\n                        <DropdownItem onClick={listDeactive}>\r\n                          Deactive\r\n                        </DropdownItem>\r\n                      </DropdownMenu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                </Row>\r\n              </FormGroup>\r\n            </Form>\r\n          </div>\r\n          {loading ? (\r\n            <ScaleLoader color={\"#2512DF\"} loading={loading} size={35} />\r\n          ) : (\r\n            <div hidden={search !== \"\" ? true : false}>\r\n              <TablePagination\r\n                component=\"div\"\r\n                count={postList.length}\r\n                page={page}\r\n                onChangePage={changePage}\r\n                rowsPerPage={rowsPerPage}\r\n                labelRowsPerPage=\"\"\r\n                rowsPerPageOptions={[]}\r\n              />\r\n              <Table hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th>No</th>\r\n                    <th>Company Name</th>\r\n                    <th>Manager Name</th>\r\n                    <th>Date Created</th>\r\n                    <th>Status</th>\r\n                    <th>Phone Number</th>\r\n                    <th>Edits/Details</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {currentPosts.map((data, key) => (\r\n                    <tr key={key}>\r\n                      <th>{data.id}</th>\r\n                      <td>{data.name}</td>\r\n                      <td>\r\n                        <GetAdminCompany id={data.adminId} />\r\n                      </td>\r\n                      <td>\r\n                        {Moment(data.dateCreate).format(\"DD/MM/YYYY HH:mm:ss\")}\r\n                      </td>\r\n                      <td>\r\n                        {data.status === 1 ? (\r\n                          <p style={{ color: \"green\" }}>Active</p>\r\n                        ) : (\r\n                          <p style={{ color: \"red\" }}>Deactive</p>\r\n                        )}\r\n                      </td>\r\n                      <td>{data.phone}</td>\r\n                      <td>\r\n                        <Link\r\n                          to={{\r\n                            pathname: \"/edit-company\",\r\n                            state: data,\r\n                          }}\r\n                        >\r\n                          Edit/Detail\r\n                        </Link>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          )}\r\n          <Table hidden={search === \"\" ? true : false}>\r\n            <thead>\r\n              <tr>\r\n                <th>No</th>\r\n                <th>Company Name</th>\r\n                <th>Manager Name</th>\r\n                <th>Date Created</th>\r\n                <th>Status</th>\r\n                <th>Phone Number</th>\r\n                <th>Edits/Details</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data\r\n                .filter((data) => {\r\n                  if (data.name.toLowerCase().includes(search.toLowerCase())) {\r\n                    return data;\r\n                  }\r\n                })\r\n                .map((data) => (\r\n                  <tr key={data.id}>\r\n                    <th>{data.id}</th>\r\n                    <td>{data.name}</td>\r\n                    <td>\r\n                      <GetAdminCompany id={data.adminId} />\r\n                    </td>\r\n                    <td>{data.dateCreate}</td>\r\n                    <td>\r\n                      {data.status === 1 ? (\r\n                        <p style={{ color: \"green\" }}>Active</p>\r\n                      ) : (\r\n                        <p style={{ color: \"red\" }}>Deactive</p>\r\n                      )}\r\n                    </td>\r\n                    <td>{data.phone}</td>\r\n                    <td>\r\n                      <Link\r\n                        to={{\r\n                          pathname: \"/edit-company\",\r\n                          state: data,\r\n                        }}\r\n                      >\r\n                        Edit/Detail\r\n                      </Link>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </Table>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default CompanyList;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\EditCompany\\EditCompany.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Dashboard\\Dashboard.js",["223","224"],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Error\\Error.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\InvoiceContent.js",["225","226","227"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\r\nimport StepInvoice from \"../Sidebar/StepInvoice\";\r\nimport PDF from \"../PDF/PDF\";\r\nimport \"../../css/CreateDoc.css\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { forwardRef, useEffect, useState } from \"react\";\r\nimport { getUser } from \"../../utils/Common\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport invoiceAPI from \"../../api/invoiceAPI\";\r\nimport Moment from \"moment\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  InputAdornment,\r\n  Slide,\r\n  TablePagination,\r\n} from \"@material-ui/core\";\r\nimport TitleIcon from \"@material-ui/icons/Title\";\r\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport \"date-fns\";\r\nimport EventAvailableIcon from \"@material-ui/icons/EventAvailable\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport moment from \"moment\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\n\r\ntoast.configure();\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"down\" ref={ref} {...props} />;\r\n});\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.common.black,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction InvoiceContent() {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [create, setCreate] = useState(false);\r\n  function toogle() {\r\n    setCreate(!create);\r\n  }\r\n  const [signer, setSigner] = useState(\"\");\r\n  const viewer = location.state.viewer;\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage] = useState(4);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n  const currentPosts = viewer.slice(indexOfFirstPost, indexOfLastPost);\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  useEffect(() => {\r\n    async function getSigner() {\r\n      try {\r\n        const res = await userListAPI.getUserById(\r\n          location.state.data.signer.id\r\n        );\r\n        setSigner(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getSigner();\r\n  }, [location.state.data.signer.id]);\r\n\r\n  async function handleCreated(e) {\r\n    e.preventDefault();\r\n    const file = location.state.file[0];\r\n    const convertBase64 = await base64(file);\r\n    const url = convertBase64.slice(28);\r\n    const position =\r\n      \"page=\" +\r\n      location.state.numberPage +\r\n      \",x=\" +\r\n      location.state.signLocation.x +\r\n      \",y=\" +\r\n      location.state.signLocation.y;\r\n    const params = {\r\n      dateCreate: Moment(new Date()).format(\r\n        \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n      ),\r\n      creatorId: getUser().Id,\r\n      dateExpire: location.state.date,\r\n      title: location.state.data.title,\r\n      signerId: location.state.data.signer.id,\r\n      signLocation: position,\r\n      invoiceURL: url,\r\n    };\r\n    invoiceAPI\r\n      .addInvoice(params)\r\n      .then(function (res) {\r\n        const invoiceId = res.data.id;\r\n        const viewer = {\r\n          invoiceId: invoiceId,\r\n          listViewersId: location.state.listViewerId,\r\n        };\r\n        invoiceAPI\r\n          .addViewerInvoice(viewer)\r\n          .then(function () {\r\n            toast.success(\"You has created invoice successfully\", {\r\n              position: toast.POSITION.TOP_CENTER,\r\n            });\r\n            history.push({\r\n              pathname:\r\n                \"/detail/invoice/\" +\r\n                invoiceId +\r\n                \"/\" +\r\n                location.state.data.title,\r\n            });\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n  function base64(file) {\r\n    return new Promise((resolve) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onload = () => {\r\n        resolve(fileReader.result);\r\n      };\r\n    });\r\n  }\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <StepInvoice activeStep={5} />\r\n      <main className=\"main-invoice\">\r\n        <Container fluid={true}>\r\n          <Row>\r\n            <Col>\r\n              <Paper style={{ marginTop: \"20px\" }} elevation={3}>\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                  }}\r\n                >\r\n                  Invoice Content\r\n                </Label>\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={location.state.data.title}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <TitleIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  value={signer.name}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <BorderColorIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n\r\n                <TableContainer style={{ marginTop: \"20px\", padding: \"10px\" }}>\r\n                  <Table aria-label=\"customized table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <StyledTableCell>Viewer name</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">Email</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">\r\n                          Phone number\r\n                        </StyledTableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {currentPosts.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                          <StyledTableCell component=\"th\" scope=\"row\">\r\n                            {row.name}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            {row.email}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            {row.phone}\r\n                          </StyledTableCell>\r\n                        </StyledTableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                  component=\"div\"\r\n                  count={viewer.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  labelRowsPerPage=\"\"\r\n                  onChangePage={handleChangePage}\r\n                  rowsPerPageOptions={[]}\r\n                />\r\n                <TextField\r\n                  label=\"Date expiration\"\r\n                  value={moment(location.state.date).format(\r\n                    \"DD/MM/YYYY HH:mm:ss\"\r\n                  )}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <EventAvailableIcon color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </Paper>\r\n              <Button\r\n                style={{ marginTop: \"20px\", marginRight: \"10px\" }}\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                onClick={() => history.push(\"/document\")}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                style={{ marginTop: \"20px\" }}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={toogle}\r\n              >\r\n                Create\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Form className=\"form-doc\">\r\n                <FormGroup row>\r\n                  <div>\r\n                    <PDF pdf={location.state.file[0]} />\r\n                  </div>\r\n                </FormGroup>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <Dialog\r\n          open={create}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          onClose={toogle}\r\n          disableBackdropClick\r\n          disableEscapeKeyDown\r\n          fullWidth\r\n        >\r\n          <DialogTitle>{\"Do you want create Invoice?\"}</DialogTitle>\r\n          <DialogActions>\r\n            <Button onClick={toogle} color=\"secondary\" variant=\"contained\">\r\n              No\r\n            </Button>\r\n            <Button onClick={handleCreated} color=\"primary\" variant=\"contained\">\r\n              Yes\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default InvoiceContent;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\ForgotPassword\\ForgotPassword.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\ContractContent.js",["228","229","230","231"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\r\nimport StepContract from \"../Sidebar/Stepper\";\r\nimport PDF from \"../PDF/PDF\";\r\nimport \"../../css/CreateDoc.css\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { forwardRef, useEffect, useState } from \"react\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport companyListAPI from \"../../api/companyListAPI\";\r\nimport { getUser } from \"../../utils/Common\";\r\nimport contractAPI from \"../../api/contractAPI\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Moment from \"moment\";\r\nimport { toast } from \"react-toastify\";\r\nimport axios from \"axios\";\r\nimport EventAvailableIcon from \"@material-ui/icons/EventAvailable\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TitleIcon from \"@material-ui/icons/Title\";\r\nimport BusinessIcon from \"@material-ui/icons/Business\";\r\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\r\nimport {\r\n  InputAdornment,\r\n  Paper,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  Table,\r\n  TextField,\r\n  withStyles,\r\n  TablePagination,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogActions,\r\n  Slide,\r\n} from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"down\" ref={ref} {...props} />;\r\n});\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.common.black,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction ContractContent() {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [create, setCreate] = useState(false);\r\n  const [signer, setSigner] = useState(\"\");\r\n  const [guest, setGuest] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage] = useState(2);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n  const viewer = location.state.viewer;\r\n  const currentPosts = viewer.slice(indexOfFirstPost, indexOfLastPost);\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  function toogle() {\r\n    setCreate(!create);\r\n  }\r\n  useEffect(() => {\r\n    async function getSigner() {\r\n      try {\r\n        const res = await userListAPI.getUserById(\r\n          location.state.data.signer.id\r\n        );\r\n        setSigner(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getSigner();\r\n  }, [location.state.data.signer.id]);\r\n  useEffect(() => {\r\n    async function getCompany() {\r\n      try {\r\n        const res = await companyListAPI.getCompanyById(getUser().CompanyId);\r\n        setCompany(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getCompany();\r\n  }, []);\r\n  useEffect(() => {\r\n    async function getGuest() {\r\n      try {\r\n        const res = await userListAPI.getUserById(\r\n          location.state.data.signer_guest.id\r\n        );\r\n        setGuest(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getGuest();\r\n  }, [location.state.data.signer_guest.id]);\r\n\r\n  async function handleCreated(e) {\r\n    e.preventDefault();\r\n    const file = location.state.file[0];\r\n    const convertBase64 = await base64(file);\r\n    const url = convertBase64.slice(28);\r\n    const position =\r\n      \"page=\" +\r\n      location.state.numberPage +\r\n      \",x=\" +\r\n      location.state.signLocationA.x +\r\n      \",y=\" +\r\n      location.state.signLocationA.y +\r\n      \"|page=\" +\r\n      location.state.numberPage +\r\n      \",x=\" +\r\n      location.state.signLocationB.x +\r\n      \",y=\" +\r\n      location.state.signLocationB.y;\r\n    const params = {\r\n      dateCreate: Moment(new Date()).format(\r\n        \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n      ),\r\n      creatorId: getUser().Id,\r\n      dateExpire: location.state.date,\r\n      title: location.state.data.title,\r\n      contractURL: url,\r\n      signLocation: position,\r\n    };\r\n    contractAPI\r\n      .addContract(params)\r\n      .then(function (res) {\r\n        const contractId = res.data.id;\r\n        const listSigner = [];\r\n        listSigner.push(location.state.data.signer.id);\r\n        listSigner.push(location.state.data.signer_guest.id);\r\n        const data = {\r\n          contractId: contractId,\r\n          listSignersId: listSigner,\r\n        };\r\n        axios\r\n          .put(\r\n            \"https://datnxeoffice.azurewebsites.net/api/contracts/addsignertocontract\",\r\n            data,\r\n            {\r\n              headers: {\r\n                Authorization: `Bearer ${getUser().IdToken}`,\r\n              },\r\n            }\r\n          )\r\n          .then(function (res) {\r\n            const listViewerId = [];\r\n            location.state.viewer.map((v) => {\r\n              listViewerId.push(v.id);\r\n            });\r\n            listViewerId.push(getUser().Id);\r\n            const viewer = {\r\n              contractId: contractId,\r\n              listViewersId: listViewerId,\r\n            };\r\n            axios\r\n              .put(\r\n                \"https://datnxeoffice.azurewebsites.net/api/contracts/addviewertocontract\",\r\n                viewer,\r\n                {\r\n                  headers: {\r\n                    Authorization: `Bearer ${getUser().IdToken}`,\r\n                  },\r\n                }\r\n              )\r\n              .then(function (res) {\r\n                toast.success(\"You has created contract successfully\", {\r\n                  position: toast.POSITION.TOP_CENTER,\r\n                });\r\n                history.push({\r\n                  pathname:\r\n                    \"/detail/contract/\" +\r\n                    contractId +\r\n                    \"/\" +\r\n                    location.state.data.title,\r\n                });\r\n              })\r\n              .catch(function (error) {\r\n                console.log(error);\r\n              });\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  function base64(file) {\r\n    return new Promise((resolve) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onload = () => {\r\n        resolve(fileReader.result);\r\n      };\r\n    });\r\n  }\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <StepContract activeStep={7} />\r\n      <main className=\"main-contract\">\r\n        <Container fluid>\r\n          <Row>\r\n            <Col>\r\n              <Paper style={{ marginTop: \"20px\" }} elevation={3}>\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                  }}\r\n                >\r\n                  Contract Content\r\n                </Label>\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={location.state.data.title}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <TitleIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={company.name}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <BusinessIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={signer.name}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <BorderColorIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={location.state.data.company_guest.name}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <BusinessIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={guest.name}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <BorderColorIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TableContainer>\r\n                  <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <StyledTableCell>Viewer name</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">Email</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">\r\n                          Phone number\r\n                        </StyledTableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {currentPosts.map((row) => (\r\n                        <StyledTableRow key={row.name}>\r\n                          <StyledTableCell component=\"th\" scope=\"row\">\r\n                            {row.name}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            {row.email}\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            {row.phone}\r\n                          </StyledTableCell>\r\n                        </StyledTableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                  component=\"div\"\r\n                  count={viewer.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  labelRowsPerPage=\"\"\r\n                  onChangePage={handleChangePage}\r\n                  rowsPerPageOptions={[]}\r\n                />\r\n\r\n                <TextField\r\n                  label=\"Date expiration\"\r\n                  value={moment(location.state.date).format(\r\n                    \"DD/MM/YYYY HH:mm:ss\"\r\n                  )}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <EventAvailableIcon color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </Paper>\r\n              <Button\r\n                style={{ marginTop: \"20px\", marginRight: \"10px\" }}\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                onClick={() => history.push(\"/document\")}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                style={{ marginTop: \"20px\" }}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={toogle}\r\n              >\r\n                Create\r\n              </Button>\r\n            </Col>\r\n            <Col>\r\n              <Form className=\"form-doc\">\r\n                <FormGroup row>\r\n                  <div>\r\n                    <PDF pdf={location.state.file[0]} />\r\n                  </div>\r\n                </FormGroup>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <Dialog\r\n          open={create}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          onClose={toogle}\r\n          disableBackdropClick\r\n          disableEscapeKeyDown\r\n          fullWidth\r\n        >\r\n          <DialogTitle>{\"Do you want create Contract?\"}</DialogTitle>\r\n          <DialogActions>\r\n            <Button onClick={toogle} color=\"secondary\" variant=\"contained\">\r\n              No\r\n            </Button>\r\n            <Button onClick={handleCreated} color=\"primary\" variant=\"contained\">\r\n              Yes\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default ContractContent;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\CreateContract.js",["232","233","234","235","236","237","238","239","240","241"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"../../css/CreateDoc.css\";\r\nimport VerticalLinearStepper from \"../Sidebar/Stepper\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport companyListAPI from \"../../api/companyListAPI\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport { getUser } from \"../../utils/Common\";\r\nimport demo from \"../../images/demo.png\";\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport EditLocationIcon from \"@material-ui/icons/EditLocation\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport BackupIcon from \"@material-ui/icons/Backup\";\r\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport \"date-fns\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Moment from \"moment\";\r\nimport { InputAdornment, Slide, Snackbar, Tooltip } from \"@material-ui/core\";\r\nimport TitleIcon from \"@material-ui/icons/Title\";\r\nimport { toast } from \"react-toastify\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nfunction TransitionLeft(props) {\r\n  return <Slide {...props} direction=\"right\" />;\r\n}\r\ntoast.configure();\r\nfunction CreateDocument() {\r\n  const [listCompany, setListCompany] = useState([]);\r\n  const [fileName, setFileName] = useState(\"\");\r\n  const [listSinger, setListSigner] = useState([]);\r\n  const [listGuest, setListGuest] = useState([]);\r\n  const history = useHistory();\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n  const [locaA, setLocaA] = useState(true);\r\n  const [locaB, setLocaB] = useState(true);\r\n  const [show, setShow] = useState(false);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [file, setFile] = useState([]);\r\n  const [dataUpload, setDataUpload] = useState({\r\n    title: \"\",\r\n    signer: null,\r\n    company_guest: \"\",\r\n    signer_guest: null,\r\n  });\r\n  const [alert, setAlert] = useState({\r\n    file: false,\r\n    title: false,\r\n    signerA: false,\r\n    signerB: false,\r\n    company: false,\r\n    date: false,\r\n    location: false,\r\n    message: \"\",\r\n  });\r\n  const [positionA, setPositionA] = useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const [positionB, setPositionB] = useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const [cursor, setCursor] = useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const [color, setColor] = useState({\r\n    signerA: \"#808080ad\",\r\n    signerB: \"#808080ad\",\r\n  });\r\n  const [viewer, setViewer] = useState([]);\r\n  const [viewerGuest, setViewerGuest] = useState([]);\r\n  const [numPages, setNumPages] = useState(\"\");\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n\r\n  function onDocumentLoadSuccess({ numPages }) {\r\n    setNumPages(numPages);\r\n    setPageNumber(1);\r\n  }\r\n  const handleChange = (event, value) => {\r\n    setPageNumber(value);\r\n  };\r\n\r\n  function handleOnChange(event) {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    setDataUpload({\r\n      ...dataUpload,\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetListCompany() {\r\n      try {\r\n        const response = await companyListAPI.getAll();\r\n        setListCompany(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetListCompany();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function fetListUser() {\r\n      const companyId = getUser().CompanyId;\r\n      try {\r\n        const response = await userListAPI.getUserByCompanyId(companyId);\r\n        setListSigner(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetListUser();\r\n  }, []);\r\n  useEffect(() => {\r\n    async function fetListGuest() {\r\n      const id = dataUpload.company_guest.id;\r\n      try {\r\n        const response = await userListAPI.getUserByCompanyId(id);\r\n        setListGuest(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetListGuest();\r\n  }, [dataUpload.company_guest]);\r\n\r\n  function handleContent() {\r\n    if (selectedDate === null) {\r\n      setAlert({\r\n        ...alert,\r\n        date: true,\r\n        message: \"Please select expiration date !!!\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(\r\n          {\r\n            ...alert,\r\n            date: false,\r\n            message: \"\",\r\n          },\r\n          3000\r\n        );\r\n      });\r\n    } else if (\r\n      Moment(selectedDate).format(\"DD-MM-YYYY\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\") <\r\n      Moment(new Date()).format(\"DD-MM-YYYY\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\")\r\n    ) {\r\n      setAlert({\r\n        ...alert,\r\n        date: true,\r\n        message: \"Expiration date can't less than current date !!!\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert({\r\n          ...alert,\r\n          date: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (positionA.x === 0 && positionA.y === 0) {\r\n      setAlert({\r\n        ...alert,\r\n        location: true,\r\n      });\r\n      setTimeout(() => {\r\n        setAlert({\r\n          ...alert,\r\n          location: false,\r\n        });\r\n      }, 3000);\r\n    } else if (positionB.x === 0 && positionB.y === 0) {\r\n      setAlert({\r\n        ...alert,\r\n        location: true,\r\n      });\r\n      setTimeout(() => {\r\n        setAlert({\r\n          ...alert,\r\n          location: false,\r\n        });\r\n      }, 3000);\r\n    } else {\r\n      const listViewer = [...viewer, ...viewerGuest];\r\n      history.push({\r\n        pathname: \"/contract-confirm\",\r\n        state: {\r\n          file: file,\r\n          data: dataUpload,\r\n          viewer: listViewer,\r\n          signLocationA: positionA,\r\n          signLocationB: positionB,\r\n          numberPage: pageNumber,\r\n          date: Moment(selectedDate).format(\r\n            \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n          ),\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  function getLocationA(e) {\r\n    setPositionA({\r\n      x: e.nativeEvent.offsetX,\r\n      y: e.nativeEvent.offsetY,\r\n    });\r\n    setLocaA(true);\r\n  }\r\n  function getLocationB(e) {\r\n    setPositionB({\r\n      x: e.nativeEvent.offsetX,\r\n      y: e.nativeEvent.offsetY,\r\n    });\r\n    setLocaB(true);\r\n  }\r\n\r\n  function handleA(e) {\r\n    e.preventDefault();\r\n    setColor({ ...color, signerA: \"#808080ad\" });\r\n    setPositionA({ x: 0, y: 0 });\r\n    setLocaA(!locaA);\r\n  }\r\n\r\n  function handleB(e) {\r\n    e.preventDefault();\r\n    setColor({ ...color, signerB: \"#808080ad\" });\r\n    setPositionB({ x: 0, y: 0 });\r\n    setLocaB(!locaB);\r\n  }\r\n  useEffect(() => {\r\n    addEventListeners();\r\n    return () => removeEventListeners();\r\n  }, []);\r\n\r\n  const addEventListeners = () => {\r\n    document.addEventListener(\"mousemove\", onMouseMove);\r\n  };\r\n\r\n  const removeEventListeners = () => {\r\n    document.removeEventListener(\"mousemove\", onMouseMove);\r\n  };\r\n  const onMouseMove = (e) => {\r\n    setCursor({ x: e.clientX, y: e.clientY });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <VerticalLinearStepper activeStep={activeStep} />\r\n      <main className=\"main-contract\">\r\n        <Snackbar\r\n          style={{ marginTop: 70 }}\r\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n          open={alert.location}\r\n          autoHideDuration={3000}\r\n          TransitionComponent={TransitionLeft}\r\n        >\r\n          <Alert variant=\"filled\" severity=\"error\">\r\n            Please choose location sign to continue...\r\n          </Alert>\r\n        </Snackbar>\r\n        <Container fluid={true}>\r\n          <div\r\n            hidden={locaA}\r\n            className=\"cursor\"\r\n            style={{\r\n              left: `${cursor.x}px`,\r\n              top: `${cursor.y}px`,\r\n            }}\r\n          />\r\n          <div\r\n            hidden={locaB}\r\n            className=\"cursor\"\r\n            style={{\r\n              left: `${cursor.x}px`,\r\n              top: `${cursor.y}px`,\r\n            }}\r\n          />\r\n          <Row>\r\n            <Col>\r\n              <Tooltip title=\"Choose location sign A\" placement=\"top-start\">\r\n                <IconButton\r\n                  style={{\r\n                    float: \"left\",\r\n                    background: color.signerA,\r\n                    marginTop: \"20px\",\r\n                  }}\r\n                  color=\"secondary\"\r\n                  onClick={handleA}\r\n                  hidden={pageNumber === 0 ? true : false}\r\n                >\r\n                  <EditLocationIcon color=\"error\" fontSize=\"large\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <Tooltip title=\"Choose location sign B\" placement=\"top-start\">\r\n                <IconButton\r\n                  style={{\r\n                    float: \"left\",\r\n                    background: color.signerB,\r\n                    marginLeft: \"20px\",\r\n                    marginTop: \"20px\",\r\n                  }}\r\n                  color=\"secondary\"\r\n                  onClick={handleB}\r\n                  hidden={pageNumber === 0 ? true : false}\r\n                >\r\n                  <EditLocationIcon color=\"error\" fontSize=\"large\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <div\r\n                hidden={activeStep === 0 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                  }}\r\n                >\r\n                  DOCUMENT INFORMATION\r\n                </Label>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Document type\"\r\n                  value=\"Contract\"\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <InsertDriveFileIcon fontSize=\"large\" color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n\r\n                <input\r\n                  accept=\"application/pdf\"\r\n                  id=\"icon-button-file\"\r\n                  type=\"file\"\r\n                  style={{ display: \"none\", width: 0 }}\r\n                  onChange={(e) => {\r\n                    if (e.target.files.length !== 0) {\r\n                      if (e.target.files[0].type !== \"application/pdf\") {\r\n                        setAlert({\r\n                          ...alert,\r\n                          file: true,\r\n                          message: \"Please choose file PDF...\",\r\n                        });\r\n                        setTimeout(() => {\r\n                          setAlert({\r\n                            ...alert,\r\n                            file: false,\r\n                            message: \"\",\r\n                          });\r\n                        }, 3000);\r\n                      } else if (e.target.files[0].size > 10485760) {\r\n                        setAlert({\r\n                          ...alert,\r\n                          file: true,\r\n                          message: \"File don't larger 10MB\",\r\n                        });\r\n                        setTimeout(() => {\r\n                          setAlert({\r\n                            ...alert,\r\n                            file: false,\r\n                            message: \"\",\r\n                          });\r\n                        }, 3000);\r\n                      } else {\r\n                        setFile(e.target.files);\r\n                        setFileName(e.target.files[0].name);\r\n                        setShow(true);\r\n                      }\r\n                    }\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Choose file\"\r\n                  error={alert.file}\r\n                  helperText={alert.message}\r\n                  value={fileName}\r\n                  fullWidth\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <label htmlFor=\"icon-button-file\">\r\n                          <IconButton color=\"primary\" component=\"span\">\r\n                            <BackupIcon fontSize=\"large\" />\r\n                          </IconButton>\r\n                        </label>\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                  style={{ marginTop: \"30px\" }}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (file.length === 0) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        file: true,\r\n                        message: \"Please choose file upload !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          file: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                  style={{ marginTop: \"30px\" }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 1 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                  }}\r\n                >\r\n                  TITLE OF CONTRACT\r\n                </Label>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Title Contract\"\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  required\r\n                  error={alert.title}\r\n                  helperText={alert.message}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <TitleIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={handleOnChange}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  hidden={activeStep === 0 ? true : false}\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (dataUpload.title.trim() === \"\") {\r\n                      setAlert({\r\n                        ...alert,\r\n                        title: true,\r\n                        message: \"Please input title of contract !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          title: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else if (dataUpload.title.length > 255) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        title: true,\r\n                        message: \"Title max length 255 characters !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          title: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 2 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                    marginBottom: \"30px\",\r\n                  }}\r\n                >\r\n                  SELECT SIGNER TO SIGN CONTRACT\r\n                </Label>\r\n                <Autocomplete\r\n                  id=\"combo-box-demo\"\r\n                  options={listSinger}\r\n                  getOptionLabel={(option) => option.name}\r\n                  onChange={(event, newValue) => {\r\n                    setDataUpload({ ...dataUpload, signer: newValue });\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label=\"Signer name\"\r\n                      variant=\"outlined\"\r\n                      name=\"signer\"\r\n                      error={alert.signerA}\r\n                      helperText={alert.message}\r\n                    />\r\n                  )}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (dataUpload.signer === null) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        signerA: true,\r\n                        message: \"Please choose one signer contract !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          signerA: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 3 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                    marginBottom: \"30px\",\r\n                  }}\r\n                >\r\n                  SELECT COMPANY GUEST\r\n                </Label>\r\n                <Autocomplete\r\n                  options={listCompany}\r\n                  getOptionLabel={(option) => option.name}\r\n                  onChange={(event, newValue) => {\r\n                    setDataUpload({ ...dataUpload, company_guest: newValue });\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label=\"Company guest\"\r\n                      variant=\"outlined\"\r\n                      name=\"company_guest\"\r\n                      error={alert.company}\r\n                      helperText={alert.message}\r\n                    />\r\n                  )}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (dataUpload.company_guest === \"\") {\r\n                      setAlert({\r\n                        ...alert,\r\n                        company: true,\r\n                        message: \"Please select company guest !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          company: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 4 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                    marginBottom: \"30px\",\r\n                  }}\r\n                >\r\n                  SELECT SIGNER GUEST\r\n                </Label>\r\n                <Autocomplete\r\n                  id=\"combo-box-demo\"\r\n                  options={listGuest}\r\n                  getOptionLabel={(option) => option.name}\r\n                  onChange={(event, newValue) => {\r\n                    setDataUpload({ ...dataUpload, signer_guest: newValue });\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label=\"Signer guest\"\r\n                      variant=\"outlined\"\r\n                      name=\"signer_guest\"\r\n                      error={alert.signerB}\r\n                      helperText={alert.message}\r\n                    />\r\n                  )}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={(e) => {\r\n                    if (dataUpload.signer_guest === null) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        signerB: true,\r\n                        message:\r\n                          \"Please choose one singer guest to sign contract !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          signerB: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 5 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Row>\r\n                  <Label\r\n                    style={{\r\n                      fontSize: \"30px\",\r\n                      fontWeight: \"bold\",\r\n                      color: \"blue\",\r\n                      float: \"left\",\r\n                      marginBottom: \"30px\",\r\n                      marginLeft: \"12px\",\r\n                    }}\r\n                  >\r\n                    VIEWER CAN VIEW CONTRACT\r\n                  </Label>\r\n                </Row>\r\n                <Row>\r\n                  <Col>\r\n                    <Autocomplete\r\n                      multiple\r\n                      id=\"tags-outlined\"\r\n                      options={listSinger}\r\n                      getOptionLabel={(option) => option.name}\r\n                      filterSelectedOptions\r\n                      onChange={(event, newValue) => {\r\n                        setViewer(newValue);\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          variant=\"outlined\"\r\n                          label=\"Select viewer\"\r\n                          placeholder=\"Viewer \"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Col>\r\n                  <Col>\r\n                    <Autocomplete\r\n                      multiple\r\n                      id=\"tags-outlined\"\r\n                      options={listGuest}\r\n                      getOptionLabel={(option) => option.name}\r\n                      filterSelectedOptions\r\n                      onChange={(event, newValue) => {\r\n                        setViewerGuest(newValue);\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          variant=\"outlined\"\r\n                          label=\"Select viewer\"\r\n                          placeholder=\"Viewer guest\"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setActiveStep(activeStep + 1);\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 6 ? false : true}\r\n                style={{ marginTop: \"15%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                  }}\r\n                >\r\n                  DATE EXPIRATION INVOICE\r\n                </Label>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid container justify=\"space-around\">\r\n                    <KeyboardDatePicker\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      id=\"date-picker-dialog\"\r\n                      label=\"Date expiration\"\r\n                      format=\"MM/dd/yyyy\"\r\n                      value={selectedDate}\r\n                      name=\"date\"\r\n                      error={alert.date}\r\n                      helperText={alert.message}\r\n                      onChange={handleDateChange}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  hidden={activeStep === 0 ? true : false}\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={handleContent}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n            <Col>\r\n              <Form className=\"form-doc\">\r\n                <FormGroup row>\r\n                  <div hidden={show} style={{ marginTop: \"4rem\" }}>\r\n                    <img src={demo} alt=\"demo\" width=\"600\" height=\"600\" />\r\n                  </div>\r\n                  <Paper elevation={3}>\r\n                    <Document\r\n                      file={file[0]}\r\n                      onLoadSuccess={onDocumentLoadSuccess}\r\n                      noData={false}\r\n                      onClick={(e) => {\r\n                        if (locaA === false) {\r\n                          getLocationA(e);\r\n                          setColor({ ...color, signerA: \"#3541da\" });\r\n                        } else if (locaB === false) {\r\n                          getLocationB(e);\r\n                          setColor({ ...color, signerB: \"#3541da\" });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Page pageNumber={pageNumber} />\r\n                    </Document>\r\n                  </Paper>\r\n                  <div\r\n                    hidden={pageNumber === 0 ? true : false}\r\n                    style={{ marginLeft: \"30%\" }}\r\n                  >\r\n                    <Typography\r\n                      style={{\r\n                        marginTop: \"5px\",\r\n                      }}\r\n                    >\r\n                      Page: {pageNumber}/{numPages}\r\n                    </Typography>\r\n                    <Pagination\r\n                      variant=\"outlined\"\r\n                      count={numPages}\r\n                      page={pageNumber}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </div>\r\n                </FormGroup>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default CreateDocument;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Notification\\Notification.js",["242","243"],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CreateDocument\\CreateInvoice.js",["244","245","246","247","248","249","250","251","252","253","254"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\r\nimport StepInvoice from \"../Sidebar/StepInvoice\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"../../css/CreateDoc.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getUser } from \"../../utils/Common\";\r\nimport demo from \"../../images/demo.png\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport EditLocationIcon from \"@material-ui/icons/EditLocation\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport BackupIcon from \"@material-ui/icons/Backup\";\r\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport \"date-fns\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Moment from \"moment\";\r\nimport { InputAdornment, Slide, Tooltip } from \"@material-ui/core\";\r\nimport TitleIcon from \"@material-ui/icons/Title\";\r\nimport { toast } from \"react-toastify\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\ntoast.configure();\r\nfunction TransitionLeft(props) {\r\n  return <Slide {...props} direction=\"right\" />;\r\n}\r\nfunction CreateInvoice() {\r\n  const history = useHistory();\r\n  const [listSinger, setListSigner] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [file, setFile] = useState([]);\r\n  const [color, setColor] = useState(\"#808080ad\");\r\n  const [alert, setAlert] = useState({\r\n    file: false,\r\n    title: false,\r\n    signer: false,\r\n    location: false,\r\n    date: false,\r\n    message: \"\",\r\n  });\r\n  const handleChange = (event, value) => {\r\n    setPageNumber(value);\r\n  };\r\n  const [fileName, setFileName] = useState(\"\");\r\n  const [dataUpload, setDataUpload] = useState({\r\n    title: \"\",\r\n    signer: null,\r\n  });\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n  const [position, setPosition] = useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const [cursor, setCursor] = useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const [viewer, setViewer] = useState([]);\r\n  const [numPages, setNumPages] = useState(\"\");\r\n  const [pageNumber, setPageNumber] = useState(0);\r\n  function onDocumentLoadSuccess({ numPages }) {\r\n    setNumPages(numPages);\r\n    setPageNumber(1);\r\n  }\r\n  function handleOnChange(event) {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    setDataUpload({\r\n      ...dataUpload,\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  function handleContent() {\r\n    const listViewerId = [getUser().Id];\r\n    viewer.map((view) => {\r\n      listViewerId.push(view.id);\r\n    });\r\n\r\n    if (selectedDate === null) {\r\n      setAlert({\r\n        ...alert,\r\n        date: true,\r\n        message: \"Please choose date expiration invoice\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert({\r\n          ...alert,\r\n          date: false,\r\n        });\r\n      }, 3000);\r\n    } else if (\r\n      Moment(selectedDate).format(\"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\") <\r\n      Moment(new Date()).format(\"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\")\r\n    ) {\r\n      setAlert({\r\n        ...alert,\r\n        date: true,\r\n        message: \"Expiration date can't less than current date\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert({\r\n          ...alert,\r\n          date: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (position.x === 0 && position.y === 0) {\r\n      setAlert({\r\n        ...alert,\r\n        location: true,\r\n      });\r\n      setTimeout(() => {\r\n        setAlert({\r\n          ...alert,\r\n          location: false,\r\n        });\r\n      }, 3000);\r\n    } else {\r\n      history.push({\r\n        pathname: \"/invoice-confirm\",\r\n        state: {\r\n          file: file,\r\n          data: dataUpload,\r\n          date: Moment(selectedDate).format(\r\n            \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n          ),\r\n          viewer: viewer,\r\n          listViewerId: listViewerId,\r\n          signLocation: position,\r\n          numberPage: pageNumber,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const companyId = getUser().CompanyId;\r\n    async function fetListUser() {\r\n      try {\r\n        const response = await userListAPI.getUserByCompanyId(companyId);\r\n        setListSigner(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetListUser();\r\n  }, []);\r\n  const [locaA, setLocaA] = useState(true);\r\n  function choseLocation(e) {\r\n    e.preventDefault();\r\n    setColor(\"#808080ad\");\r\n    setPosition({ x: 0, y: 0 });\r\n    setLocaA(!locaA);\r\n  }\r\n  function getLocation(e) {\r\n    setPosition({\r\n      x: e.nativeEvent.offsetX,\r\n      y: e.nativeEvent.offsetY,\r\n    });\r\n    setLocaA(true);\r\n  }\r\n  useEffect(() => {\r\n    addEventListeners();\r\n    return () => removeEventListeners();\r\n  }, []);\r\n\r\n  const addEventListeners = () => {\r\n    document.addEventListener(\"mousemove\", onMouseMove);\r\n  };\r\n\r\n  const removeEventListeners = () => {\r\n    document.removeEventListener(\"mousemove\", onMouseMove);\r\n  };\r\n  const onMouseMove = (e) => {\r\n    setCursor({ x: e.clientX, y: e.clientY });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <StepInvoice activeStep={activeStep} />\r\n      <main className=\"main-invoice\">\r\n        <Snackbar\r\n          style={{ marginTop: 70 }}\r\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n          open={alert.location}\r\n          autoHideDuration={3000}\r\n          TransitionComponent={TransitionLeft}\r\n        >\r\n          <Alert variant=\"filled\" severity=\"error\">\r\n            Please choose location sign to continue\r\n          </Alert>\r\n        </Snackbar>\r\n\r\n        <Container fluid={true}>\r\n          <div\r\n            hidden={locaA}\r\n            className=\"cursor\"\r\n            style={{\r\n              left: `${cursor.x}px`,\r\n              top: `${cursor.y}px`,\r\n            }}\r\n          />\r\n          <Row>\r\n            <Col className=\"form-upload\">\r\n              <Tooltip title=\"Select location sign\" placement=\"right\">\r\n                <IconButton\r\n                  style={{ float: \"left\", background: color }}\r\n                  color=\"secondary\"\r\n                  onClick={choseLocation}\r\n                  hidden={pageNumber === 0 ? true : false}\r\n                >\r\n                  <EditLocationIcon color=\"error\" fontSize=\"large\" />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <div\r\n                hidden={activeStep === 0 ? false : true}\r\n                style={{ marginTop: \"10%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                  }}\r\n                >\r\n                  DOCUMENT INFORMATION\r\n                </Label>\r\n\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Document type\"\r\n                  value=\"Invoice\"\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <InsertDriveFileIcon fontSize=\"large\" color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n\r\n                <input\r\n                  accept=\".pdf\"\r\n                  id=\"icon-button-file\"\r\n                  type=\"file\"\r\n                  style={{ display: \"none\", width: 0 }}\r\n                  onChange={(e) => {\r\n                    if (e.target.files.length !== 0) {\r\n                      if (e.target.files[0].type !== \"application/pdf\") {\r\n                        setAlert({\r\n                          ...alert,\r\n                          file: true,\r\n                          message: \"Please choose file PDF\",\r\n                        });\r\n                        setTimeout(() => {\r\n                          setAlert({\r\n                            ...alert,\r\n                            file: false,\r\n                            message: \"\",\r\n                          });\r\n                        }, 3000);\r\n                      } else if (e.target.files[0].size > 10485760) {\r\n                        setAlert({\r\n                          ...alert,\r\n                          file: true,\r\n                          message: \"File don't larger 10MB\",\r\n                        });\r\n                        setTimeout(() => {\r\n                          setAlert({\r\n                            ...alert,\r\n                            file: false,\r\n                            message: \"\",\r\n                          });\r\n                        }, 3000);\r\n                      } else {\r\n                        setFile(e.target.files);\r\n                        setFileName(e.target.files[0].name);\r\n                        setShow(true);\r\n                      }\r\n                    }\r\n                  }}\r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Choose file\"\r\n                  error={alert.file}\r\n                  helperText={alert.message}\r\n                  value={fileName}\r\n                  fullWidth\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <label htmlFor=\"icon-button-file\">\r\n                          <IconButton color=\"primary\" component=\"span\">\r\n                            <BackupIcon fontSize=\"large\" />\r\n                          </IconButton>\r\n                        </label>\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                  style={{ marginTop: \"30px\" }}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (file.length === 0) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        file: true,\r\n                        message: \"Please choose file upload !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          file: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                  style={{ marginTop: \"30px\" }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 1 ? false : true}\r\n                style={{ marginTop: \"10%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                  }}\r\n                >\r\n                  TITLE OF INVOICE\r\n                </Label>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  label=\"Title invoice\"\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  required\r\n                  error={alert.title}\r\n                  helperText={alert.message}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <TitleIcon color=\"primary\" fontSize=\"large\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={handleOnChange}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  hidden={activeStep === 0 ? true : false}\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (dataUpload.title.trim() === \"\") {\r\n                      setAlert({\r\n                        ...alert,\r\n                        title: true,\r\n                        message: \"Please input title invoice\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          title: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else if (dataUpload.title.length > 255) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        title: true,\r\n                        message: \"Title max length 255 characters !!!\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          title: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 2 ? false : true}\r\n                style={{ marginTop: \"10%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                    marginBottom: \"30px\",\r\n                  }}\r\n                >\r\n                  SELECT SIGNER TO SIGN INVOICE\r\n                </Label>\r\n                <Autocomplete\r\n                  id=\"combo-box-demo\"\r\n                  options={listSinger}\r\n                  getOptionLabel={(option) => option.name}\r\n                  onChange={(event, newValue) => {\r\n                    setDataUpload({ ...dataUpload, signer: newValue });\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label=\"Signer name\"\r\n                      variant=\"outlined\"\r\n                      name=\"signer\"\r\n                      error={alert.signer}\r\n                      helperText={alert.message}\r\n                    />\r\n                  )}\r\n                />\r\n\r\n                <Button\r\n                  variant=\"contained\"\r\n                  hidden={activeStep === 0 ? true : false}\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (dataUpload.signer === null) {\r\n                      setAlert({\r\n                        ...alert,\r\n                        signer: true,\r\n                        message: \"Please select a signer to sign invoice\",\r\n                      });\r\n                      setTimeout(() => {\r\n                        setAlert({\r\n                          ...alert,\r\n                          signer: false,\r\n                          message: \"\",\r\n                        });\r\n                      }, 3000);\r\n                    } else {\r\n                      setActiveStep(activeStep + 1);\r\n                    }\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 3 ? false : true}\r\n                style={{ marginTop: \"10%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                    marginBottom: \"30px\",\r\n                  }}\r\n                >\r\n                  VIEWER CAN VIEW INVOICE\r\n                </Label>\r\n                <Autocomplete\r\n                  multiple\r\n                  id=\"tags-outlined\"\r\n                  options={listSinger}\r\n                  getOptionLabel={(option) => option.name}\r\n                  filterSelectedOptions\r\n                  onChange={(event, newValue) => {\r\n                    setViewer(newValue);\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      variant=\"outlined\"\r\n                      label=\"Select viewer\"\r\n                      placeholder=\"Viewer\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  hidden={activeStep === 0 ? true : false}\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setActiveStep(activeStep + 1);\r\n                  }}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n              <div\r\n                hidden={activeStep === 4 ? false : true}\r\n                style={{ marginTop: \"10%\" }}\r\n              >\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                    float: \"left\",\r\n                  }}\r\n                >\r\n                  DATE EXPIRATION INVOICE\r\n                </Label>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid container justify=\"space-around\">\r\n                    <KeyboardDatePicker\r\n                      fullWidth\r\n                      margin=\"normal\"\r\n                      id=\"date-picker-dialog\"\r\n                      label=\"Date expiration\"\r\n                      format=\"MM/dd/yyyy\"\r\n                      value={selectedDate}\r\n                      name=\"date\"\r\n                      error={alert.date}\r\n                      helperText={alert.message}\r\n                      onChange={handleDateChange}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  hidden={activeStep === 0 ? true : false}\r\n                  color=\"primary\"\r\n                  style={{ marginTop: \"30px\" }}\r\n                  onClick={() => setActiveStep(activeStep - 1)}\r\n                >\r\n                  Back\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\r\n                  color=\"primary\"\r\n                  onClick={handleContent}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n            <Col>\r\n              <Form className=\"form-doc\">\r\n                <FormGroup row>\r\n                  <div hidden={show} style={{ marginTop: \"4rem\" }}>\r\n                    <img src={demo} alt=\"demo\" width=\"600\" height=\"600\" />\r\n                  </div>\r\n\r\n                  <Paper elevation={3}>\r\n                    <Document\r\n                      file={file[0]}\r\n                      onLoadSuccess={onDocumentLoadSuccess}\r\n                      onClick={(e) => {\r\n                        if (locaA === false) {\r\n                          getLocation(e);\r\n                          setColor(\"#3541da\");\r\n                        }\r\n                      }}\r\n                      noData={false}\r\n                    >\r\n                      <Page pageNumber={pageNumber} />\r\n                    </Document>\r\n                  </Paper>\r\n                  <div\r\n                    hidden={pageNumber === 0 ? true : false}\r\n                    style={{ marginLeft: \"30%\" }}\r\n                  >\r\n                    <Typography\r\n                      style={{\r\n                        marginTop: \"5px\",\r\n                      }}\r\n                    >\r\n                      Page: {pageNumber}/{numPages}\r\n                    </Typography>\r\n                    <Pagination\r\n                      variant=\"outlined\"\r\n                      count={numPages}\r\n                      page={pageNumber}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </div>\r\n                </FormGroup>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default CreateInvoice;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Document\\Document.js",["255","256","257","258","259","260","261","262","263"],"import {\r\n  Container,\r\n  Row,\r\n  FormGroup,\r\n  Col,\r\n  Table,\r\n  Label,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalFooter,\r\n} from \"reactstrap\";\r\n\r\nimport \"../../css/Document.css\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport { forwardRef, useEffect, useState } from \"react\";\r\nimport notsigned from \"../../images/status.png\";\r\nimport done from \"../../images/true.png\";\r\nimport invoicecompleted from \"../../images/invoicecompleted.png\";\r\nimport choo from \"../../images/choo.png\";\r\nimport invoiceAPI from \"../../api/invoiceAPI\";\r\nimport GetCreater from \"../GetData/GetCreater\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport contractAPI from \"../../api/contractAPI\";\r\nimport { getUser } from \"../../utils/Common\";\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Moment from \"moment\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport { InputAdornment } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport InvoiceStepper from \"../Stepper/InvoiceStepper\";\r\nimport ContractStepper from \"../Stepper/ContractStepper\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"down\" ref={ref} {...props} />;\r\n});\r\nfunction Document() {\r\n  const history = useHistory();\r\n  let [loading, setLoading] = useState(true);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [dele, setDel] = useState(false);\r\n  const toogle = () => setIsOpen(!isOpen);\r\n  const [filter, setFilter] = useState(\"1\");\r\n  const [postList, setPostList] = useState([]);\r\n  const [listAllDocument, setListAllDocument] = useState([]);\r\n  const [listInvoice, setListInvoice] = useState([]);\r\n  const [listContract, setListContract] = useState([]);\r\n  const [find, setFind] = useState(\"\");\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage] = useState(10);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n\r\n  var post = postList\r\n    .sort((a, b) => {\r\n      return (\r\n        new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\r\n      );\r\n    })\r\n    .reverse();\r\n  const currentPosts = post.slice(indexOfFirstPost, indexOfLastPost);\r\n  function changePage(event, newPage) {\r\n    setPage(newPage);\r\n  }\r\n  const [value, setValue] = useState(0);\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function getListDocument() {\r\n      try {\r\n        if (getUser().Role === \"1\") {\r\n          await contractAPI\r\n            .getContractByCompanyId(getUser().CompanyId)\r\n            .then(function (contract) {\r\n              invoiceAPI\r\n                .getInvoiceByCompanyId(getUser().CompanyId)\r\n                .then(function (invoice) {\r\n                  const list = [...contract.data, ...invoice.data];\r\n                  setListAllDocument(list);\r\n                  setPostList(list);\r\n                  setListInvoice(invoice.data);\r\n                  setListContract(contract.data);\r\n                  setTimeout(() => {\r\n                    setLoading(false);\r\n                  }, 2000);\r\n                })\r\n                .catch(function (error) {\r\n                  console.log(error);\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n            });\r\n        } else {\r\n          await invoiceAPI\r\n            .getInvoiceByViewerId(getUser().Id)\r\n            .then(function (res1) {\r\n              invoiceAPI\r\n                .getInvoiceBySignerId(getUser().Id)\r\n                .then(function (res2) {\r\n                  contractAPI\r\n                    .getContractByViewerId(getUser().Id)\r\n                    .then(function (res3) {\r\n                      contractAPI\r\n                        .getContractBySignerId(getUser().Id)\r\n                        .then(function (res4) {\r\n                          const list = [\r\n                            ...res1.data,\r\n                            ...res2.data,\r\n                            ...res3.data,\r\n                            ...res4.data,\r\n                          ];\r\n                          const listInvoice1 = [...res1.data, ...res2.data];\r\n                          const listContract1 = [...res3.data, ...res4.data];\r\n                          setListAllDocument(list);\r\n                          setPostList(list);\r\n                          setListInvoice(listInvoice1);\r\n                          setListContract(listContract1);\r\n                          setTimeout(() => {\r\n                            setLoading(false);\r\n                          }, 2000);\r\n                        })\r\n                        .catch(function (error) {\r\n                          console.log(error);\r\n                        });\r\n                    })\r\n                    .catch(function (error) {\r\n                      console.log(error);\r\n                    });\r\n                })\r\n                .catch(function (error) {\r\n                  console.log(error);\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n            });\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getListDocument();\r\n  }, []);\r\n\r\n  function AddContract() {\r\n    history.push(\"/contract\");\r\n  }\r\n  function AddInvoice() {\r\n    history.push(\"/invoice\");\r\n  }\r\n\r\n  function All() {\r\n    setPage(0);\r\n    setPostList(listAllDocument);\r\n    setValue(0);\r\n  }\r\n  function Invoice() {\r\n    setPage(0);\r\n    setPostList(\r\n      listAllDocument.filter((data) => {\r\n        if (data.invoiceURL) {\r\n          return data;\r\n        }\r\n      })\r\n    );\r\n    setValue(0);\r\n  }\r\n  function Contract() {\r\n    setPage(0);\r\n    setPostList(\r\n      listAllDocument.filter((data) => {\r\n        if (data.contractUrl) {\r\n          return data;\r\n        }\r\n      })\r\n    );\r\n\r\n    setValue(0);\r\n  }\r\n  function Signed() {\r\n    setPage(0);\r\n    if (filter === \"1\") {\r\n      setPostList(\r\n        listAllDocument.filter((data) => {\r\n          if (data.status === 2) {\r\n            return data;\r\n          }\r\n        })\r\n      );\r\n    } else if (filter === \"2\") {\r\n      setPostList(\r\n        listContract.filter((data) => {\r\n          if (data.status === 2) {\r\n            return data;\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      setPostList(\r\n        listInvoice.filter((data) => {\r\n          if (data.status === 2) {\r\n            return data;\r\n          }\r\n        })\r\n      );\r\n    }\r\n  }\r\n  function NotSigned() {\r\n    setPage(0);\r\n    if (filter === \"1\") {\r\n      setPostList(\r\n        listAllDocument.filter((data) => {\r\n          if (data.status < 2) {\r\n            return data;\r\n          }\r\n        })\r\n      );\r\n    } else if (filter === \"2\") {\r\n      setPostList(\r\n        listContract.filter((data) => {\r\n          if (data.status < 2) {\r\n            return data;\r\n          }\r\n        })\r\n      );\r\n    } else {\r\n      setPostList(\r\n        listInvoice.filter((data) => {\r\n          if (data.status < 2) {\r\n            return data;\r\n          }\r\n        })\r\n      );\r\n    }\r\n  }\r\n  const [documentDelete, setDocumentDelete] = useState(\"\");\r\n  function deleteDocument(e) {\r\n    e.preventDefault();\r\n    if (documentDelete.invoiceURL) {\r\n      invoiceAPI\r\n        .deleteInvoice(documentDelete.id)\r\n        .then(function () {\r\n          toast.success(\"Delete document successfully\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          setDel(false);\r\n          setTimeout(() => {\r\n            window.location.reload();\r\n          }, 3000);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n      contractAPI\r\n        .deleteContract(documentDelete.id)\r\n        .then(function () {\r\n          toast.success(\"Delete document successfully\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          setDel(false);\r\n          setTimeout(() => {\r\n            window.location.reload();\r\n          }, 3000);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <main className=\"main-panel\">\r\n        <Dialog open={isOpen} onClose={toogle} TransitionComponent={Transition}>\r\n          <DialogContent>\r\n            <img\r\n              style={{ marginLeft: \"20%\" }}\r\n              src={choo}\r\n              alt=\"\"\r\n              width=\"280px\"\r\n              height=\"280px\"\r\n            />\r\n          </DialogContent>\r\n          <DialogTitle>\r\n            Please select the type of document you want create?\r\n          </DialogTitle>\r\n          <DialogActions style={{ paddingBottom: \"30px\" }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ marginRight: \"15%\" }}\r\n              onClick={AddContract}\r\n            >\r\n              Contract\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ marginRight: \"20%\", width: \"104px\" }}\r\n              onClick={AddInvoice}\r\n            >\r\n              Invoice\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Container fluid={true}>\r\n          <div className=\"form-create\">\r\n            <FormGroup row>\r\n              <Button\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                onClick={toogle}\r\n              >\r\n                +Create\r\n              </Button>\r\n              <Col>\r\n                <Row>\r\n                  <TextField\r\n                    name=\"search\"\r\n                    type=\"text\"\r\n                    variant=\"outlined\"\r\n                    value={find}\r\n                    placeholder=\"Search by name document\"\r\n                    onChange={(event) => {\r\n                      setFind(event.target.value);\r\n                    }}\r\n                    size=\"small\"\r\n                    fullWidth\r\n                    style={{ marginLeft: 20 }}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <SearchIcon color=\"primary\" />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Row>\r\n              </Col>\r\n\r\n              <FormControl\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                style={{ marginLeft: 20 }}\r\n              >\r\n                <Select\r\n                  defaultValue={1}\r\n                  onChange={(e) => setFilter(e.target.value)}\r\n                >\r\n                  <MenuItem onClick={All} value=\"1\">\r\n                    All\r\n                  </MenuItem>\r\n                  <MenuItem onClick={Contract} value=\"2\">\r\n                    Contract\r\n                  </MenuItem>\r\n                  <MenuItem onClick={Invoice} value=\"3\">\r\n                    Invoice\r\n                  </MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <Col>\r\n                <Row>\r\n                  <Paper\r\n                    square\r\n                    elevation={0}\r\n                    style={{ position: \"absolute\", right: 0, height: 40 }}\r\n                  >\r\n                    <Tabs\r\n                      value={value}\r\n                      indicatorColor=\"primary\"\r\n                      textColor=\"primary\"\r\n                      onChange={handleChange}\r\n                    >\r\n                      <Tab\r\n                        style={{ fontWeight: \"bold\" }}\r\n                        value={3}\r\n                        onClick={Signed}\r\n                        label=\"Signed\"\r\n                      />\r\n                      <Tab\r\n                        style={{ fontWeight: \"bold\" }}\r\n                        value={2}\r\n                        onClick={NotSigned}\r\n                        label=\"Not signed\"\r\n                      />\r\n                    </Tabs>\r\n                  </Paper>\r\n                </Row>\r\n              </Col>\r\n            </FormGroup>\r\n            <TablePagination\r\n              hidden={find !== \"\" ? true : false}\r\n              component=\"div\"\r\n              count={postList.length}\r\n              page={page}\r\n              onChangePage={changePage}\r\n              rowsPerPage={rowsPerPage}\r\n              labelRowsPerPage=\"\"\r\n              rowsPerPageOptions={[]}\r\n            />\r\n          </div>\r\n          {loading ? (\r\n            <ScaleLoader color={\"#2512DF\"} loading={loading} size={40} />\r\n          ) : (\r\n            <Table hidden={find !== \"\" ? true : false} hover>\r\n              <tbody>\r\n                {currentPosts.map((doc, key) => (\r\n                  <tr key={key}>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (doc.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        } else if (doc.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}>Creator name</Label>\r\n                      <br />\r\n                      <Label className=\"demo-2\">\r\n                        <GetCreater id={doc.creatorId} />\r\n                      </Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (doc.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        } else if (doc.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}>\r\n                        Title document\r\n                      </Label>\r\n                      <br />\r\n                      <Label className=\"demo demo-2\">{doc.title}</Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (doc.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        } else if (doc.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}>Status</Label>\r\n                      <br />\r\n                      <Label className=\"step\">\r\n                        {doc.contractUrl ? (\r\n                          <ContractStepper value={doc.status} />\r\n                        ) : (\r\n                          <div style={{marginRight:80}}>\r\n                            <InvoiceStepper\r\n                              value={doc.status === 2 ? 1 : doc.status}\r\n                            />\r\n                          </div>\r\n                        )}\r\n                      </Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (doc.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        } else if (doc.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label></Label>\r\n                      <br />\r\n                      <Label>\r\n                        {doc.invoiceURL ? (\r\n                          <img\r\n                            hidden={doc.status === 2 ? false : true}\r\n                            src={invoicecompleted}\r\n                            alt=\"\"\r\n                          />\r\n                        ) : (\r\n                          <img\r\n                            hidden={doc.status === 2 ? false : true}\r\n                            src={done}\r\n                            alt=\"\"\r\n                          />\r\n                        )}\r\n                        <img\r\n                          hidden={doc.status < 2 ? false : true}\r\n                          src={notsigned}\r\n                          alt=\"\"\r\n                        />\r\n                      </Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (doc.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        } else if (doc.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\r\n                            state: doc,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}></Label>\r\n                      <br />\r\n                      <Label>\r\n                        {Moment(doc.dateCreate).format(\"DD/MM/YYYY HH:mm:ss\")}\r\n                      </Label>\r\n                    </td>\r\n                    <td>\r\n                      <Label></Label>\r\n                      <br />\r\n                      <Label hidden={doc.status < 2 ? false : true}>\r\n                        <DeleteIcon\r\n                          onClick={() => {\r\n                            setDel(true);\r\n                            setDocumentDelete(doc);\r\n                          }}\r\n                          fontSize=\"default\"\r\n                          style={{ cursor: \"pointer\" }}\r\n                        />\r\n                      </Label>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          )}\r\n          <Table hover hidden={find === \"\" ? true : false}>\r\n            <tbody>\r\n              {postList\r\n                .filter((data) => {\r\n                  if (data.title.toLowerCase().includes(find.toLowerCase())) {\r\n                    return data;\r\n                  }\r\n                })\r\n                .map((data, key) => (\r\n                  <tr key={key}>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (data.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        } else if (data.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}>Creator name</Label>\r\n                      <br />\r\n                      <Label className=\"demo-2\">\r\n                        <GetCreater id={data.creatorId} />\r\n                      </Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (data.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        } else if (data.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}>\r\n                        Title document\r\n                      </Label>\r\n                      <br />\r\n                      <Label className=\"demo demo-2\">{data.title}</Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (data.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        } else if (data.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}>Status</Label>\r\n                      <br />\r\n                      <Label className=\"step\">\r\n                        {data.contractUrl ? (\r\n                          <ContractStepper value={data.status} />\r\n                        ) : (\r\n                          <div style={{marginRight:80}}>\r\n                            <InvoiceStepper\r\n                              value={data.status === 2 ? 1 : data.status}\r\n                            />\r\n                          </div>\r\n                        )}\r\n                      </Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (data.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        } else if (data.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label></Label>\r\n                      <br />\r\n                      <Label>\r\n                        {data.invoiceURL ? (\r\n                          <img\r\n                            hidden={data.status === 2 ? false : true}\r\n                            src={invoicecompleted}\r\n                            alt=\"\"\r\n                          />\r\n                        ) : (\r\n                          <img\r\n                            hidden={data.status === 2 ? false : true}\r\n                            src={done}\r\n                            alt=\"\"\r\n                          />\r\n                        )}\r\n                        <img\r\n                          hidden={data.status < 2 ? false : true}\r\n                          src={notsigned}\r\n                          alt=\"\"\r\n                        />\r\n                      </Label>\r\n                    </td>\r\n                    <td\r\n                      onClick={() => {\r\n                        if (data.contractUrl) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        } else if (data.invoiceURL) {\r\n                          history.push({\r\n                            pathname:\r\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\r\n                            state: data,\r\n                          });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Label style={{ fontWeight: \"bold\" }}></Label>\r\n                      <br />\r\n                      <Label>\r\n                        {Moment(data.dateCreate).format(\"DD/MM/YYYY\")}\r\n                      </Label>\r\n                    </td>\r\n                    <td>\r\n                      <Label></Label>\r\n                      <br />\r\n                      <Label hidden={data.status < 2 ? false : true}>\r\n                        <DeleteIcon\r\n                          onClick={() => {\r\n                            setDel(true);\r\n                            setDocumentDelete(data);\r\n                          }}\r\n                          fontSize=\"default\"\r\n                          style={{ cursor: \"pointer\" }}\r\n                        />\r\n                      </Label>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </Table>\r\n          <Modal isOpen={dele}>\r\n            <ModalHeader>Are you sure delete document?</ModalHeader>\r\n            <ModalFooter>\r\n              <Button\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                style={{ marginRight: \"5px\" }}\r\n                onClick={() => setDel(!dele)}\r\n              >\r\n                No\r\n              </Button>\r\n              <Button\r\n                onClick={deleteDocument}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n              >\r\n                Yes\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default Document;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\DetailDocument\\ContractDetail.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\DetailDocument\\InvoiceDetail.js",["264"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\r\nimport StepDetail from \"../Sidebar/StepDetail\";\r\nimport PDF from \"../PDF/PDF\";\r\nimport notsigned from \"../../images/status.png\";\r\nimport done from \"../../images/invoicecompleted.png\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport invoiceAPI from \"../../api/invoiceAPI\";\r\nimport GetCreater from \"../GetData/GetCreater\";\r\nimport fileDownload from \"js-file-download\";\r\nimport axios from \"axios\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { InputAdornment, TablePagination } from \"@material-ui/core\";\r\nimport TitleIcon from \"@material-ui/icons/Title\";\r\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport \"date-fns\";\r\nimport Moment from \"moment\";\r\nimport EventAvailableIcon from \"@material-ui/icons/EventAvailable\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport GetEmail from \"../GetData/GetEmail\";\r\nimport GetPhone from \"../GetData/GetPhone\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport printJS from \"print-js\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: theme.palette.common.black,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction InvoiceDetail() {\r\n  const [activeStep, setActiveStep] = useState(1);\r\n  const [document, setDocument] = useState([]);\r\n  const [signer, setSigner] = useState([]);\r\n  const [viewer, setViewer] = useState([]);\r\n  const [signerId, setSignerId] = useState();\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage] = useState(2);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n  const currentPosts = viewer.slice(indexOfFirstPost, indexOfLastPost);\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  const param = useParams();\r\n  useEffect(() => {\r\n    async function getInvoiceById() {\r\n      try {\r\n        const res = await invoiceAPI.getInvoiceById(param.id);\r\n        setDocument(res.data);\r\n        setViewer(res.data.viewers);\r\n        setActiveStep(res.data.status + 1);\r\n        setSignerId(res.data.signerId);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getInvoiceById();\r\n  }, []);\r\n  useEffect(() => {\r\n    async function getSigner() {\r\n      try {\r\n        const res = await userListAPI.getUserById(signerId);\r\n        setSigner(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getSigner();\r\n  }, [signerId]);\r\n\r\n  function printFile() {\r\n    printJS({\r\n      printable: document.invoiceURL,\r\n      type: \"pdf\",\r\n    });\r\n  }\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <StepDetail activeStep={activeStep} />\r\n      <main className=\"main-invoice\">\r\n        <Container fluid={true}>\r\n          <Row>\r\n            <Col>\r\n              <Paper style={{ marginTop: \"20px\" }} elevation={3}>\r\n                <Label\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"blue\",\r\n                  }}\r\n                >\r\n                  Invoice Content\r\n                </Label>\r\n                <br />\r\n                <Label style={{ marginTop: \"10px\" }}>\r\n                  <img\r\n                    hidden={document.status === 3 ? false : true}\r\n                    src={done}\r\n                    alt=\"\"\r\n                  />\r\n                  <img\r\n                    hidden={document.status !== 3 ? false : true}\r\n                    src={notsigned}\r\n                    alt=\"\"\r\n                  />\r\n                </Label>\r\n\r\n                <TextField\r\n                  variant=\"standard\"\r\n                  value={document.title}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <TitleIcon color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n                <TextField\r\n                  value={signer.name}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <BorderColorIcon color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n\r\n                <TableContainer style={{ marginTop: \"20px\", padding: \"10px\" }}>\r\n                  <Table aria-label=\"customized table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <StyledTableCell>Viewer name</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">Email</StyledTableCell>\r\n                        <StyledTableCell align=\"center\">\r\n                          Phone number\r\n                        </StyledTableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {currentPosts.map((row) => (\r\n                        <StyledTableRow key={row.viewerId}>\r\n                          <StyledTableCell component=\"th\" scope=\"row\">\r\n                            <GetCreater id={row.viewerId} />\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            <GetEmail id={row.viewerId} />\r\n                          </StyledTableCell>\r\n                          <StyledTableCell align=\"center\">\r\n                            <GetPhone id={row.viewerId} />\r\n                          </StyledTableCell>\r\n                        </StyledTableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                  component=\"div\"\r\n                  count={viewer.length}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  labelRowsPerPage=\"\"\r\n                  onChangePage={handleChangePage}\r\n                  rowsPerPageOptions={[]}\r\n                />\r\n                <TextField\r\n                  label=\"Date expiration\"\r\n                  value={Moment(document.dateSign).format(\r\n                    \"DD/MM/YYYY HH:mm:ss\"\r\n                  )}\r\n                  fullWidth\r\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <EventAvailableIcon color=\"primary\" />\r\n                      </InputAdornment>\r\n                    ),\r\n                    readOnly: true,\r\n                  }}\r\n                />\r\n              </Paper>\r\n              <Button\r\n                hidden={activeStep >= 3 ? false : true}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                style={{ marginTop: \"20px\", marginRight: \"10px\" }}\r\n                startIcon={<SaveIcon />}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  axios\r\n                    .get(document.invoiceURL, {\r\n                      responseType: \"blob\",\r\n                    })\r\n                    .then(function (res) {\r\n                      fileDownload(res.data, document.title + \".pdf\");\r\n                    })\r\n                    .catch(function (error) {\r\n                      console.log(error);\r\n                    });\r\n                }}\r\n              >\r\n                Save\r\n              </Button>\r\n              <Button\r\n                hidden={activeStep >= 3 ? false : true}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                style={{ marginTop: \"20px\" }}\r\n                startIcon={<PrintIcon />}\r\n                onClick={printFile}\r\n              >\r\n                Print\r\n              </Button>\r\n            </Col>\r\n\r\n            <Col>\r\n              <Form className=\"form-doc\">\r\n                <FormGroup row>\r\n                  <div>\r\n                    <PDF pdf={document.invoiceURL} />\r\n                  </div>\r\n                </FormGroup>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default InvoiceDetail;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminCompany\\DepartmentManagement\\DepartmentManagement.js",["265","266","267","268","269","270","271","272","273","274","275","276"],"import { forwardRef, useEffect, useState } from \"react\";\r\nimport { Container, Col, Row, Label, Table } from \"reactstrap\";\r\nimport \"../../../css/Department.css\";\r\nimport departmentAPI from \"../../../api/departmentAPI\";\r\nimport { getUser } from \"../../../utils/Common\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport Moment from \"moment\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport PeopleAltIcon from \"@material-ui/icons/PeopleAlt\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport {\r\n  Button,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  Paper,\r\n  Slide,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport Navbar from \"../../Navbar/Navbar\";\r\nimport moment from \"moment\";\r\nconst Transition = forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"down\" ref={ref} {...props} />;\r\n});\r\nfunction DepartmentManagerment() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isOpen2, setIsOpen2] = useState(false);\r\n  const [isOpen3, setIsOpen3] = useState(false);\r\n  const [isOpen4, setIsOpen4] = useState(false);\r\n  const [openEditDepart, setOpenEditDepart] = useState(false);\r\n  const [openEditSubDepart, setOpenEditSubDepart] = useState(false);\r\n  const [listChild, setListChild] = useState([]);\r\n  const [listDepartment, setListDepartment] = useState([]);\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [child_department, setChild_Department] = useState(\"\");\r\n  const [departmentID, setDepartmentID] = useState([]);\r\n  const [sub_departmentID, setSub_DepartmentID] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [page2, setPage2] = useState(0);\r\n  const [rowsPerPage] = useState(10);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfLastPost2 = (page2 + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n  const indexOfFirstPost2 = indexOfLastPost2 - rowsPerPage;\r\n  const currentPosts = listDepartment.slice(indexOfFirstPost, indexOfLastPost);\r\n  const currentPosts2 = listChild.slice(indexOfFirstPost2, indexOfLastPost2);\r\n  const [error, setError] = useState({\r\n    depart: false,\r\n    subdepart: false,\r\n    message_depart: \"\",\r\n    message_subdepart: \"\",\r\n  });\r\n  function changePage(event, newPage) {\r\n    setPage(newPage);\r\n    setListChild([]);\r\n  }\r\n  function changePage2(event, newPage) {\r\n    setPage2(newPage);\r\n  }\r\n  function toogle() {\r\n    setIsOpen(!isOpen);\r\n  }\r\n  function toogle2() {\r\n    setIsOpen2(!isOpen2);\r\n  }\r\n  useEffect(() => {\r\n    async function getDepartment() {\r\n      const id = getUser().CompanyId;\r\n      try {\r\n        const response = await departmentAPI.getDepartmentByCompanyId(id);\r\n        setListDepartment(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getDepartment();\r\n  }, []);\r\n  function getChildDepartment(id) {\r\n    departmentAPI\r\n      .getSubDepartment(id)\r\n      .then(function (res) {\r\n        setListChild(res.data);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n  function addDepartment(e) {\r\n    e.preventDefault();\r\n    if (department.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        depart: true,\r\n        message_depart: \"Department name must not empty\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          depart: false,\r\n          message_depart: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (department.trim().length > 255) {\r\n      setError({\r\n        ...error,\r\n        depart: true,\r\n        message_depart: \"Department name can not larger 255 characters\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          depart: false,\r\n          message_depart: \"\",\r\n        });\r\n      }, 3000);\r\n    } else {\r\n      const params = {\r\n        name: department,\r\n        companyId: getUser().CompanyId,\r\n        creatorId: getUser().Id,\r\n        dateCreate: Moment(new Date()).format(\r\n          \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n        ),\r\n      };\r\n      departmentAPI\r\n        .addDepartment(params)\r\n        .then(function () {\r\n          toast.success(\"Add department successfully\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n          setError({\r\n            ...error,\r\n            depart: true,\r\n            message_depart: \"Department name already exists\",\r\n          });\r\n          setTimeout(() => {\r\n            setError({\r\n              ...error,\r\n              depart: false,\r\n              message_depart: \"\",\r\n            });\r\n          }, 3000);\r\n        });\r\n    }\r\n  }\r\n  function addSubDepartment(e) {\r\n    e.preventDefault();\r\n    if (child_department.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        subdepart: true,\r\n        message_subdepart: \"Child department name must not empty\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          subdepart: false,\r\n          message_subdepart: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (child_department.trim().length > 255) {\r\n      setError({\r\n        ...error,\r\n        subdepart: true,\r\n        message_subdepart:\r\n          \"Child department name can not larger 255 characters\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          subdepart: false,\r\n          message_subdepart: \"\",\r\n        });\r\n      }, 3000);\r\n    } else {\r\n      const params = {\r\n        name: child_department,\r\n        departmentId: departmentID.id,\r\n        companyId: getUser().CompanyId,\r\n        creatorId: getUser().Id,\r\n        dateCreate: Moment(new Date()).format(\r\n          \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n        ),\r\n      };\r\n      departmentAPI\r\n        .addSubDepartment(params)\r\n        .then(function () {\r\n          toast.success(\"Add child department successfully\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n          setError({\r\n            ...error,\r\n            subdepart: true,\r\n            message_subdepart: \"Child department name already exists\",\r\n          });\r\n          setTimeout(() => {\r\n            setError({\r\n              ...error,\r\n              subdepart: false,\r\n              message_subdepart: \"\",\r\n            });\r\n          }, 3000);\r\n        });\r\n    }\r\n  }\r\n  function editDepartment(e) {\r\n    e.preventDefault();\r\n    if (department.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        depart: true,\r\n        message_depart: \"Department name must not empty\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          depart: false,\r\n          message_depart: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (department.trim().length > 255) {\r\n      setError({\r\n        ...error,\r\n        depart: true,\r\n        message_depart: \"Department name can not larger 255 characters\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          depart: false,\r\n          message_depart: \"\",\r\n        });\r\n      }, 3000);\r\n    } else {\r\n      const params = {\r\n        id: departmentID.id,\r\n        name: department,\r\n        companyId: getUser().CompanyId,\r\n        creatorId: getUser().Id,\r\n        dateCreate: Moment(new Date()).format(\r\n          \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n        ),\r\n      };\r\n      departmentAPI\r\n        .editDepartmentById(params)\r\n        .then(function () {\r\n          toast.success(\"Update department successfully\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          setTimeout(() => {\r\n            window.location.reload();\r\n          }, 3000);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n          setError({\r\n            ...error,\r\n            depart: true,\r\n            message_depart: \"Department name already exists\",\r\n          });\r\n          setTimeout(() => {\r\n            setError({\r\n              ...error,\r\n              depart: false,\r\n              message_depart: \"\",\r\n            });\r\n          }, 3000);\r\n        });\r\n    }\r\n  }\r\n  function editSubDepartment(e) {\r\n    e.preventDefault();\r\n    if (child_department.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        subdepart: true,\r\n        message_subdepart: \"Department name must not empty\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          subdepart: false,\r\n          message_subdepart: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (child_department.trim().length > 255) {\r\n      setError({\r\n        ...error,\r\n        subdepart: true,\r\n        message_subdepart: \"Department name can not larger 255 characters\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          subdepart: false,\r\n          message_subdepart: \"\",\r\n        });\r\n      }, 3000);\r\n    } else {\r\n      const params = {\r\n        id: sub_departmentID.id,\r\n        name: child_department,\r\n        departmentId: sub_departmentID.departmentId,\r\n        companyId: getUser().CompanyId,\r\n        creatorId: getUser().Id,\r\n        dateCreate: Moment(new Date()).format(\r\n          \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n        ),\r\n      };\r\n      departmentAPI\r\n        .editSubDepartmentById(params)\r\n        .then(function () {\r\n          toast.success(\"Update child department successfully\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          setTimeout(() => {\r\n            window.location.reload();\r\n          }, 3000);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n          setError({\r\n            ...error,\r\n            subdepart: true,\r\n            message_subdepart: \"Child department name already exists\",\r\n          });\r\n          setTimeout(() => {\r\n            setError({\r\n              ...error,\r\n              subdepart: false,\r\n              message_subdepart: \"\",\r\n            });\r\n          }, 3000);\r\n        });\r\n    }\r\n  }\r\n  function deleteSubDepartment(e) {\r\n    e.preventDefault();\r\n    departmentAPI\r\n      .deleteSubDepartmentById(departmentID.id)\r\n      .then(function () {\r\n        toast.success(\"Delete child department successfully\", {\r\n          position: toast.POSITION.TOP_CENTER,\r\n        });\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 3000);\r\n      })\r\n      .catch(function (error) {\r\n        toast.error(\"You can not delete child department\", {\r\n          position: toast.POSITION.TOP_CENTER,\r\n        });\r\n        console.log(error);\r\n      });\r\n  }\r\n  function deleteDepartment(e) {\r\n    e.preventDefault();\r\n    departmentAPI\r\n      .deleteDepartmentById(departmentID.id)\r\n      .then(function () {\r\n        toast.success(\"Delete department successfully\", {\r\n          position: toast.POSITION.TOP_CENTER,\r\n        });\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 3000);\r\n      })\r\n      .catch(function (error) {\r\n        toast.error(\"You can not delete department\", {\r\n          position: toast.POSITION.TOP_CENTER,\r\n        });\r\n        console.log(error);\r\n      });\r\n  }\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <main className=\"main-panel\">\r\n        <div className=\"header-bg\">\r\n          <span className=\"mask bg-gradient-default opacity-8\"></span>\r\n          <div>\r\n            <Label\r\n              style={{\r\n                float: \"left\",\r\n                fontWeight: \"bolder\",\r\n                color: \"white\",\r\n                marginTop: 20,\r\n                marginLeft: 20,\r\n                border: \"1px solid #ffff\",\r\n                borderRadius: \"25px\",\r\n                padding: 10,\r\n                position: \"relative\",\r\n              }}\r\n            >\r\n              DEPARTMENT MANAGER\r\n            </Label>\r\n          </div>\r\n          <Container fluid className=\"d-flex1 align-items-center\">\r\n            <Row>\r\n              <Col md={10} lg={7}>\r\n                <h1 className=\"display-2 text-white\">Hello {getUser().Name}</h1>\r\n                <p className=\"text-white mt-0 mb-5\">\r\n                  This is your management department page. You can add new\r\n                  department or child department, delete department. But you\r\n                  cannot delete the department containing the staff\r\n                </p>\r\n                <Button\r\n                  style={{ float: \"left\" }}\r\n                  startIcon={<AddIcon />}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={toogle}\r\n                >\r\n                  Add new\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n          <Container fluid>\r\n            <Row>\r\n              <Col xl={7}>\r\n                <Paper>\r\n                  <div>\r\n                    <PeopleAltIcon color=\"primary\" fontSize=\"large\" />\r\n                  </div>\r\n                  <h5> Department</h5>\r\n                  <TablePagination\r\n                    component=\"div\"\r\n                    count={listDepartment.length}\r\n                    page={page}\r\n                    onChangePage={changePage}\r\n                    rowsPerPage={rowsPerPage}\r\n                    labelRowsPerPage=\"\"\r\n                    rowsPerPageOptions={[]}\r\n                  />\r\n                  <Table style={{ paddingLeft: 15, paddingRight: 15 }}>\r\n                    <thead>\r\n                      <tr>\r\n                        <th style={{ textAlign: \"left\" }}>Name</th>\r\n                        <th style={{ textAlign: \"right\" }}>Actions</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className=\"tb\">\r\n                      {currentPosts.map((row, index) => {\r\n                        return (\r\n                          <tr\r\n                            key={index}\r\n                            onClick={(event) => {\r\n                              event.preventDefault();\r\n                              getChildDepartment(row.id);\r\n                            }}\r\n                          >\r\n                            <td\r\n                              style={{ textAlign: \"left\" }}\r\n                              className=\"demo-2\"\r\n                            >\r\n                              {row.name}\r\n                            </td>\r\n                            <td>\r\n                              <Button\r\n                                color=\"primary\"\r\n                                startIcon={<AddIcon />}\r\n                                style={{\r\n                                  minWidth: 20,\r\n                                  position: \"absolute\",\r\n                                  right: 90,\r\n                                }}\r\n                                onClick={() => {\r\n                                  toogle2();\r\n                                  setDepartmentID(row);\r\n                                }}\r\n                              />\r\n                              <Button\r\n                                color=\"primary\"\r\n                                startIcon={<EditIcon />}\r\n                                style={{\r\n                                  minWidth: 20,\r\n                                  position: \"absolute\",\r\n                                  right: 50,\r\n                                }}\r\n                                onClick={() => {\r\n                                  setOpenEditDepart(true);\r\n                                  setDepartmentID(row);\r\n                                }}\r\n                              />\r\n                              <Button\r\n                                color=\"primary\"\r\n                                startIcon={<DeleteForeverIcon />}\r\n                                style={{\r\n                                  minWidth: 20,\r\n                                  position: \"absolute\",\r\n                                  right: 10,\r\n                                }}\r\n                                onClick={() => {\r\n                                  setIsOpen4(true);\r\n                                  setDepartmentID(row);\r\n                                }}\r\n                              />\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                    </tbody>\r\n                  </Table>\r\n                </Paper>\r\n              </Col>\r\n              <Col xl={5}>\r\n                <Paper>\r\n                  <div>\r\n                    <PeopleAltIcon color=\"primary\" fontSize=\"large\" />\r\n                  </div>\r\n                  <h5>Child Department</h5>\r\n                  <TablePagination\r\n                    component=\"div\"\r\n                    count={listChild.length}\r\n                    page={page2}\r\n                    onChangePage={changePage2}\r\n                    rowsPerPage={rowsPerPage}\r\n                    labelRowsPerPage=\"\"\r\n                    rowsPerPageOptions={[]}\r\n                  />\r\n                  <Table hover>\r\n                    <thead>\r\n                      <tr>\r\n                        <th style={{ textAlign: \"left\" }}>Name</th>\r\n                        <th>Date Modify</th>\r\n                        <th style={{ textAlign: \"right\" }}>Actions</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {currentPosts2.map((row, index) => {\r\n                        return (\r\n                          <tr key={index}>\r\n                            <td\r\n                              style={{ textAlign: \"left\" }}\r\n                              className=\"demo-2\"\r\n                            >\r\n                              {row.name}\r\n                            </td>\r\n                            <td>\r\n                              {moment(row.dateModify).format(\r\n                                \"DD/MM/YYYY HH:mm:ss\"\r\n                              )}\r\n                            </td>\r\n                            <td>\r\n                              <Button\r\n                                color=\"primary\"\r\n                                startIcon={<EditIcon />}\r\n                                style={{\r\n                                  minWidth: 20,\r\n                                  position: \"absolute\",\r\n                                  right: 50,\r\n                                }}\r\n                                onClick={() => {\r\n                                  setSub_DepartmentID(row);\r\n                                  setOpenEditSubDepart(true);\r\n                                }}\r\n                              />\r\n                              <Button\r\n                                color=\"primary\"\r\n                                startIcon={<DeleteForeverIcon />}\r\n                                style={{\r\n                                  minWidth: 20,\r\n                                  position: \"absolute\",\r\n                                  right: 10,\r\n                                }}\r\n                                onClick={() => {\r\n                                  setDepartmentID(row);\r\n                                  setIsOpen3(true);\r\n                                }}\r\n                              />\r\n                            </td>\r\n                          </tr>\r\n                        );\r\n                      })}\r\n                    </tbody>\r\n                  </Table>\r\n                </Paper>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n        <Dialog\r\n          onClose={toogle}\r\n          open={isOpen}\r\n          fullWidth\r\n          disableBackdropClick\r\n          disableEscapeKeyDown\r\n        >\r\n          <DialogTitle id=\"form-dialog-title\">Department</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Please enter new department name ...\r\n            </DialogContentText>\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"name\"\r\n              label=\"Department name\"\r\n              type=\"text\"\r\n              fullWidth\r\n              error={error.depart}\r\n              helperText={error.message_depart}\r\n              onChange={(e) => setDepartment(e.target.value)}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={toogle}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={addDepartment}>\r\n              Create\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Dialog\r\n          open={openEditDepart}\r\n          fullWidth\r\n          disableBackdropClick\r\n          disableEscapeKeyDown\r\n        >\r\n          <DialogTitle id=\"form-dialog-title\">Department</DialogTitle>\r\n          <DialogContent>\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"name\"\r\n              label=\"Department name\"\r\n              type=\"text\"\r\n              fullWidth\r\n              defaultValue={departmentID.name}\r\n              error={error.depart}\r\n              helperText={error.message_depart}\r\n              onChange={(e) => setDepartment(e.target.value)}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => setOpenEditDepart(false)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={editDepartment}\r\n            >\r\n              Update\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Dialog\r\n          fullWidth\r\n          disableBackdropClick\r\n          disableEscapeKeyDown\r\n          onClose={toogle2}\r\n          open={isOpen2}\r\n        >\r\n          <DialogTitle id=\"form-dialog-title\">Child Department</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Please enter new child department name ...\r\n            </DialogContentText>\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"name\"\r\n              label=\"Child department name\"\r\n              type=\"text\"\r\n              fullWidth\r\n              error={error.subdepart}\r\n              helperText={error.message_subdepart}\r\n              onChange={(e) => setChild_Department(e.target.value)}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={toogle2}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={addSubDepartment}\r\n            >\r\n              Create\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Dialog\r\n          open={openEditSubDepart}\r\n          fullWidth\r\n          disableBackdropClick\r\n          disableEscapeKeyDown\r\n        >\r\n          <DialogTitle id=\"form-dialog-title\">Child Department</DialogTitle>\r\n          <DialogContent>\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              id=\"name\"\r\n              label=\"Department name\"\r\n              type=\"text\"\r\n              fullWidth\r\n              defaultValue={sub_departmentID.name}\r\n              error={error.subdepart}\r\n              helperText={error.message_subdepart}\r\n              onChange={(e) => setChild_Department(e.target.value)}\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => setOpenEditSubDepart(false)}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={editSubDepartment}\r\n            >\r\n              Update\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Dialog\r\n          open={isOpen3}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          disableBackdropClick\r\n          disableEscapeKeyDown\r\n          fullWidth\r\n        >\r\n          <DialogTitle>{\"Are you sure delete?\"}</DialogTitle>\r\n          <DialogActions>\r\n            <Button\r\n              onClick={() => setIsOpen3(false)}\r\n              color=\"secondary\"\r\n              variant=\"contained\"\r\n            >\r\n              No\r\n            </Button>\r\n            <Button\r\n              onClick={deleteSubDepartment}\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n            >\r\n              Yes\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        <Dialog\r\n          open={isOpen4}\r\n          TransitionComponent={Transition}\r\n          keepMounted\r\n          disableBackdropClick\r\n          disableEscapeKeyDown\r\n          fullWidth\r\n        >\r\n          <DialogTitle>{\"Are you sure delete?\"}</DialogTitle>\r\n          <DialogActions>\r\n            <Button\r\n              onClick={() => setIsOpen4(false)}\r\n              color=\"secondary\"\r\n              variant=\"contained\"\r\n            >\r\n              No\r\n            </Button>\r\n            <Button\r\n              onClick={deleteDepartment}\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n            >\r\n              Yes\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default DepartmentManagerment;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\AdminCompany\\UserManagement\\UserManagement.js",["277","278","279","280","281","282","283","284","285"],"import { forwardRef, useEffect, useState } from \"react\";\r\nimport {\r\n  FormGroup,\r\n  Col,\r\n  Table,\r\n  Modal,\r\n  ModalHeader,\r\n  Container,\r\n  ModalFooter,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport userListAPI from \"../../../api/userListAPI\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport \"./../../../css/UserManagement.css\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport { getUser } from \"../../../utils/Common\";\r\nimport GetDepartment from \"../../GetData/GetDepartment\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport departmentAPI from \"../../../api/departmentAPI\";\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport {\r\n  DialogContentText,\r\n  FormHelperText,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport Moment from \"moment\";\r\nimport md5 from \"md5\";\r\nimport Navbar from \"../../Navbar/Navbar\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport * as Icon from \"react-icons/bi\";\r\n\r\nconst TransitionAdd = forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"right\" ref={ref} {...props} />;\r\n});\r\nconst TransitionDetail = forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction UserManagement() {\r\n  const [userList, setUserList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [listActive, setListActive] = useState([]);\r\n  const [listDeactive, setListDeactive] = useState([]);\r\n  const [postList, setPostList] = useState([]);\r\n  const [department, setDepartment] = useState([]);\r\n  const [subdepartment, setSubDepartment] = useState([]);\r\n  const [subdepartment2, setSubDepartment2] = useState([]);\r\n  const [checkAcitve, setCheckActive] = useState(true);\r\n  const [user, setUser] = useState({\r\n    username: \"\",\r\n    department: \"\",\r\n    subdepartment: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n    address: \"\",\r\n  });\r\n  const [detail, setDetail] = useState({\r\n    id: \"\",\r\n    username: \"\",\r\n    department: \"\",\r\n    subdepartment: \"\",\r\n    phone: \"\",\r\n    email: \"\",\r\n    address: \"\",\r\n    status: \"\",\r\n  });\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [del, setDel] = useState(false);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage] = useState(15);\r\n  const indexOfLastPost = (page + 1) * rowsPerPage;\r\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\r\n  const currentPosts = postList.slice(indexOfFirstPost, indexOfLastPost);\r\n  const add = () => setIsOpen(!isOpen);\r\n  const [openEdit, setOpenEdit] = useState(false);\r\n  const edit = () => setOpenEdit(!openEdit);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [error, setError] = useState({\r\n    name: false,\r\n    phone: false,\r\n    email: false,\r\n    depart: false,\r\n    subdepart: false,\r\n    address: false,\r\n    loi: false,\r\n    message_name: \"\",\r\n    message_phone: \"\",\r\n    message_email: \"\",\r\n    message_depart: \"\",\r\n    message_subdepart: \"\",\r\n    message_address: \"\",\r\n  });\r\n  useEffect(() => {\r\n    async function fetchUserList() {\r\n      try {\r\n        const response = await userListAPI.getUserByCompanyId(\r\n          getUser().CompanyId\r\n        );\r\n        var list = response.data\r\n          .sort((a, b) => {\r\n            return (\r\n              new Date(a.dateCreate).getTime() -\r\n              new Date(b.dateCreate).getTime()\r\n            );\r\n          })\r\n          .reverse();\r\n        setUserList(list);\r\n        setListActive(\r\n          list.filter((data) => {\r\n            if (data.status === 1) {\r\n              return data;\r\n            }\r\n          })\r\n        );\r\n        setListDeactive(\r\n          list.filter((data) => {\r\n            if (data.status === 0) {\r\n              return data;\r\n            }\r\n          })\r\n        );\r\n        setPostList(\r\n          list.filter((data) => {\r\n            if (data.status === 1) {\r\n              return data;\r\n            }\r\n          })\r\n        );\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 2000);\r\n    fetchUserList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function getDepartment() {\r\n      try {\r\n        const res = await departmentAPI.getDepartmentByCompanyId(\r\n          getUser().CompanyId\r\n        );\r\n        setDepartment(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getDepartment();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function getSubDepartment() {\r\n      try {\r\n        const res = await departmentAPI.getSubDepartment(user.department);\r\n        setSubDepartment(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getSubDepartment();\r\n  }, [user.department]);\r\n\r\n  useEffect(() => {\r\n    async function getSubDepartment() {\r\n      try {\r\n        const res = await departmentAPI.getSubDepartment(detail.department);\r\n        setSubDepartment2(res.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    getSubDepartment();\r\n  }, [detail.department]);\r\n\r\n  function handleOnInput(event) {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    setUser({\r\n      ...user,\r\n      [name]: value,\r\n    });\r\n  }\r\n  function handleOnDetail(event) {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    setDetail({\r\n      ...detail,\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  function addUser(event) {\r\n    event.preventDefault();\r\n    var pattern = new RegExp(\r\n      /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i\r\n    );\r\n    if (user.username.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        loi: true,\r\n        name: true,\r\n        message_name: \"User name must not empty\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          loi: false,\r\n          name: false,\r\n          message_name: \"\",\r\n        });\r\n      }, 5000);\r\n    } else if (user.username.length > 255) {\r\n      setError({\r\n        ...error,\r\n        loi: true,\r\n        name: true,\r\n        message_name: \"User name max length 255 characters\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          loi: false,\r\n          name: false,\r\n          message_name: \"\",\r\n        });\r\n      }, 5000);\r\n    } else if (user.phone.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        loi: true,\r\n        phone: true,\r\n        message_phone: \"Phone number must not empty\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          loi: false,\r\n          phone: false,\r\n          message_phone: \"\",\r\n        });\r\n      }, 5000);\r\n    } else if (!user.phone.trim().match(\"^[0-9]{10}$\")) {\r\n      setError({\r\n        ...error,\r\n        loi: true,\r\n        phone: true,\r\n        message_phone: \"Phone number is incorrect\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          loi: false,\r\n          phone: false,\r\n          message_phone: \"\",\r\n        });\r\n      }, 5000);\r\n    } else if (user.department === \"\") {\r\n      setError({\r\n        ...error,\r\n        loi: true,\r\n        depart: true,\r\n        message_depart: \"Please choose one department\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          loi: false,\r\n          depart: false,\r\n          message_depart: \"\",\r\n        });\r\n      }, 5000);\r\n    } else if (user.subdepartment === \"\") {\r\n      setError({\r\n        ...error,\r\n        loi: true,\r\n        subdepart: true,\r\n        message_subdepart: \"Please choose one child department\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          loi: false,\r\n          subdepart: false,\r\n          message_subdepart: \"\",\r\n        });\r\n      }, 5000);\r\n    } else if (user.email.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        loi: true,\r\n        email: true,\r\n        message_email: \"Email must not empty\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          loi: false,\r\n          email: false,\r\n          message_email: \"\",\r\n        });\r\n      }, 5000);\r\n    } else if (!pattern.test(user.email)) {\r\n      setError({\r\n        ...error,\r\n        loi: true,\r\n        email: true,\r\n        message_email: \"Email is incorrect\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          loi: false,\r\n          email: false,\r\n          message_email: \"\",\r\n        });\r\n      }, 5000);\r\n    } else if (user.address.length > 255) {\r\n      setError({\r\n        ...error,\r\n        loi: true,\r\n        address: true,\r\n        message_address: \"Address length must not larger 255 characters\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          loi: false,\r\n          address: false,\r\n          message_address: \"\",\r\n        });\r\n      }, 5000);\r\n    } else {\r\n      const tel = \"+84\" + user.phone.substring(1);\r\n      const params = {\r\n        name: user.username,\r\n        avatar: \"\",\r\n        email: user.email,\r\n        password: md5(\"123Aabc\").trim().toString(),\r\n        phone: tel,\r\n        address: user.address,\r\n        dateCreate: Moment(new Date()).format(\r\n          \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n        ),\r\n        creatorId: getUser().Id,\r\n        subDepartmentId: user.subdepartment,\r\n        departmentId: user.department,\r\n        companyId: getUser().CompanyId,\r\n        role: \"2\",\r\n        status: 1,\r\n      };\r\n      userListAPI\r\n        .addUser(params)\r\n        .then(function () {\r\n          window.location.reload();\r\n          setUser({\r\n            username: \"\",\r\n            department: \"\",\r\n            subdepartment: \"\",\r\n            phone: \"\",\r\n            email: \"\",\r\n            address: \"\",\r\n          });\r\n          toast.success(\"You has created user successfully\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n        })\r\n        .catch(function (error) {\r\n          if (\r\n            error.response.data.Message ===\r\n            \"The user with the provided phone number already exists (PHONE_NUMBER_EXISTS).\"\r\n          ) {\r\n            setError({\r\n              ...error,\r\n              loi: true,\r\n              phone: true,\r\n              message_phone: \"Phone number is already exists\",\r\n            });\r\n            setTimeout(() => {\r\n              setError({\r\n                ...error,\r\n                loi: false,\r\n                phone: false,\r\n                message_phone: \"\",\r\n              });\r\n            }, 5000);\r\n          } else if (\r\n            error.response.data.Message ===\r\n            \"The user with the provided email already exists (EMAIL_EXISTS).\"\r\n          ) {\r\n            setError({\r\n              ...error,\r\n              loi: true,\r\n              email: true,\r\n              message_email: \"Email is already exists\",\r\n            });\r\n            setTimeout(() => {\r\n              setError({\r\n                ...error,\r\n                loi: false,\r\n                email: false,\r\n                message_email: \"\",\r\n              });\r\n            }, 5000);\r\n          }\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n  function updateUser(event) {\r\n    event.preventDefault();\r\n    if (detail.department === \"\") {\r\n      setError({\r\n        ...error,\r\n        loi: true,\r\n        depart: true,\r\n        message: \"Please choose one department\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          loi: false,\r\n          depart: false,\r\n          message: \"\",\r\n        });\r\n      }, 5000);\r\n    } else if (detail.subdepartment === \"\") {\r\n      setError({\r\n        ...error,\r\n        loi: true,\r\n        subdepart: true,\r\n        message: \"Please choose one child department\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          loi: false,\r\n          subdepart: false,\r\n          message: \"\",\r\n        });\r\n      }, 5000);\r\n    } else {\r\n      const tel = \"+84\" + detail.phone.substring(1);\r\n      const params = {\r\n        id: detail.id,\r\n        name: detail.username,\r\n        avatar: \"\",\r\n        email: detail.email,\r\n        phone: tel,\r\n        address: detail.address,\r\n        dateCreate: Moment(new Date()).format(\"DD/MM/YYYY\"),\r\n        creatorId: getUser().Id,\r\n        subDepartmentId: detail.subdepartment,\r\n        departmentId: detail.department,\r\n        companyId: getUser().CompanyId,\r\n        role: \"2\",\r\n      };\r\n      userListAPI\r\n        .updateUser(params)\r\n        .then(function (res) {\r\n          if (detail.status === 1) {\r\n            userListAPI\r\n              .activeUser(res.data.id)\r\n              .then(() => {\r\n                window.location.reload();\r\n                toast.success(\"You has updated user successfully\", {\r\n                  position: toast.POSITION.TOP_CENTER,\r\n                });\r\n              })\r\n              .catch(function (error) {\r\n                console.log(error);\r\n              });\r\n          } else {\r\n            userListAPI.deActiveUser(res.data.id).then(() => {\r\n              window.location.reload();\r\n              toast.success(\"You has updated user successfully\", {\r\n                position: toast.POSITION.TOP_CENTER,\r\n              });\r\n            });\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  function changePage(event, newPage) {\r\n    setPage(newPage);\r\n  }\r\n  const [value, setValue] = useState(1);\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n  function activeList(e) {\r\n    setPage(0);\r\n    setPostList(listActive);\r\n  }\r\n  function deActiveList(e) {\r\n    setPage(0);\r\n    setPostList(listDeactive);\r\n  }\r\n\r\n  const data = userList.map((user) => {\r\n    return {\r\n      Account: user.name,\r\n      Email: user.email,\r\n      Phone: user.phone,\r\n      Address: user.address,\r\n    };\r\n  });\r\n  console.log(userList)\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <main className=\"main-panel\">\r\n        <Container fluid={true}>\r\n          <Dialog\r\n            open={isOpen}\r\n            onClose={add}\r\n            aria-labelledby=\"form-dialog-title\"\r\n            TransitionComponent={TransitionAdd}\r\n            keepMounted\r\n            disableBackdropClick\r\n            disableEscapeKeyDown\r\n            fullWidth\r\n          >\r\n            <DialogTitle id=\"form-dialog-title\">Add User</DialogTitle>\r\n\r\n            <DialogContent>\r\n              <DialogContentText style={{ color: \"red\" }}>\r\n                * If a department does not have a child department. Please\r\n                create a child department before adding user\r\n              </DialogContentText>\r\n              <TextField\r\n                error={error.name}\r\n                helperText={error.message_name}\r\n                label=\"User name\"\r\n                value={user.username}\r\n                name=\"username\"\r\n                variant=\"outlined\"\r\n                required\r\n                onChange={handleOnInput}\r\n                style={{ width: \"270px\" }}\r\n              />\r\n              <TextField\r\n                error={error.phone}\r\n                helperText={error.message_phone}\r\n                value={user.phone}\r\n                label=\"User phone number\"\r\n                name=\"phone\"\r\n                type=\"phone\"\r\n                variant=\"outlined\"\r\n                required\r\n                onChange={handleOnInput}\r\n                style={{ marginLeft: \"10px\", width: \"270px\" }}\r\n              />\r\n            </DialogContent>\r\n            <DialogContent>\r\n              <FormControl variant=\"outlined\" style={{ width: \"270px\" }}>\r\n                <InputLabel id=\"demo\">Department</InputLabel>\r\n                <Select\r\n                  name=\"department\"\r\n                  value={user.department}\r\n                  onChange={handleOnInput}\r\n                  label=\"Department\"\r\n                  error={error.depart}\r\n                  required\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {department.map((depart) => (\r\n                    <MenuItem key={depart.id} value={depart.id}>\r\n                      {depart.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                <FormHelperText style={{ color: \"red\" }}>\r\n                  {error.message_depart}\r\n                </FormHelperText>\r\n              </FormControl>\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                style={{ marginLeft: \"10px\", width: \"270px\" }}\r\n              >\r\n                <InputLabel id=\"demo\">Child Department</InputLabel>\r\n                <Select\r\n                  name=\"subdepartment\"\r\n                  value={user.subdepartment}\r\n                  onChange={handleOnInput}\r\n                  label=\"Child Department\"\r\n                  error={error.subdepart}\r\n                  required\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {subdepartment.map((depart) => (\r\n                    <MenuItem key={depart.id} value={depart.id}>\r\n                      {depart.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                <FormHelperText style={{ color: \"red\" }}>\r\n                  {error.message_subdepart}\r\n                </FormHelperText>\r\n              </FormControl>\r\n            </DialogContent>\r\n            <DialogContent>\r\n              <TextField\r\n                error={error.email}\r\n                label=\"Email\"\r\n                value={user.email}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                required\r\n                helperText={error.message_email}\r\n                variant=\"outlined\"\r\n                onChange={handleOnInput}\r\n                style={{ width: \"270px\" }}\r\n              />\r\n              <TextField\r\n                label=\"Address\"\r\n                error={error.address}\r\n                value={user.address}\r\n                helperText={error.message_address}\r\n                name=\"address\"\r\n                variant=\"outlined\"\r\n                onChange={handleOnInput}\r\n                style={{ marginLeft: \"10px\", width: \"270px\" }}\r\n              />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => {\r\n                  setUser({\r\n                    username: \"\",\r\n                    department: \"\",\r\n                    subdepartment: \"\",\r\n                    phone: \"\",\r\n                    email: \"\",\r\n                    address: \"\",\r\n                  });\r\n                  add();\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ marginRight: \"20px\" }}\r\n                onClick={addUser}\r\n              >\r\n                Create\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n          <div className=\"form-search\">\r\n            <FormGroup row>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={add}>\r\n                +Add user\r\n              </Button>\r\n              <Col>\r\n                <Row>\r\n                  <TextField\r\n                    name=\"search\"\r\n                    variant=\"outlined\"\r\n                    placeholder=\"Search by account name\"\r\n                    onChange={(event) => {\r\n                      setSearch(event.target.value);\r\n                    }}\r\n                    size=\"small\"\r\n                    fullWidth\r\n                    style={{ marginLeft: \"10px\" }}\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <SearchIcon color=\"primary\" />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                  />\r\n                </Row>\r\n              </Col>\r\n              <Col>\r\n                <Row>\r\n                  <Paper\r\n                    square\r\n                    elevation={0}\r\n                    style={{ position: \"absolute\", right: 0 }}\r\n                  >\r\n                    <Tabs\r\n                      value={value}\r\n                      indicatorColor=\"primary\"\r\n                      textColor=\"primary\"\r\n                      onChange={handleChange}\r\n                    >\r\n                      <Tab\r\n                        style={{ fontWeight: \"bold\" }}\r\n                        value={1}\r\n                        onClick={activeList}\r\n                        label=\"Active\"\r\n                      />\r\n                      <Tab\r\n                        style={{ fontWeight: \"bold\" }}\r\n                        value={0}\r\n                        onClick={deActiveList}\r\n                        label=\"Deactive\"\r\n                      />\r\n                    </Tabs>\r\n                  </Paper>\r\n                </Row>\r\n                <Row></Row>\r\n              </Col>\r\n            </FormGroup>\r\n            <div hidden={search !== \"\" ? true : false}>\r\n              <TablePagination\r\n                component=\"div\"\r\n                count={postList.length}\r\n                page={page}\r\n                onChangePage={changePage}\r\n                rowsPerPage={rowsPerPage}\r\n                labelRowsPerPage=\"\"\r\n                rowsPerPageOptions={[]}\r\n              />\r\n            </div>\r\n            <div hidden={search !== \"\" ? true : false} className=\"ex\">\r\n              <CSVLink filename={\"data user.csv\"} data={data}>\r\n                Import\r\n                <Icon.BiImport fontSize=\"25\" tableValues=\"a\" />\r\n              </CSVLink>\r\n              <CSVLink\r\n                style={{ marginLeft: 10 }}\r\n                filename={\"data user.csv\"}\r\n                data={data}\r\n              >\r\n                Export\r\n                <Icon.BiExport fontSize=\"25\" />\r\n              </CSVLink>\r\n            </div>\r\n          </div>\r\n          {loading ? (\r\n            <ScaleLoader color={\"#2512DF\"} loading={loading} size={35} />\r\n          ) : (\r\n            <Table\r\n              hidden={search !== \"\" ? true : false}\r\n              hover\r\n              className=\"tb\"\r\n              style={{ textAlign: \"left\" }}\r\n            >\r\n              <thead>\r\n                <tr>\r\n                  <th>Account name</th>\r\n                  <th>Department</th>\r\n                  <th>Phone number</th>\r\n                  <th>Email</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {currentPosts.map((user) => (\r\n                  <tr key={user.id} className=\"row_data\">\r\n                    <td\r\n                      className=\"demo-2\"\r\n                      onClick={() => {\r\n                        setDetail({\r\n                          id: user.id,\r\n                          username: user.name,\r\n                          phone: \"0\" + user.phone.substring(3),\r\n                          department: user.departmentId,\r\n                          subdepartment: user.subDepartmentId,\r\n                          email: user.email,\r\n                          address: user.address,\r\n                          status: user.status,\r\n                        });\r\n                        if (user.status === 0) {\r\n                          setCheckActive(false);\r\n                        } else {\r\n                          setCheckActive(true);\r\n                        }\r\n                        setOpenEdit(true);\r\n                      }}\r\n                    >\r\n                      {user.name}\r\n                    </td>\r\n                    <td\r\n                      className=\"demo-2\"\r\n                      onClick={() => {\r\n                        setDetail({\r\n                          id: user.id,\r\n                          username: user.name,\r\n                          phone: \"0\" + user.phone.substring(3),\r\n                          department: user.departmentId,\r\n                          subdepartment: user.subDepartmentId,\r\n                          email: user.email,\r\n                          address: user.address,\r\n                          status: user.status,\r\n                        });\r\n                        if (user.status === 0) {\r\n                          setCheckActive(false);\r\n                        } else {\r\n                          setCheckActive(true);\r\n                        }\r\n                        setOpenEdit(true);\r\n                      }}\r\n                    >\r\n                      <GetDepartment id={user.departmentId} />\r\n                    </td>\r\n                    <td\r\n                      className=\"demo-2\"\r\n                      onClick={() => {\r\n                        setDetail({\r\n                          id: user.id,\r\n                          username: user.name,\r\n                          phone: \"0\" + user.phone.substring(3),\r\n                          department: user.departmentId,\r\n                          subdepartment: user.subDepartmentId,\r\n                          email: user.email,\r\n                          address: user.address,\r\n                          status: user.status,\r\n                        });\r\n                        if (user.status === 0) {\r\n                          setCheckActive(false);\r\n                        } else {\r\n                          setCheckActive(true);\r\n                        }\r\n                        setOpenEdit(true);\r\n                      }}\r\n                    >\r\n                      {user.phone}\r\n                    </td>\r\n                    <td\r\n                      className=\"demo-2\"\r\n                      onClick={() => {\r\n                        setDetail({\r\n                          id: user.id,\r\n                          username: user.name,\r\n                          phone: \"0\" + user.phone.substring(3),\r\n                          department: user.departmentId,\r\n                          subdepartment: user.subDepartmentId,\r\n                          email: user.email,\r\n                          address: user.address,\r\n                          status: user.status,\r\n                        });\r\n                        if (user.status === 0) {\r\n                          setCheckActive(false);\r\n                        } else {\r\n                          setCheckActive(true);\r\n                        }\r\n                        setOpenEdit(true);\r\n                      }}\r\n                    >\r\n                      {user.email}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          )}\r\n          <Table\r\n            hidden={search === \"\" ? true : false}\r\n            hover\r\n            style={{ textAlign: \"left\" }}\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>Account name</th>\r\n                <th>Department</th>\r\n                <th>Phone number</th>\r\n                <th>Email</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {userList\r\n                .filter((users) => {\r\n                  if (users.name.toLowerCase().includes(search.toLowerCase())) {\r\n                    return users;\r\n                  }\r\n                })\r\n                .map((user) => (\r\n                  <tr key={user.id} className=\"row_data\">\r\n                    <td\r\n                      className=\"demo-2\"\r\n                      onClick={() => {\r\n                        setDetail({\r\n                          id: user.id,\r\n                          username: user.name,\r\n                          phone: \"0\" + user.phone.substring(3),\r\n                          department: user.departmentId,\r\n                          subdepartment: user.subDepartmentId,\r\n                          email: user.email,\r\n                          address: user.address,\r\n                          status: user.status,\r\n                        });\r\n                        if (user.status === 0) {\r\n                          setCheckActive(false);\r\n                        } else {\r\n                          setCheckActive(true);\r\n                        }\r\n                        setOpenEdit(true);\r\n                      }}\r\n                    >\r\n                      {user.name}\r\n                    </td>\r\n                    <td\r\n                      className=\"demo-2\"\r\n                      onClick={() => {\r\n                        setDetail({\r\n                          id: user.id,\r\n                          username: user.name,\r\n                          phone: \"0\" + user.phone.substring(3),\r\n                          department: user.departmentId,\r\n                          subdepartment: user.subDepartmentId,\r\n                          email: user.email,\r\n                          address: user.address,\r\n                          status: user.status,\r\n                        });\r\n                        if (user.status === 0) {\r\n                          setCheckActive(false);\r\n                        } else {\r\n                          setCheckActive(true);\r\n                        }\r\n                        setOpenEdit(true);\r\n                      }}\r\n                    >\r\n                      <GetDepartment id={user.departmentId} />\r\n                    </td>\r\n                    <td\r\n                      className=\"demo-2\"\r\n                      onClick={() => {\r\n                        setDetail({\r\n                          id: user.id,\r\n                          username: user.name,\r\n                          phone: \"0\" + user.phone.substring(3),\r\n                          department: user.departmentId,\r\n                          subdepartment: user.subDepartmentId,\r\n                          email: user.email,\r\n                          address: user.address,\r\n                          status: user.status,\r\n                        });\r\n                        if (user.status === 0) {\r\n                          setCheckActive(false);\r\n                        } else {\r\n                          setCheckActive(true);\r\n                        }\r\n                        setOpenEdit(true);\r\n                      }}\r\n                    >\r\n                      {user.phone}\r\n                    </td>\r\n                    <td\r\n                      className=\"demo-2\"\r\n                      onClick={() => {\r\n                        setDetail({\r\n                          id: user.id,\r\n                          username: user.name,\r\n                          phone: \"0\" + user.phone.substring(3),\r\n                          department: user.departmentId,\r\n                          subdepartment: user.subDepartmentId,\r\n                          email: user.email,\r\n                          address: user.address,\r\n                          status: user.status,\r\n                        });\r\n                        if (user.status === 0) {\r\n                          setCheckActive(false);\r\n                        } else {\r\n                          setCheckActive(true);\r\n                        }\r\n                        setOpenEdit(true);\r\n                      }}\r\n                    >\r\n                      {user.email}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </Table>\r\n          <Dialog\r\n            open={openEdit}\r\n            TransitionComponent={TransitionDetail}\r\n            keepMounted\r\n            disableBackdropClick\r\n            disableEscapeKeyDown\r\n            fullWidth\r\n          >\r\n            <DialogTitle id=\"form-dialog-title\">User Detail</DialogTitle>\r\n            <DialogContent>\r\n              <TextField\r\n                label=\"User name\"\r\n                value={detail.username}\r\n                name=\"username\"\r\n                variant=\"outlined\"\r\n                required\r\n                onChange={handleOnDetail}\r\n                style={{ width: \"270px\" }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n              <TextField\r\n                value={detail.phone}\r\n                label=\"User phone number\"\r\n                name=\"phone\"\r\n                type=\"phone\"\r\n                variant=\"outlined\"\r\n                required\r\n                onChange={handleOnDetail}\r\n                style={{ marginLeft: \"10px\", width: \"270px\" }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </DialogContent>\r\n            <DialogContent>\r\n              <FormControl variant=\"outlined\" style={{ width: \"270px\" }}>\r\n                <InputLabel id=\"demo\">Department</InputLabel>\r\n                <Select\r\n                  name=\"department\"\r\n                  value={detail.department}\r\n                  onChange={handleOnDetail}\r\n                  label=\"Department\"\r\n                  error={error.depart}\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {department.map((depart) => (\r\n                    <MenuItem key={depart.id} value={depart.id}>\r\n                      {depart.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                style={{ marginLeft: \"10px\", width: \"270px\" }}\r\n              >\r\n                <InputLabel id=\"demo\">Sub Department</InputLabel>\r\n                <Select\r\n                  name=\"subdepartment\"\r\n                  value={detail.subdepartment}\r\n                  onChange={handleOnDetail}\r\n                  label=\"Sub Department\"\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>None</em>\r\n                  </MenuItem>\r\n                  {subdepartment2.map((depart) => (\r\n                    <MenuItem key={depart.id} value={depart.id}>\r\n                      {depart.name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </DialogContent>\r\n            <DialogContent>\r\n              <TextField\r\n                label=\"Email\"\r\n                value={detail.email}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                required\r\n                variant=\"outlined\"\r\n                onChange={handleOnDetail}\r\n                style={{ width: \"270px\" }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n              <TextField\r\n                label=\"Address\"\r\n                value={detail.address}\r\n                name=\"address\"\r\n                variant=\"outlined\"\r\n                onChange={handleOnDetail}\r\n                style={{ marginLeft: \"10px\", width: \"270px\" }}\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n              />\r\n            </DialogContent>\r\n            <DialogContent>\r\n              <span>\r\n                {checkAcitve === true ? (\r\n                  <a style={{ color: \"green\" }}>Active</a>\r\n                ) : (\r\n                  <a style={{ color: \"red\" }}>Deactive</a>\r\n                )}\r\n              </span>\r\n              <Switch\r\n                checked={checkAcitve}\r\n                onChange={() => {\r\n                  setCheckActive(!checkAcitve);\r\n                  setDetail({\r\n                    ...detail,\r\n                    status: checkAcitve === true ? 0 : 1,\r\n                  });\r\n                }}\r\n                name=\"active\"\r\n                color=\"primary\"\r\n              />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => {\r\n                  setDetail({\r\n                    username: \"\",\r\n                    phone: \"\",\r\n                    department: \"\",\r\n                    subdepartment: \"\",\r\n                    email: \"\",\r\n                    address: \"\",\r\n                    status: \"\",\r\n                  });\r\n                  edit();\r\n                }}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ marginRight: \"20px\" }}\r\n                onClick={updateUser}\r\n              >\r\n                Update\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n          <Modal isOpen={del} toggle={() => setDel(!del)}>\r\n            <ModalHeader>Do you want delete user?</ModalHeader>\r\n            <ModalFooter>\r\n              <Button\r\n                variant=\"contained\"\r\n                style={{ marginRight: 5 }}\r\n                color=\"secondary\"\r\n                onClick={() => {\r\n                  setDel(!del);\r\n                }}\r\n              >\r\n                No\r\n              </Button>\r\n              <Button variant=\"contained\" color=\"primary\">\r\n                Yes\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserManagement;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\CompanyRegister\\CompanyRegister.js",["286","287","288","289","290","291","292","293","294","295","296","297","298","299","300"],"import React, { useState } from \"react\";\r\nimport \"../../css/CompanyRegister.css\";\r\nimport register from \"../../images/register.png\";\r\nimport { Col, Container, Form, Label, Row } from \"reactstrap\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SidebarAdmin from \"../Sidebar/SidebarAdmin\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Slide,\r\n  Snackbar,\r\n} from \"@material-ui/core\";\r\nimport Moment from \"moment\";\r\nimport md5 from \"md5\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { getUser } from \"../../utils/Common\";\r\nimport companyListAPI from \"../../api/companyListAPI\";\r\nimport departmentAPI from \"../../api/departmentAPI\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useHistory } from \"react-router\";\r\nimport validateAPI from \"../../api/validateAPI\";\r\n\r\nfunction TransitionLeft(props) {\r\n  return <Slide {...props} direction=\"right\" />;\r\n}\r\n\r\nfunction CompanyRegister() {\r\n  const [companyRegister, setCompanyRegister] = useState({\r\n    company_name: \"\",\r\n    address: \"\",\r\n    phone: null,\r\n    manager_name: \"\",\r\n    manager_email: \"\",\r\n  });\r\n  const history = useHistory();\r\n  const [confirm, setConfirm] = useState(false);\r\n  const [error, setError] = useState({\r\n    company_name: false,\r\n    address: false,\r\n    phone: false,\r\n    manager_name: false,\r\n    email: false,\r\n    message: \"\",\r\n  });\r\n\r\n  function handleChange(event) {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    setCompanyRegister({\r\n      ...companyRegister,\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    const company = {\r\n      name: companyRegister.company_name,\r\n      phone: \"+84\" + companyRegister.phone.substring(1),\r\n      address: companyRegister.address,\r\n      dateCreate: Moment(new Date()).format(\r\n        \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n      ),\r\n      creatorId: getUser().Id,\r\n      status: 1,\r\n    };\r\n    companyListAPI\r\n      .addCompany(company)\r\n      .then(function (res) {\r\n        const param = {\r\n          name: \"Manager\",\r\n          companyId: res.data.id,\r\n          creatorId: getUser().Id,\r\n          dateCreate: Moment(new Date()).format(\r\n            \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n          ),\r\n        };\r\n        departmentAPI\r\n          .addDepartment(param)\r\n          .then(function (department) {\r\n            const sub = {\r\n              name: \"Admin\",\r\n              departmentId: department.data.id,\r\n              companyId: res.data.id,\r\n              creatorId: getUser().Id,\r\n              dateCreate: Moment(new Date()).format(\r\n                \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n              ),\r\n            };\r\n            departmentAPI.addSubDepartment(sub).then(function (subdepartment) {\r\n              const user = {\r\n                name: companyRegister.manager_name,\r\n                avatar: \"\",\r\n                email: companyRegister.manager_email,\r\n                password: md5(\"123Aabc\").trim().toString(),\r\n                phone: \"+84\" + companyRegister.phone.substring(1),\r\n                address: companyRegister.address,\r\n                dateCreate: Moment(new Date()).format(\r\n                  \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n                ),\r\n                creatorId: getUser().Id,\r\n                subDepartmentId: subdepartment.data.id,\r\n                departmentId: department.data.id,\r\n                companyId: res.data.id,\r\n                role: \"1\",\r\n                status: 1,\r\n              };\r\n              userListAPI\r\n                .addUser(user)\r\n                .then(function (newUser) {\r\n                  const data = {\r\n                    id: res.data.id,\r\n                    phone: \"+84\" + companyRegister.phone.substring(1),\r\n                    address: companyRegister.address,\r\n                    dateCreate: Moment(new Date()).format(\r\n                      \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\r\n                    ),\r\n                    adminId: newUser.data.id,\r\n                    status: 1,\r\n                  };\r\n                  companyListAPI.updateCompany(data).then(function () {\r\n                    toast.success(\"Add company successfully\", {\r\n                      position: toast.POSITION.TOP_CENTER,\r\n                    });\r\n                    history.push(\"/company-list\");\r\n                  });\r\n                })\r\n                .catch(function (error) {\r\n                  console.log(error);\r\n                });\r\n            });\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n  function handleConfirm(e) {\r\n    e.preventDefault();\r\n    var pattern = new RegExp(\r\n      /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i\r\n    );\r\n    if (companyRegister.company_name.length > 255) {\r\n      setError({\r\n        ...error,\r\n        company_name: true,\r\n        message: \"Company name max length 255 characters\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          company_name: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (companyRegister.company_name === \"\") {\r\n      setError({\r\n        ...error,\r\n        company_name: true,\r\n        message: \"Company name must not empty\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          company_name: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (companyRegister.manager_name.length > 255) {\r\n      setError({\r\n        ...error,\r\n        manager_name: true,\r\n        message: \"Manager name max length 255 characters\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          manager_name: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (companyRegister.manager_name === \"\") {\r\n      setError({\r\n        ...error,\r\n        manager_name: true,\r\n        message: \"Manager name must not empty\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          manager_name: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (companyRegister.phone === null) {\r\n      setError({\r\n        ...error,\r\n        phone: true,\r\n        message: \"Phone number must not empty\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          phone: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (!companyRegister.phone.trim().match(\"^[0-9]{10}$\")) {\r\n      setError({\r\n        ...error,\r\n        phone: true,\r\n        message: \"Invalid phone number\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          phone: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (companyRegister.manager_email === \"\") {\r\n      setError({\r\n        ...error,\r\n        email: true,\r\n        message: \"Please enter email\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          email: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (!pattern.test(companyRegister.manager_email)) {\r\n      setError({\r\n        ...error,\r\n        email: true,\r\n        message: \"Invalid email\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          email: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (companyRegister.address.length > 255) {\r\n      setError({\r\n        ...error,\r\n        address: true,\r\n        message: \"Address max length 255 characters\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          address: false,\r\n          message: \"\",\r\n        });\r\n      }, 3000);\r\n    } else {\r\n      const phone = \"84\" + companyRegister.phone.substring(1);\r\n      validateAPI\r\n        .checkEmail(companyRegister.manager_email)\r\n        .then(function () {\r\n          validateAPI\r\n            .checkPhone(phone)\r\n            .then(function () {\r\n              setConfirm(true);\r\n            })\r\n            .catch(function () {\r\n              setError({\r\n                ...error,\r\n                phone: true,\r\n                message: \"Phone number is exist in system\",\r\n              });\r\n              setTimeout(() => {\r\n                setError({\r\n                  ...error,\r\n                  phone: false,\r\n                  message: \"\",\r\n                });\r\n              }, 3000);\r\n            });\r\n        })\r\n        .catch(function () {\r\n          setError({\r\n            ...error,\r\n            email: true,\r\n            message: \"Email is exist in system\",\r\n          });\r\n          setTimeout(() => {\r\n            setError({\r\n              ...error,\r\n              email: false,\r\n              message: \"\",\r\n            });\r\n          }, 3000);\r\n        });\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <SidebarAdmin />\r\n      <div className=\"main-panel\">\r\n        <Container fluid={true}>\r\n          <Snackbar\r\n            open={error.company_name}\r\n            autoHideDuration={3000}\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n            TransitionComponent={TransitionLeft}\r\n          >\r\n            <Alert variant=\"filled\" severity=\"error\">\r\n              {error.message}\r\n            </Alert>\r\n          </Snackbar>\r\n          <Snackbar\r\n            open={error.address}\r\n            autoHideDuration={3000}\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n            TransitionComponent={TransitionLeft}\r\n          >\r\n            <Alert variant=\"filled\" severity=\"error\">\r\n              {error.message}\r\n            </Alert>\r\n          </Snackbar>\r\n          <Snackbar\r\n            open={error.phone}\r\n            autoHideDuration={3000}\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n            TransitionComponent={TransitionLeft}\r\n          >\r\n            <Alert variant=\"filled\" severity=\"error\">\r\n              {error.message}\r\n            </Alert>\r\n          </Snackbar>\r\n          <Snackbar\r\n            open={error.manager_name}\r\n            autoHideDuration={3000}\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n            TransitionComponent={TransitionLeft}\r\n          >\r\n            <Alert variant=\"filled\" severity=\"error\">\r\n              {error.message}\r\n            </Alert>\r\n          </Snackbar>\r\n          <Snackbar\r\n            open={error.email}\r\n            autoHideDuration={3000}\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n            TransitionComponent={TransitionLeft}\r\n          >\r\n            <Alert variant=\"filled\" severity=\"error\">\r\n              {error.message}\r\n            </Alert>\r\n          </Snackbar>\r\n\r\n          <div>\r\n            <img style={{ marginTop: \"20px\" }} src={register} alt=\"\" />\r\n          </div>\r\n          <Form\r\n            style={{\r\n              width: \"60%\",\r\n              marginLeft: \"auto\",\r\n              marginRight: \"auto\",\r\n              marginTop: 50,\r\n              textAlign: \"left\",\r\n            }}\r\n          >\r\n            <Row>\r\n              <Col sm={3}>\r\n                <Label style={{ fontSize: 20, color: \"blue\" }}>\r\n                  Company Name\r\n                </Label>\r\n              </Col>\r\n              <Col>\r\n                <TextField\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  type=\"text\"\r\n                  name=\"company_name\"\r\n                  required\r\n                  size=\"small\"\r\n                  error={error.company_name}\r\n                  onChange={handleChange}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: 20 }}>\r\n              <Col sm={3}>\r\n                <Label style={{ fontSize: 20, color: \"blue\" }}>\r\n                  Manager Name\r\n                </Label>\r\n              </Col>\r\n              <Col>\r\n                <TextField\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  type=\"text\"\r\n                  name=\"manager_name\"\r\n                  required\r\n                  error={error.manager_name}\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: 20 }}>\r\n              <Col sm={3}>\r\n                <Label style={{ fontSize: 20, color: \"blue\" }}>\r\n                  Phone Number\r\n                </Label>\r\n              </Col>\r\n              <Col>\r\n                <TextField\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  type=\"phone\"\r\n                  name=\"phone\"\r\n                  required\r\n                  size=\"small\"\r\n                  error={error.phone}\r\n                  onChange={handleChange}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: 20 }}>\r\n              <Col sm={3}>\r\n                <Label style={{ fontSize: 20, color: \"blue\" }}>\r\n                  Manager Email\r\n                </Label>\r\n              </Col>\r\n              <Col>\r\n                <TextField\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  type=\"email\"\r\n                  name=\"manager_email\"\r\n                  required\r\n                  error={error.email}\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: 20 }}>\r\n              <Col sm={3}>\r\n                <Label style={{ fontSize: 20, color: \"blue\" }}>\r\n                  Street Address\r\n                </Label>\r\n              </Col>\r\n              <Col>\r\n                <TextField\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  type=\"text\"\r\n                  name=\"address\"\r\n                  required\r\n                  error={error.address}\r\n                  size=\"small\"\r\n                  onChange={handleChange}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n          <Button\r\n            style={{ marginTop: 20 }}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            onClick={handleConfirm}\r\n          >\r\n            Verification\r\n          </Button>\r\n          <Dialog open={confirm} fullWidth>\r\n            <DialogTitle>Confirm Information</DialogTitle>\r\n            <DialogContent>\r\n              <Form style={{ textAlign: \"left\", fontSize: 18 }}>\r\n                <Row>\r\n                  <Col sm={4}>\r\n                    <Label>Company Name:</Label>\r\n                  </Col>\r\n                  <Col>\r\n                    <Label>{companyRegister.company_name}</Label>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col sm={4}>\r\n                    <Label>Manager Name:</Label>\r\n                  </Col>\r\n                  <Col>\r\n                    <Label>{companyRegister.manager_name}</Label>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col sm={4}>\r\n                    <Label>Phone Number:</Label>\r\n                  </Col>\r\n                  <Col>\r\n                    <Label>{companyRegister.phone}</Label>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col sm={4}>\r\n                    <Label>Manager Email:</Label>\r\n                  </Col>\r\n                  <Col>\r\n                    <Label>{companyRegister.manager_email}</Label>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col sm={4}>\r\n                    <Label>Street Address:</Label>\r\n                  </Col>\r\n                  <Col>\r\n                    <Label>{companyRegister.address}</Label>\r\n                  </Col>\r\n                </Row>\r\n              </Form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                onClick={() => setConfirm(false)}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={handleSubmit}\r\n              >\r\n                Create\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompanyRegister;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Profile\\Profile.js",["301"],"import {\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Container,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport companyListAPI from \"../../api/companyListAPI\";\r\nimport \"../../css/Profile.css\";\r\nimport { getUser, removeUserSession } from \"../../utils/Common\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport departmentAPI from \"../../api/departmentAPI\";\r\nimport Navbar from \"../Navbar/Navbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport BusinessIcon from \"@material-ui/icons/Business\";\r\nimport {\r\n  Card,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport md5 from \"md5\";\r\nimport userListAPI from \"../../api/userListAPI\";\r\nimport * as Icon from \"react-icons/ai\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nfunction Profile() {\r\n  const history = useHistory();\r\n  const [changePassword, setChangePassword] = useState(false);\r\n  const [avatar, setAvatar] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n  const [department, setDepartment] = useState(\"\");\r\n  const [childDepartment, setChildDepartment] = useState(\"\");\r\n  const [oldPass, setOldPass] = useState(\"\");\r\n  const [password, setPassword] = useState({\r\n    current_pass: \"\",\r\n    new_pass: \"\",\r\n    confirm_pass: \"\",\r\n  });\r\n  const [user1, setUser] = useState([]);\r\n  const [error, setError] = useState({\r\n    old: false,\r\n    message_old: \"\",\r\n    new: false,\r\n    message_new: \"\",\r\n    confirm_new: false,\r\n    message_confirm: \"\",\r\n  });\r\n  const [userProfile, setUserProfile] = useState({\r\n    username: \"\",\r\n    address: \"\",\r\n  });\r\n  const [newAvater, setNewAvatar] = useState(false);\r\n  const [error1, setError1] = useState(true);\r\n  const [error2, setError2] = useState(true);\r\n  const [error3, setError3] = useState({\r\n    1: true,\r\n    2: true,\r\n    3: true,\r\n  });\r\n  function handleOnChange(e) {\r\n    const target = e.target;\r\n    const name = target.name;\r\n    const value = target.value;\r\n    setPassword({\r\n      ...password,\r\n      [name]: value,\r\n    });\r\n  }\r\n  const [open, setOpen] = useState(false);\r\n  useEffect(() => {\r\n    async function fetPassword() {\r\n      try {\r\n        const response = await userListAPI.getUserById(getUser().Id);\r\n        setOldPass(response.data.password);\r\n        setUser(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetPassword();\r\n  }, []);\r\n  function handleChangePassword(e) {\r\n    e.preventDefault();\r\n    const md5CurrentPass = md5(password.current_pass);\r\n    var pattern = new RegExp(\r\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$/\r\n    );\r\n    if (password.current_pass.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        old: true,\r\n        message_old: \"Please enter current password\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          old: false,\r\n          message_old: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (password.new_pass.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        new: true,\r\n        message_new: \"Please enter new password\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          new: false,\r\n          message_new: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (password.confirm_pass.trim() === \"\") {\r\n      setError({\r\n        ...error,\r\n        confirm_new: true,\r\n        message_confirm: \"Please enter confirm new password\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          confirm_new: false,\r\n          message_confirm: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (!pattern.test(password.new_pass.trim())) {\r\n      setError({\r\n        ...error,\r\n        new: true,\r\n        message_new: \"Password must be at least 6 characters, 1 upper case\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          confirm_new: false,\r\n          message_confirm: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (password.new_pass.trim() !== password.confirm_pass.trim()) {\r\n      setError({\r\n        ...error,\r\n        confirm_new: true,\r\n        message_confirm: \"Password confirm is not match\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          confirm_new: false,\r\n          message_confirm: \"\",\r\n        });\r\n      }, 3000);\r\n    } else if (md5CurrentPass !== oldPass) {\r\n      setError({\r\n        ...error,\r\n        old: true,\r\n        message_old: \"Current password is incorrect\",\r\n      });\r\n      setTimeout(() => {\r\n        setError({\r\n          ...error,\r\n          old: false,\r\n          message_old: \"\",\r\n        });\r\n      }, 3000);\r\n    } else {\r\n      const md5Newpass = md5(password.new_pass);\r\n      const params = {\r\n        id: getUser().Id,\r\n        oldPassword: md5CurrentPass,\r\n        newPassword: md5Newpass,\r\n      };\r\n      userListAPI\r\n        .changePassword(params)\r\n        .then(function () {\r\n          toast.success(\"Change password successfully\", {\r\n            position: toast.POSITION.TOP_CENTER,\r\n          });\r\n          setChangePassword(false);\r\n          setTimeout(() => {\r\n            removeUserSession();\r\n            history.push(\"/\");\r\n          }, 6000);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    async function fetCompany() {\r\n      try {\r\n        const response = await companyListAPI.getCompanyById(\r\n          getUser().CompanyId\r\n        );\r\n        setCompany(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetCompany();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function fetDepartment() {\r\n      try {\r\n        const response = await departmentAPI.getDepartmentById(\r\n          getUser().DepartmentId\r\n        );\r\n        setDepartment(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetDepartment();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function fetSubDepartment() {\r\n      try {\r\n        const response = await departmentAPI.getSubDepartmentById(\r\n          getUser().SubDepartmentId\r\n        );\r\n        setChildDepartment(response.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetSubDepartment();\r\n  }, []);\r\n\r\n  function handleNewAvatar(e) {\r\n    e.preventDefault();\r\n    const url = avatar.substring(23);\r\n    const params = {\r\n      id: getUser().Id,\r\n      avatar: url,\r\n      password: oldPass,\r\n      phone: getUser().Phone,\r\n      address: getUser().Address,\r\n      subDepartmentId: getUser().SubDepartmentId,\r\n      departmentId: getUser().DepartmentId,\r\n    };\r\n    userListAPI\r\n      .changeAvatar(params)\r\n      .then(function () {\r\n        window.location.reload();\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n  const [a, setA] = useState(\"\");\r\n  const getBase64FromUrl = async (url) => {\r\n    const data = await fetch(url);\r\n    const blob = await data.blob();\r\n    return new Promise((resolve) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(blob);\r\n      reader.onloadend = function () {\r\n        const base64data = reader.result;\r\n        resolve(base64data);\r\n        setA(base64data);\r\n      };\r\n    });\r\n  };\r\n  getBase64FromUrl(user1.avatar);\r\n  function handleEdit(e) {\r\n    e.preventDefault();\r\n    if (userProfile.address.trim().length > 255) {\r\n      setError3({\r\n        ...error3,\r\n        3: false,\r\n      });\r\n      setTimeout(() => {\r\n        setError3({\r\n          ...error3,\r\n          3: true,\r\n        });\r\n      });\r\n    } else {\r\n      const params = {\r\n        id: getUser().Id,\r\n        password: oldPass,\r\n        avatar: a.substring(37),\r\n        phone: getUser().Phone,\r\n        address: userProfile.address,\r\n        subDepartmentId: getUser().SubDepartmentId,\r\n        departmentId: getUser().DepartmentId,\r\n      };\r\n      userListAPI\r\n        .updateUser(params)\r\n        .then(function () {\r\n          window.location.reload();\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <header>\r\n        <Navbar />\r\n      </header>\r\n      <main className=\"main-panel\" style={{ backgroundColor: \"#e8e7e7\" }}>\r\n        <div className=\"avatar-col\">\r\n          <Label\r\n            style={{\r\n              float: \"left\",\r\n              fontWeight: \"bolder\",\r\n              color: \"white\",\r\n              marginTop: 20,\r\n              marginLeft: 20,\r\n              border: \"1px solid #ffff\",\r\n              borderRadius: \"25px\",\r\n              padding: 10,\r\n            }}\r\n          >\r\n            USER PROFILE\r\n          </Label>\r\n        </div>\r\n        <Container fluid={true}>\r\n          <Col style={{ top: \"-200px\" }}>\r\n            <div>\r\n              <img\r\n                src={user1.avatar}\r\n                alt=\"avatar\"\r\n                style={{ borderRadius: \"50%\" }}\r\n                width=\"300px\"\r\n                height=\"300px\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <input\r\n                accept=\"image/*\"\r\n                id=\"icon-button-file\"\r\n                type=\"file\"\r\n                hidden={true}\r\n                onChange={(e) => {\r\n                  if (e.target.files.length !== 0) {\r\n                    if (\r\n                      e.target.files[0].type !== \"image/jpeg\" &&\r\n                      e.target.files[0].type !== \"image/png\" &&\r\n                      e.target.files[0].type !== \"image/jpg\"\r\n                    ) {\r\n                      setError1(false);\r\n                      setTimeout(() => {\r\n                        setError1(true);\r\n                      }, 3000);\r\n                    } else if (e.target.files[0].size > 31457280) {\r\n                      setError2(false);\r\n                      setTimeout(() => {\r\n                        setError2(true);\r\n                      }, 3000);\r\n                    } else {\r\n                      var file = e.target.files[0];\r\n                      var reader = new FileReader();\r\n                      reader.readAsDataURL(file);\r\n                      reader.onloadend = function () {\r\n                        setAvatar(reader.result);\r\n                      }.bind(this);\r\n                      setNewAvatar(true);\r\n                    }\r\n                  }\r\n                }}\r\n              />\r\n              <label htmlFor=\"icon-button-file\">\r\n                <IconButton\r\n                  color=\"primary\"\r\n                  aria-label=\"upload picture\"\r\n                  component=\"span\"\r\n                >\r\n                  <PhotoCamera />\r\n                </IconButton>\r\n              </label>\r\n              <div hidden={error1} style={{ color: \"red\" }}>\r\n                We only support PNG or JPG pictures.\r\n              </div>\r\n              <div hidden={error2} style={{ color: \"red\" }}>\r\n                We don't support image larger 30MB .\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <Button\r\n                color=\"primary\"\r\n                onClick={() => setChangePassword(!changePassword)}\r\n              >\r\n                Change password\r\n              </Button>\r\n            </div>\r\n          </Col>\r\n          <Row>\r\n            <Col xl={8} style={{ top: \"-200px\" }}>\r\n              <Card>\r\n                <CardHeader\r\n                  style={{ padding: \"1.25rem 1.5rem\", marginBottom: 0 }}\r\n                >\r\n                  <Row>\r\n                    <Col xs={8}>\r\n                      <h5 className=\"mb-0\">My account</h5>\r\n                    </Col>\r\n                    <Col xs={4} className=\"text-right\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        startIcon={<EditIcon />}\r\n                        style={{ float: \"right\" }}\r\n                        size=\"small\"\r\n                        onClick={() => setOpen(true)}\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                    </Col>\r\n                  </Row>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <Form>\r\n                    <h6 className=\"heading-small text-muted mb-4\">\r\n                      User information\r\n                    </h6>\r\n                    <div className=\"pl-lg-4\">\r\n                      <Row>\r\n                        <Col lg={6}>\r\n                          <FormGroup style={{ textAlign: \"left\" }}>\r\n                            <Label\r\n                              className=\"form-control-label\"\r\n                              for=\"input-username\"\r\n                            >\r\n                              Account name\r\n                            </Label>\r\n                            <input\r\n                              id=\"input-username\"\r\n                              name=\"username\"\r\n                              placeholder=\"Username\"\r\n                              type=\"text\"\r\n                              className=\"form-control1-alternative form-control1\"\r\n                              value={getUser().Name}\r\n                              disabled\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                          <FormGroup style={{ textAlign: \"left\" }}>\r\n                            <Label\r\n                              className=\"form-control-label\"\r\n                              for=\"input-email\"\r\n                            >\r\n                              Email\r\n                            </Label>\r\n                            <input\r\n                              id=\"input-email\"\r\n                              placeholder=\"Email\"\r\n                              type=\"email\"\r\n                              className=\"form-control1-alternative form-control1\"\r\n                              value={getUser().Email}\r\n                              disabled\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col lg={6}>\r\n                          <FormGroup style={{ textAlign: \"left\" }}>\r\n                            <Label\r\n                              className=\"form-control-label\"\r\n                              for=\"input-department\"\r\n                            >\r\n                              Department\r\n                            </Label>\r\n                            <input\r\n                              id=\"input-department\"\r\n                              placeholder=\"Department\"\r\n                              type=\"text\"\r\n                              className=\"form-control1-alternative form-control1\"\r\n                              value={department.name}\r\n                              disabled\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                          <FormGroup style={{ textAlign: \"left\" }}>\r\n                            <Label\r\n                              className=\"form-control-label\"\r\n                              for=\"input-username\"\r\n                            >\r\n                              Child Department\r\n                            </Label>\r\n                            <input\r\n                              id=\"input-username\"\r\n                              placeholder=\"Child Department\"\r\n                              type=\"text\"\r\n                              className=\"form-control1-alternative form-control1\"\r\n                              value={childDepartment.name}\r\n                              disabled\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n                      </Row>\r\n                    </div>\r\n                    <hr className=\"my-4\" />\r\n                    <h6 className=\"heading-small text-muted mb-4\">\r\n                      Contact information\r\n                    </h6>\r\n                    <div className=\"pl-lg-4\">\r\n                      <Row>\r\n                        <Col lg={6}>\r\n                          <FormGroup style={{ textAlign: \"left\" }}>\r\n                            <Label\r\n                              className=\"form-control-label\"\r\n                              for=\"input-phone\"\r\n                            >\r\n                              Phone number\r\n                            </Label>\r\n                            <input\r\n                              id=\"input-phone\"\r\n                              placeholder=\"Phone number\"\r\n                              type=\"tel\"\r\n                              className=\"form-control1-alternative form-control1\"\r\n                              value={getUser().Phone}\r\n                              disabled\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n                        <Col lg={6}>\r\n                          <FormGroup style={{ textAlign: \"left\" }}>\r\n                            <Label\r\n                              className=\"form-control-label\"\r\n                              for=\"input-address\"\r\n                            >\r\n                              Address\r\n                            </Label>\r\n                            <input\r\n                              name=\"address\"\r\n                              onChange={(e) =>\r\n                                setUserProfile({\r\n                                  ...userProfile,\r\n                                  address: e.target.value,\r\n                                })\r\n                              }\r\n                              id=\"input-address\"\r\n                              placeholder=\"Address\"\r\n                              type=\"text\"\r\n                              className=\"form-control1-alternative form-control1\"\r\n                              defaultValue={user1.address}\r\n                            />\r\n                            <div hidden={error3[3]} style={{ color: \"red\" }}>\r\n                              Address must not larger 255 characters\r\n                            </div>\r\n                          </FormGroup>\r\n                        </Col>\r\n                      </Row>\r\n                    </div>\r\n                  </Form>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n            <Col xl={4} style={{ top: \"-200px\" }}>\r\n              <Card>\r\n                <CardHeader\r\n                  style={{ padding: \"1.25rem 1.5rem\", marginBottom: 0 }}\r\n                >\r\n                  <Row>\r\n                    <Col>\r\n                      <BusinessIcon color=\"primary\" fontSize=\"large\" />\r\n                      <h5>{company.name}</h5>\r\n                    </Col>\r\n                  </Row>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  <Form>\r\n                    <h6 className=\"heading-small text-muted mb-4\">\r\n                      Company information\r\n                    </h6>\r\n                    <Row>\r\n                      <Col>\r\n                        <FormGroup style={{ textAlign: \"left\" }}>\r\n                          <Label\r\n                            className=\"form-control-label\"\r\n                            for=\"input-address\"\r\n                          >\r\n                            Address\r\n                          </Label>\r\n                          <input\r\n                            id=\"input-address\"\r\n                            placeholder=\"Address\"\r\n                            type=\"text\"\r\n                            className=\"form-control1-alternative form-control1\"\r\n                            value={company.address}\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                  </Form>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Dialog open={changePassword}>\r\n            <DialogTitle>Create new password</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText>\r\n                To change your password, please enter your current password\r\n                here. And enter new your password then confirm.\r\n              </DialogContentText>\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                name=\"current_pass\"\r\n                label=\"Current Password\"\r\n                type=\"password\"\r\n                onChange={handleOnChange}\r\n                error={error.old}\r\n                helperText={error.message_old}\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                autoFocus\r\n                name=\"new_pass\"\r\n                margin=\"dense\"\r\n                label=\"New Password\"\r\n                type=\"password\"\r\n                error={error.new}\r\n                helperText={error.message_new}\r\n                onChange={handleOnChange}\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                autoFocus\r\n                name=\"confirm_pass\"\r\n                margin=\"dense\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                error={error.confirm_new}\r\n                helperText={error.message_confirm}\r\n                onChange={handleOnChange}\r\n                fullWidth\r\n              />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                onClick={() => setChangePassword(!changePassword)}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={handleChangePassword}\r\n              >\r\n                Update\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n          <Dialog open={newAvater}>\r\n            <DialogTitle>\r\n              Confirm your new profile picture\r\n              <Icon.AiOutlineClose\r\n                style={{ cursor: \"pointer\", float: \"right\" }}\r\n                onClick={() => {\r\n                  setAvatar(\"\");\r\n                  setNewAvatar(false);\r\n                }}\r\n              />\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <img\r\n                src={avatar}\r\n                style={{ borderRadius: \"50%\" }}\r\n                alt=\"\"\r\n                width=\"400px\"\r\n                height=\"400px\"\r\n              />\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                variant=\"contained\"\r\n                fullWidth\r\n                color=\"primary\"\r\n                onClick={handleNewAvatar}\r\n              >\r\n                Set new profile picture\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n          <Dialog open={open} fullWidth>\r\n            <DialogTitle>Are you want update profile?</DialogTitle>\r\n            <DialogActions>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={() => setOpen(false)}\r\n                color=\"secondary\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={handleEdit}\r\n                color=\"primary\"\r\n                autoFocus\r\n              >\r\n                Update\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\nexport default Profile;\r\n","C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\App\\firebase.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\loginAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\companyListAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\userListAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\Sidebar.js",[],["302","303"],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetAdminCompany\\GetAdminCompany.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\SidebarAdmin.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Navbar\\Navbar.js",["304","305","306"],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Stepper\\ContractStepper.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Stepper\\InvoiceStepper.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\departmentAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\validateAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\axiosClient.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\notiAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetDepartment.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetPhone.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetEmail.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\GetData\\GetCreater.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\invoiceAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\StepDetail.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\api\\contractAPI.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\PDF\\PDF.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\StepDetailContract.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\StepInvoice.js",[],"C:\\Users\\Admin\\Desktop\\EOfficeWeb\\src\\components\\Sidebar\\Stepper.js",[],{"ruleId":"307","replacedBy":"308"},{"ruleId":"309","replacedBy":"310"},{"ruleId":"311","severity":1,"message":"312","line":2,"column":20,"nodeType":"313","messageId":"314","endLine":2,"endColumn":26},{"ruleId":"315","severity":1,"message":"316","line":57,"column":26,"nodeType":"317","messageId":"318","endLine":57,"endColumn":28},{"ruleId":"315","severity":1,"message":"316","line":66,"column":26,"nodeType":"317","messageId":"318","endLine":66,"endColumn":28},{"ruleId":"315","severity":1,"message":"316","line":188,"column":32,"nodeType":"317","messageId":"318","endLine":188,"endColumn":34},{"ruleId":"311","severity":1,"message":"319","line":15,"column":8,"nodeType":"313","messageId":"314","endLine":15,"endColumn":14},{"ruleId":"311","severity":1,"message":"320","line":20,"column":10,"nodeType":"313","messageId":"314","endLine":20,"endColumn":16},{"ruleId":"321","severity":1,"message":"322","line":105,"column":22,"nodeType":"323","messageId":"324","endLine":105,"endColumn":23},{"ruleId":"321","severity":1,"message":"322","line":105,"column":28,"nodeType":"323","messageId":"324","endLine":105,"endColumn":29},{"ruleId":"321","severity":1,"message":"322","line":105,"column":45,"nodeType":"323","messageId":"324","endLine":105,"endColumn":46},{"ruleId":"321","severity":1,"message":"322","line":137,"column":22,"nodeType":"323","messageId":"324","endLine":137,"endColumn":23},{"ruleId":"321","severity":1,"message":"322","line":137,"column":28,"nodeType":"323","messageId":"324","endLine":137,"endColumn":29},{"ruleId":"321","severity":1,"message":"322","line":137,"column":45,"nodeType":"323","messageId":"324","endLine":137,"endColumn":46},{"ruleId":"315","severity":1,"message":"325","line":168,"column":43,"nodeType":"317","messageId":"326","endLine":168,"endColumn":45},{"ruleId":"321","severity":1,"message":"322","line":165,"column":48,"nodeType":"323","messageId":"324","endLine":165,"endColumn":49},{"ruleId":"321","severity":1,"message":"322","line":165,"column":54,"nodeType":"323","messageId":"324","endLine":165,"endColumn":55},{"ruleId":"321","severity":1,"message":"322","line":165,"column":71,"nodeType":"323","messageId":"324","endLine":165,"endColumn":72},{"ruleId":"321","severity":1,"message":"322","line":166,"column":46,"nodeType":"323","messageId":"324","endLine":166,"endColumn":47},{"ruleId":"321","severity":1,"message":"322","line":166,"column":52,"nodeType":"323","messageId":"324","endLine":166,"endColumn":53},{"ruleId":"321","severity":1,"message":"322","line":166,"column":69,"nodeType":"323","messageId":"324","endLine":166,"endColumn":70},{"ruleId":"321","severity":1,"message":"322","line":214,"column":26,"nodeType":"323","messageId":"324","endLine":214,"endColumn":27},{"ruleId":"321","severity":1,"message":"322","line":214,"column":32,"nodeType":"323","messageId":"324","endLine":214,"endColumn":33},{"ruleId":"321","severity":1,"message":"322","line":214,"column":49,"nodeType":"323","messageId":"324","endLine":214,"endColumn":50},{"ruleId":"327","severity":1,"message":"328","line":252,"column":6,"nodeType":"329","endLine":252,"endColumn":8,"suggestions":"330"},{"ruleId":"315","severity":1,"message":"316","line":74,"column":24,"nodeType":"317","messageId":"318","endLine":74,"endColumn":26},{"ruleId":"315","severity":1,"message":"316","line":90,"column":24,"nodeType":"317","messageId":"318","endLine":90,"endColumn":26},{"ruleId":"315","severity":1,"message":"325","line":94,"column":23,"nodeType":"317","messageId":"326","endLine":94,"endColumn":25},{"ruleId":"321","severity":1,"message":"322","line":111,"column":48,"nodeType":"323","messageId":"324","endLine":111,"endColumn":49},{"ruleId":"321","severity":1,"message":"322","line":111,"column":54,"nodeType":"323","messageId":"324","endLine":111,"endColumn":55},{"ruleId":"321","severity":1,"message":"322","line":111,"column":71,"nodeType":"323","messageId":"324","endLine":111,"endColumn":72},{"ruleId":"321","severity":1,"message":"322","line":112,"column":46,"nodeType":"323","messageId":"324","endLine":112,"endColumn":47},{"ruleId":"321","severity":1,"message":"322","line":112,"column":52,"nodeType":"323","messageId":"324","endLine":112,"endColumn":53},{"ruleId":"321","severity":1,"message":"322","line":112,"column":69,"nodeType":"323","messageId":"324","endLine":112,"endColumn":70},{"ruleId":"321","severity":1,"message":"322","line":144,"column":26,"nodeType":"323","messageId":"324","endLine":144,"endColumn":27},{"ruleId":"321","severity":1,"message":"322","line":144,"column":32,"nodeType":"323","messageId":"324","endLine":144,"endColumn":33},{"ruleId":"321","severity":1,"message":"322","line":144,"column":49,"nodeType":"323","messageId":"324","endLine":144,"endColumn":50},{"ruleId":"327","severity":1,"message":"328","line":184,"column":6,"nodeType":"329","endLine":184,"endColumn":8,"suggestions":"331"},{"ruleId":"315","severity":1,"message":"316","line":177,"column":37,"nodeType":"317","messageId":"318","endLine":177,"endColumn":39},{"ruleId":"315","severity":1,"message":"316","line":188,"column":37,"nodeType":"317","messageId":"318","endLine":188,"endColumn":39},{"ruleId":"315","severity":1,"message":"316","line":201,"column":39,"nodeType":"317","messageId":"318","endLine":201,"endColumn":41},{"ruleId":"315","severity":1,"message":"316","line":209,"column":36,"nodeType":"317","messageId":"318","endLine":209,"endColumn":38},{"ruleId":"315","severity":1,"message":"316","line":217,"column":35,"nodeType":"317","messageId":"318","endLine":217,"endColumn":37},{"ruleId":"315","severity":1,"message":"316","line":229,"column":39,"nodeType":"317","messageId":"318","endLine":229,"endColumn":41},{"ruleId":"315","severity":1,"message":"316","line":237,"column":36,"nodeType":"317","messageId":"318","endLine":237,"endColumn":38},{"ruleId":"315","severity":1,"message":"316","line":245,"column":35,"nodeType":"317","messageId":"318","endLine":245,"endColumn":37},{"ruleId":"315","severity":1,"message":"316","line":592,"column":32,"nodeType":"317","messageId":"318","endLine":592,"endColumn":34},{"ruleId":"327","severity":1,"message":"332","line":82,"column":6,"nodeType":"329","endLine":82,"endColumn":8,"suggestions":"333"},{"ruleId":"321","severity":1,"message":"322","line":127,"column":24,"nodeType":"323","messageId":"324","endLine":127,"endColumn":25},{"ruleId":"321","severity":1,"message":"322","line":127,"column":30,"nodeType":"323","messageId":"324","endLine":127,"endColumn":31},{"ruleId":"321","severity":1,"message":"322","line":127,"column":47,"nodeType":"323","messageId":"324","endLine":127,"endColumn":48},{"ruleId":"321","severity":1,"message":"322","line":191,"column":24,"nodeType":"323","messageId":"324","endLine":191,"endColumn":25},{"ruleId":"321","severity":1,"message":"322","line":191,"column":30,"nodeType":"323","messageId":"324","endLine":191,"endColumn":31},{"ruleId":"321","severity":1,"message":"322","line":191,"column":47,"nodeType":"323","messageId":"324","endLine":191,"endColumn":48},{"ruleId":"321","severity":1,"message":"322","line":253,"column":24,"nodeType":"323","messageId":"324","endLine":253,"endColumn":25},{"ruleId":"321","severity":1,"message":"322","line":253,"column":30,"nodeType":"323","messageId":"324","endLine":253,"endColumn":31},{"ruleId":"321","severity":1,"message":"322","line":253,"column":47,"nodeType":"323","messageId":"324","endLine":253,"endColumn":48},{"ruleId":"321","severity":1,"message":"322","line":319,"column":24,"nodeType":"323","messageId":"324","endLine":319,"endColumn":25},{"ruleId":"321","severity":1,"message":"322","line":319,"column":30,"nodeType":"323","messageId":"324","endLine":319,"endColumn":31},{"ruleId":"321","severity":1,"message":"322","line":319,"column":47,"nodeType":"323","messageId":"324","endLine":319,"endColumn":48},{"ruleId":"315","severity":1,"message":"316","line":125,"column":30,"nodeType":"317","messageId":"318","endLine":125,"endColumn":32},{"ruleId":"315","severity":1,"message":"316","line":132,"column":30,"nodeType":"317","messageId":"318","endLine":132,"endColumn":32},{"ruleId":"315","severity":1,"message":"316","line":139,"column":30,"nodeType":"317","messageId":"318","endLine":139,"endColumn":32},{"ruleId":"321","severity":1,"message":"322","line":362,"column":24,"nodeType":"323","messageId":"324","endLine":362,"endColumn":25},{"ruleId":"321","severity":1,"message":"322","line":362,"column":30,"nodeType":"323","messageId":"324","endLine":362,"endColumn":31},{"ruleId":"321","severity":1,"message":"322","line":362,"column":47,"nodeType":"323","messageId":"324","endLine":362,"endColumn":48},{"ruleId":"315","severity":1,"message":"316","line":899,"column":33,"nodeType":"317","messageId":"318","endLine":899,"endColumn":35},{"ruleId":"334","severity":1,"message":"335","line":1109,"column":19,"nodeType":"336","endLine":1109,"endColumn":49},{"ruleId":"334","severity":1,"message":"335","line":1111,"column":19,"nodeType":"336","endLine":1111,"endColumn":47},{"ruleId":"321","severity":1,"message":"322","line":67,"column":22,"nodeType":"323","messageId":"324","endLine":67,"endColumn":23},{"ruleId":"321","severity":1,"message":"322","line":67,"column":28,"nodeType":"323","messageId":"324","endLine":67,"endColumn":29},{"ruleId":"321","severity":1,"message":"322","line":67,"column":45,"nodeType":"323","messageId":"324","endLine":67,"endColumn":46},{"ruleId":"321","severity":1,"message":"322","line":80,"column":26,"nodeType":"323","messageId":"324","endLine":80,"endColumn":27},{"ruleId":"321","severity":1,"message":"322","line":80,"column":32,"nodeType":"323","messageId":"324","endLine":80,"endColumn":33},{"ruleId":"321","severity":1,"message":"322","line":80,"column":49,"nodeType":"323","messageId":"324","endLine":80,"endColumn":50},{"ruleId":"321","severity":1,"message":"322","line":92,"column":30,"nodeType":"323","messageId":"324","endLine":92,"endColumn":31},{"ruleId":"321","severity":1,"message":"322","line":92,"column":36,"nodeType":"323","messageId":"324","endLine":92,"endColumn":37},{"ruleId":"321","severity":1,"message":"322","line":92,"column":53,"nodeType":"323","messageId":"324","endLine":92,"endColumn":54},{"ruleId":"321","severity":1,"message":"322","line":104,"column":32,"nodeType":"323","messageId":"324","endLine":104,"endColumn":33},{"ruleId":"321","severity":1,"message":"322","line":104,"column":38,"nodeType":"323","messageId":"324","endLine":104,"endColumn":39},{"ruleId":"321","severity":1,"message":"322","line":104,"column":55,"nodeType":"323","messageId":"324","endLine":104,"endColumn":56},{"ruleId":"321","severity":1,"message":"322","line":121,"column":36,"nodeType":"323","messageId":"324","endLine":121,"endColumn":37},{"ruleId":"321","severity":1,"message":"322","line":121,"column":42,"nodeType":"323","messageId":"324","endLine":121,"endColumn":43},{"ruleId":"321","severity":1,"message":"322","line":121,"column":59,"nodeType":"323","messageId":"324","endLine":121,"endColumn":60},{"ruleId":"337","severity":1,"message":"338","line":374,"column":25,"nodeType":"339","messageId":"340","endLine":374,"endColumn":29,"fix":"341"},{"ruleId":"307","replacedBy":"342"},{"ruleId":"309","replacedBy":"343"},{"ruleId":"311","severity":1,"message":"344","line":16,"column":8,"nodeType":"313","messageId":"314","endLine":16,"endColumn":21},{"ruleId":"315","severity":1,"message":"316","line":47,"column":34,"nodeType":"317","messageId":"318","endLine":47,"endColumn":36},{"ruleId":"327","severity":1,"message":"345","line":72,"column":6,"nodeType":"329","endLine":72,"endColumn":8,"suggestions":"346"},"no-native-reassign",["347"],"no-negated-in-lhs",["348"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'notDoc' is defined but never used.","'hidden' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","Array.prototype.map() expects a return value from arrow function.","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addEventListeners' and 'removeEventListeners'. Either include them or remove the dependency array.","ArrayExpression",["349"],["350"],"React Hook useEffect has a missing dependency: 'param.id'. Either include it or remove the dependency array.",["351"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"352","text":"353"},["347"],["348"],"'MoreHorizIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["354"],"no-global-assign","no-unsafe-negation",{"desc":"355","fix":"356"},{"desc":"355","fix":"357"},{"desc":"358","fix":"359"},[10565,10576],"",{"desc":"360","fix":"361"},"Update the dependencies array to be: [addEventListeners, removeEventListeners]",{"range":"362","text":"363"},{"range":"364","text":"363"},"Update the dependencies array to be: [param.id]",{"range":"365","text":"366"},"Update the dependencies array to be: [history]",{"range":"367","text":"368"},[7227,7229],"[addEventListeners, removeEventListeners]",[5540,5542],[3084,3086],"[param.id]",[2467,2469],"[history]"]