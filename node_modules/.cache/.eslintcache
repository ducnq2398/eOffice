[{"/Users/macos/Desktop/EOfficeWeb/src/index.js":"1","/Users/macos/Desktop/EOfficeWeb/src/components/App/App.js":"2","/Users/macos/Desktop/EOfficeWeb/src/components/RouterURL/RouterURL.js":"3","/Users/macos/Desktop/EOfficeWeb/src/components/AdminManager/AdminManager.js":"4","/Users/macos/Desktop/EOfficeWeb/src/components/Login/Login.js":"5","/Users/macos/Desktop/EOfficeWeb/src/components/AdminLogin/AdminLogin.js":"6","/Users/macos/Desktop/EOfficeWeb/src/utils/Common.js":"7","/Users/macos/Desktop/EOfficeWeb/src/components/CompanyRegister/CompanyRegister.js":"8","/Users/macos/Desktop/EOfficeWeb/src/components/CompanyList/CompanyList.js":"9","/Users/macos/Desktop/EOfficeWeb/src/components/Error/Error.js":"10","/Users/macos/Desktop/EOfficeWeb/src/components/ForgotPassword/ForgotPassword.js":"11","/Users/macos/Desktop/EOfficeWeb/src/components/CreateDocument/CreateInvoice.js":"12","/Users/macos/Desktop/EOfficeWeb/src/components/CreateDocument/InvoiceContent.js":"13","/Users/macos/Desktop/EOfficeWeb/src/components/Dashboard/Dashboard.js":"14","/Users/macos/Desktop/EOfficeWeb/src/components/CreateDocument/ContractContent.js":"15","/Users/macos/Desktop/EOfficeWeb/src/components/Document/Document.js":"16","/Users/macos/Desktop/EOfficeWeb/src/components/Notification/Notification.js":"17","/Users/macos/Desktop/EOfficeWeb/src/components/Profile/Profile.js":"18","/Users/macos/Desktop/EOfficeWeb/src/components/DetailDocument/InvoiceDetail.js":"19","/Users/macos/Desktop/EOfficeWeb/src/components/DetailDocument/ContractDetail.js":"20","/Users/macos/Desktop/EOfficeWeb/src/components/AdminCompany/UserManagement/UserManagement.js":"21","/Users/macos/Desktop/EOfficeWeb/src/components/AdminCompany/DepartmentManagement/DepartmentManagement.js":"22","/Users/macos/Desktop/EOfficeWeb/src/components/CreateDocument/CreateContract.js":"23","/Users/macos/Desktop/EOfficeWeb/src/components/EditCompany/EditCompany.js":"24","/Users/macos/Desktop/EOfficeWeb/src/components/ForgotPassword/ResetPassword.js":"25","/Users/macos/Desktop/EOfficeWeb/src/components/App/firebase.js":"26","/Users/macos/Desktop/EOfficeWeb/src/components/Sidebar/SidebarAdmin.js":"27","/Users/macos/Desktop/EOfficeWeb/src/api/loginAPI.js":"28","/Users/macos/Desktop/EOfficeWeb/src/api/validateAPI.js":"29","/Users/macos/Desktop/EOfficeWeb/src/components/GetAdminCompany/GetAdminCompany.js":"30","/Users/macos/Desktop/EOfficeWeb/src/api/companyListAPI.js":"31","/Users/macos/Desktop/EOfficeWeb/src/api/departmentAPI.js":"32","/Users/macos/Desktop/EOfficeWeb/src/api/userListAPI.js":"33","/Users/macos/Desktop/EOfficeWeb/src/components/Sidebar/StepInvoice.js":"34","/Users/macos/Desktop/EOfficeWeb/src/components/Navbar/Navbar.js":"35","/Users/macos/Desktop/EOfficeWeb/src/components/Sidebar/Stepper.js":"36","/Users/macos/Desktop/EOfficeWeb/src/api/axiosClient.js":"37","/Users/macos/Desktop/EOfficeWeb/src/components/GetData/GetDepartment.js":"38","/Users/macos/Desktop/EOfficeWeb/src/components/GetData/GetPhone.js":"39","/Users/macos/Desktop/EOfficeWeb/src/components/GetData/GetEmail.js":"40","/Users/macos/Desktop/EOfficeWeb/src/components/Sidebar/StepDetailContract.js":"41","/Users/macos/Desktop/EOfficeWeb/src/api/contractAPI.js":"42","/Users/macos/Desktop/EOfficeWeb/src/components/GetData/GetCreater.js":"43","/Users/macos/Desktop/EOfficeWeb/src/api/notiAPI.js":"44","/Users/macos/Desktop/EOfficeWeb/src/components/PDF/PDF.js":"45","/Users/macos/Desktop/EOfficeWeb/src/api/invoiceAPI.js":"46","/Users/macos/Desktop/EOfficeWeb/src/components/Sidebar/StepDetail.js":"47","/Users/macos/Desktop/EOfficeWeb/src/components/Stepper/ContractStepper.js":"48","/Users/macos/Desktop/EOfficeWeb/src/components/Stepper/InvoiceStepper.js":"49"},{"size":255,"mtime":1616127955376,"results":"50","hashOfConfig":"51"},{"size":346,"mtime":1616127955310,"results":"52","hashOfConfig":"51"},{"size":4083,"mtime":1616127955320,"results":"53","hashOfConfig":"51"},{"size":438,"mtime":1616127955310,"results":"54","hashOfConfig":"51"},{"size":5090,"mtime":1616226870372,"results":"55","hashOfConfig":"51"},{"size":2922,"mtime":1616474217227,"results":"56","hashOfConfig":"51"},{"size":525,"mtime":1616127955377,"results":"57","hashOfConfig":"51"},{"size":16434,"mtime":1616654864519,"results":"58","hashOfConfig":"51"},{"size":7179,"mtime":1616474217228,"results":"59","hashOfConfig":"51"},{"size":670,"mtime":1616127955315,"results":"60","hashOfConfig":"51"},{"size":4734,"mtime":1617011633240,"results":"61","hashOfConfig":"51"},{"size":21913,"mtime":1617011633236,"results":"62","hashOfConfig":"51"},{"size":10066,"mtime":1617011633237,"results":"63","hashOfConfig":"51"},{"size":11732,"mtime":1617011633237,"results":"64","hashOfConfig":"51"},{"size":13450,"mtime":1617011633235,"results":"65","hashOfConfig":"51"},{"size":25534,"mtime":1617011633239,"results":"66","hashOfConfig":"51"},{"size":6466,"mtime":1617011633241,"results":"67","hashOfConfig":"51"},{"size":23348,"mtime":1617011633241,"results":"68","hashOfConfig":"51"},{"size":9296,"mtime":1617011633238,"results":"69","hashOfConfig":"51"},{"size":11776,"mtime":1617011633238,"results":"70","hashOfConfig":"51"},{"size":37346,"mtime":1617011633234,"results":"71","hashOfConfig":"51"},{"size":25571,"mtime":1617011633234,"results":"72","hashOfConfig":"51"},{"size":30350,"mtime":1617011633235,"results":"73","hashOfConfig":"51"},{"size":7849,"mtime":1617011633239,"results":"74","hashOfConfig":"51"},{"size":4456,"mtime":1617011633240,"results":"75","hashOfConfig":"51"},{"size":408,"mtime":1616127955310,"results":"76","hashOfConfig":"51"},{"size":2491,"mtime":1616474217229,"results":"77","hashOfConfig":"51"},{"size":327,"mtime":1616127955308,"results":"78","hashOfConfig":"51"},{"size":566,"mtime":1616127955308,"results":"79","hashOfConfig":"51"},{"size":762,"mtime":1616127955316,"results":"80","hashOfConfig":"51"},{"size":1370,"mtime":1617011633232,"results":"81","hashOfConfig":"51"},{"size":2328,"mtime":1617011633232,"results":"82","hashOfConfig":"51"},{"size":2095,"mtime":1617011633233,"results":"83","hashOfConfig":"51"},{"size":919,"mtime":1616127955322,"results":"84","hashOfConfig":"51"},{"size":7573,"mtime":1617011633240,"results":"85","hashOfConfig":"51"},{"size":985,"mtime":1616127955323,"results":"86","hashOfConfig":"51"},{"size":153,"mtime":1616127955307,"results":"87","hashOfConfig":"51"},{"size":801,"mtime":1616127955316,"results":"88","hashOfConfig":"51"},{"size":764,"mtime":1616127955317,"results":"89","hashOfConfig":"51"},{"size":764,"mtime":1616127955317,"results":"90","hashOfConfig":"51"},{"size":5015,"mtime":1617011633242,"results":"91","hashOfConfig":"51"},{"size":1627,"mtime":1616474217226,"results":"92","hashOfConfig":"51"},{"size":768,"mtime":1616127955316,"results":"93","hashOfConfig":"51"},{"size":349,"mtime":1617011633233,"results":"94","hashOfConfig":"51"},{"size":1230,"mtime":1616127955319,"results":"95","hashOfConfig":"51"},{"size":1584,"mtime":1617011633232,"results":"96","hashOfConfig":"51"},{"size":3456,"mtime":1617011633242,"results":"97","hashOfConfig":"51"},{"size":351,"mtime":1616127955323,"results":"98","hashOfConfig":"51"},{"size":291,"mtime":1616474217230,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yx653h",{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/macos/Desktop/EOfficeWeb/src/index.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/App/App.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/RouterURL/RouterURL.js",["214"],"import {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport AdminLogin from \"../AdminLogin/AdminLogin\";\nimport AdminManager from \"../AdminManager/AdminManager\";\nimport Login from \"../Login/Login\";\nimport CompanyRegister from \"../CompanyRegister/CompanyRegister\";\nimport CompanyList from \"../CompanyList/CompanyList\";\nimport ForgotPassword from \"../ForgotPassword/ForgotPassword\";\nimport EditCompany from \"../EditCompany/EditCompany\";\nimport { getToken, getUser } from \"../../utils/Common\";\nimport ResetPassword from \"../ForgotPassword/ResetPassword\";\nimport UserManagement from \"../AdminCompany/UserManagement/UserManagement\";\nimport CreateContract from \"../CreateDocument/CreateContract\";\nimport Dashboard from \"../Dashboard/Dashboard\";\nimport Document from \"../Document/Document\";\nimport Error from \"../Error/Error\";\nimport DepartmentManagerment from \"../AdminCompany/DepartmentManagement/DepartmentManagement\";\nimport Notification from \"../Notification/Notification\";\nimport CreateInvoice from \"../CreateDocument/CreateInvoice\";\nimport InvoiceContent from \"../CreateDocument/InvoiceContent\";\nimport Profile from \"../Profile/Profile\";\nimport ContractContent from \"../CreateDocument/ContractContent\";\nimport InvoiceDetail from \"../DetailDocument/InvoiceDetail\";\nimport ContractDetail from \"../DetailDocument/ContractDetail\";\n\nfunction RouterURL() {\n  const PrivateRoute = ({ component: Component, ...rest }) => (\n    <Route\n      {...rest}\n      render={(props) =>\n        getToken() && getUser().Role === \"3\" ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{ pathname: \"/error\", state: { from: props.location } }}\n          />\n        )\n      }\n    />\n  );\n\n  const AdminRoute = ({ component: Component, ...rest }) => (\n    <Route\n      {...rest}\n      render={(props) =>\n        getToken() && getUser().Role === \"1\" ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{ pathname: \"/error\", state: { from: props.location } }}\n          />\n        )\n      }\n    />\n  );\n  const UserRoute = ({ component: Component, ...rest }) => (\n    <Route\n      {...rest}\n      render={(props) =>\n        getToken() && getUser().Role !== \"3\" ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{ pathname: \"/error\", state: { from: props.location } }}\n          />\n        )\n      }\n    />\n  );\n  return (\n    <div>\n      <Switch>\n        <Route path=\"/error\" component={Error} />\n        <Route exact path=\"/\" component={Login} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/admin\" component={AdminLogin} />\n        <Route path=\"/forgot-password\" component={ForgotPassword} />\n        <Route path=\"/reset-password\" component={ResetPassword} />\n        <Route path=\"/error\" component={Error} />\n        <UserRoute path=\"/contract\" component={CreateContract} />\n        <UserRoute path=\"/invoice\" component={CreateInvoice} />\n        <UserRoute path=\"/dashboard\" component={Dashboard} />\n        <UserRoute path=\"/invoice-confirm\" component={InvoiceContent} />\n        <UserRoute path=\"/contract-confirm\" component={ContractContent} />\n        <UserRoute path=\"/document\" component={Document} />\n        <UserRoute path=\"/detail/invoice/:id/:name\" component={InvoiceDetail} />\n        <UserRoute\n          path=\"/detail/contract/:id/:name\"\n          component={ContractDetail}\n        />\n        <UserRoute path=\"/notification\" component={Notification} />\n        <AdminRoute path=\"/department\" component={DepartmentManagerment} />\n        <AdminRoute path=\"/user-management\" component={UserManagement} />\n        <PrivateRoute path=\"/admin-manager\" component={AdminManager} />\n        <PrivateRoute path=\"/company-register\" component={CompanyRegister} />\n        <PrivateRoute path=\"/company-list\" component={CompanyList} />\n        <PrivateRoute path=\"/edit-company\" component={EditCompany} />\n        <UserRoute path=\"/profile\" component={Profile} />\n      </Switch>\n    </div>\n  );\n}\nexport default RouterURL;\n","/Users/macos/Desktop/EOfficeWeb/src/components/AdminManager/AdminManager.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/Login/Login.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/AdminLogin/AdminLogin.js",[],"/Users/macos/Desktop/EOfficeWeb/src/utils/Common.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/CompanyRegister/CompanyRegister.js",["215","216","217","218","219","220","221","222","223","224","225","226","227","228","229"],"import React, { useState } from \"react\";\nimport \"../../css/CompanyRegister.css\";\nimport register from \"../../images/register.png\";\nimport { Col, Container, Form, Label, Row } from \"reactstrap\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SidebarAdmin from \"../Sidebar/SidebarAdmin\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Slide,\n  Snackbar,\n} from \"@material-ui/core\";\nimport Moment from \"moment\";\nimport md5 from \"md5\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { getUser } from \"../../utils/Common\";\nimport companyListAPI from \"../../api/companyListAPI\";\nimport departmentAPI from \"../../api/departmentAPI\";\nimport userListAPI from \"../../api/userListAPI\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router\";\nimport validateAPI from \"../../api/validateAPI\";\n\nfunction TransitionLeft(props) {\n  return <Slide {...props} direction=\"right\" />;\n}\n\nfunction CompanyRegister() {\n  const [companyRegister, setCompanyRegister] = useState({\n    company_name: \"\",\n    address: \"\",\n    phone: null,\n    manager_name: \"\",\n    manager_email: \"\",\n  });\n  const history = useHistory();\n  const [confirm, setConfirm] = useState(false);\n  const [error, setError] = useState({\n    company_name: false,\n    address: false,\n    phone: false,\n    manager_name: false,\n    email: false,\n    message: \"\",\n  });\n\n  function handleChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    setCompanyRegister({\n      ...companyRegister,\n      [name]: value,\n    });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    const company = {\n      name: companyRegister.company_name,\n      phone: \"+84\" + companyRegister.phone.substring(1),\n      address: companyRegister.address,\n      dateCreate: Moment(new Date()).format(\n        \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n      ),\n      creatorId: getUser().Id,\n      status: 1,\n    };\n    companyListAPI\n      .addCompany(company)\n      .then(function (res) {\n        const param = {\n          name: \"Manager\",\n          companyId: res.data.id,\n          creatorId: getUser().Id,\n          dateCreate: Moment(new Date()).format(\n            \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n          ),\n        };\n        departmentAPI\n          .addDepartment(param)\n          .then(function (department) {\n            const sub = {\n              name: \"Admin\",\n              departmentId: department.data.id,\n              companyId: res.data.id,\n              creatorId: getUser().Id,\n              dateCreate: Moment(new Date()).format(\n                \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n              ),\n            };\n            departmentAPI.addSubDepartment(sub).then(function (subdepartment) {\n              const user = {\n                name: companyRegister.manager_name,\n                avatar: \"\",\n                email: companyRegister.manager_email,\n                password: md5(\"123Aabc\").trim().toString(),\n                phone: \"+84\" + companyRegister.phone.substring(1),\n                address: companyRegister.address,\n                dateCreate: Moment(new Date()).format(\n                  \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n                ),\n                creatorId: getUser().Id,\n                subDepartmentId: subdepartment.data.id,\n                departmentId: department.data.id,\n                companyId: res.data.id,\n                role: \"1\",\n                status: 1,\n              };\n              userListAPI\n                .addUser(user)\n                .then(function (newUser) {\n                  const data = {\n                    id: res.data.id,\n                    phone: \"+84\" + companyRegister.phone.substring(1),\n                    address: companyRegister.address,\n                    dateCreate: Moment(new Date()).format(\n                      \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n                    ),\n                    adminId: newUser.data.id,\n                    status: 1,\n                  };\n                  companyListAPI.updateCompany(data).then(function () {\n                    toast.success(\"Add company successfully\", {\n                      position: toast.POSITION.TOP_CENTER,\n                    });\n                    history.push(\"/company-list\");\n                  });\n                })\n                .catch(function (error) {\n                  console.log(error);\n                });\n            });\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  function handleConfirm(e) {\n    e.preventDefault();\n    var pattern = new RegExp(\n      /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i\n    );\n    if (companyRegister.company_name.length > 255) {\n      setError({\n        ...error,\n        company_name: true,\n        message: \"Company name max length 255 characters\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          company_name: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (companyRegister.company_name === \"\") {\n      setError({\n        ...error,\n        company_name: true,\n        message: \"Company name must not empty\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          company_name: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (companyRegister.manager_name.length > 255) {\n      setError({\n        ...error,\n        manager_name: true,\n        message: \"Manager name max length 255 characters\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          manager_name: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (companyRegister.manager_name === \"\") {\n      setError({\n        ...error,\n        manager_name: true,\n        message: \"Manager name must not empty\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          manager_name: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (companyRegister.phone === null) {\n      setError({\n        ...error,\n        phone: true,\n        message: \"Phone number must not empty\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          phone: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (!companyRegister.phone.trim().match(\"^[0-9]{10}$\")) {\n      setError({\n        ...error,\n        phone: true,\n        message: \"Invalid phone number\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          phone: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (companyRegister.manager_email === \"\") {\n      setError({\n        ...error,\n        email: true,\n        message: \"Please enter email\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          email: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (!pattern.test(companyRegister.manager_email)) {\n      setError({\n        ...error,\n        email: true,\n        message: \"Invalid email\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          email: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (companyRegister.address.length > 255) {\n      setError({\n        ...error,\n        address: true,\n        message: \"Address max length 255 characters\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          address: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else {\n      const phone = \"84\" + companyRegister.phone.substring(1);\n      validateAPI\n        .checkEmail(companyRegister.manager_email)\n        .then(function () {\n          validateAPI\n            .checkPhone(phone)\n            .then(function () {\n              setConfirm(true);\n            })\n            .catch(function () {\n              setError({\n                ...error,\n                phone: true,\n                message: \"Phone number is exist in system\",\n              });\n              setTimeout(() => {\n                setError({\n                  ...error,\n                  phone: false,\n                  message: \"\",\n                });\n              }, 3000);\n            });\n        })\n        .catch(function () {\n          setError({\n            ...error,\n            email: true,\n            message: \"Email is exist in system\",\n          });\n          setTimeout(() => {\n            setError({\n              ...error,\n              email: false,\n              message: \"\",\n            });\n          }, 3000);\n        });\n    }\n  }\n  return (\n    <div>\n      <SidebarAdmin />\n      <div className=\"main-panel\">\n        <Container fluid={true}>\n          <Snackbar\n            open={error.company_name}\n            autoHideDuration={3000}\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            TransitionComponent={TransitionLeft}\n          >\n            <Alert variant=\"filled\" severity=\"error\">\n              {error.message}\n            </Alert>\n          </Snackbar>\n          <Snackbar\n            open={error.address}\n            autoHideDuration={3000}\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            TransitionComponent={TransitionLeft}\n          >\n            <Alert variant=\"filled\" severity=\"error\">\n              {error.message}\n            </Alert>\n          </Snackbar>\n          <Snackbar\n            open={error.phone}\n            autoHideDuration={3000}\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            TransitionComponent={TransitionLeft}\n          >\n            <Alert variant=\"filled\" severity=\"error\">\n              {error.message}\n            </Alert>\n          </Snackbar>\n          <Snackbar\n            open={error.manager_name}\n            autoHideDuration={3000}\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            TransitionComponent={TransitionLeft}\n          >\n            <Alert variant=\"filled\" severity=\"error\">\n              {error.message}\n            </Alert>\n          </Snackbar>\n          <Snackbar\n            open={error.email}\n            autoHideDuration={3000}\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n            TransitionComponent={TransitionLeft}\n          >\n            <Alert variant=\"filled\" severity=\"error\">\n              {error.message}\n            </Alert>\n          </Snackbar>\n\n          <div>\n            <img style={{ marginTop: \"20px\" }} src={register} alt=\"\" />\n          </div>\n          <Form\n            style={{\n              width: \"60%\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              marginTop: 50,\n              textAlign: \"left\",\n            }}\n          >\n            <Row>\n              <Col sm={3}>\n                <Label style={{ fontSize: 20, color: \"blue\" }}>\n                  Company Name\n                </Label>\n              </Col>\n              <Col>\n                <TextField\n                  fullWidth\n                  variant=\"outlined\"\n                  type=\"text\"\n                  name=\"company_name\"\n                  required\n                  size=\"small\"\n                  error={error.company_name}\n                  onChange={handleChange}\n                />\n              </Col>\n            </Row>\n            <Row style={{ marginTop: 20 }}>\n              <Col sm={3}>\n                <Label style={{ fontSize: 20, color: \"blue\" }}>\n                  Manager Name\n                </Label>\n              </Col>\n              <Col>\n                <TextField\n                  fullWidth\n                  variant=\"outlined\"\n                  type=\"text\"\n                  name=\"manager_name\"\n                  required\n                  error={error.manager_name}\n                  size=\"small\"\n                  onChange={handleChange}\n                />\n              </Col>\n            </Row>\n            <Row style={{ marginTop: 20 }}>\n              <Col sm={3}>\n                <Label style={{ fontSize: 20, color: \"blue\" }}>\n                  Phone Number\n                </Label>\n              </Col>\n              <Col>\n                <TextField\n                  fullWidth\n                  variant=\"outlined\"\n                  type=\"phone\"\n                  name=\"phone\"\n                  required\n                  size=\"small\"\n                  error={error.phone}\n                  onChange={handleChange}\n                />\n              </Col>\n            </Row>\n            <Row style={{ marginTop: 20 }}>\n              <Col sm={3}>\n                <Label style={{ fontSize: 20, color: \"blue\" }}>\n                  Manager Email\n                </Label>\n              </Col>\n              <Col>\n                <TextField\n                  fullWidth\n                  variant=\"outlined\"\n                  type=\"email\"\n                  name=\"manager_email\"\n                  required\n                  error={error.email}\n                  size=\"small\"\n                  onChange={handleChange}\n                />\n              </Col>\n            </Row>\n            <Row style={{ marginTop: 20 }}>\n              <Col sm={3}>\n                <Label style={{ fontSize: 20, color: \"blue\" }}>\n                  Street Address\n                </Label>\n              </Col>\n              <Col>\n                <TextField\n                  fullWidth\n                  variant=\"outlined\"\n                  type=\"text\"\n                  name=\"address\"\n                  required\n                  error={error.address}\n                  size=\"small\"\n                  onChange={handleChange}\n                />\n              </Col>\n            </Row>\n          </Form>\n          <Button\n            style={{ marginTop: 20 }}\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={handleConfirm}\n          >\n            Verification\n          </Button>\n          <Dialog open={confirm} fullWidth>\n            <DialogTitle>Confirm Information</DialogTitle>\n            <DialogContent>\n              <Form style={{ textAlign: \"left\", fontSize: 18 }}>\n                <Row>\n                  <Col sm={4}>\n                    <Label>Company Name:</Label>\n                  </Col>\n                  <Col>\n                    <Label>{companyRegister.company_name}</Label>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col sm={4}>\n                    <Label>Manager Name:</Label>\n                  </Col>\n                  <Col>\n                    <Label>{companyRegister.manager_name}</Label>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col sm={4}>\n                    <Label>Phone Number:</Label>\n                  </Col>\n                  <Col>\n                    <Label>{companyRegister.phone}</Label>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col sm={4}>\n                    <Label>Manager Email:</Label>\n                  </Col>\n                  <Col>\n                    <Label>{companyRegister.manager_email}</Label>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col sm={4}>\n                    <Label>Street Address:</Label>\n                  </Col>\n                  <Col>\n                    <Label>{companyRegister.address}</Label>\n                  </Col>\n                </Row>\n              </Form>\n            </DialogContent>\n            <DialogActions>\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => setConfirm(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={handleSubmit}\n              >\n                Create\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </Container>\n      </div>\n    </div>\n  );\n}\n\nexport default CompanyRegister;\n","/Users/macos/Desktop/EOfficeWeb/src/components/CompanyList/CompanyList.js",["230","231","232"],"import {\n  Container,\n  Dropdown,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Table,\n  Form,\n  FormGroup,\n  Input,\n  Row,\n  Col,\n} from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport companyListAPI from \"../../api/companyListAPI\";\nimport SidebarAdmin from \"../Sidebar/SidebarAdmin\";\nimport \"../../css/CompanyList.css\";\nimport GetAdminCompany from \"../GetAdminCompany/GetAdminCompany\";\nimport Moment from \"moment\";\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\n\nfunction CompanyList() {\n  const [filter, setFilter] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const toggle = () => setFilter((prevState) => !prevState);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage] = useState(10);\n  const [search, setSearch] = useState(\"\");\n  const [data, setData] = useState([]);\n  const [postList, setPostList] = useState([]);\n  const indexOfLastPost = (page + 1) * rowsPerPage;\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\n  const currentPosts = postList.slice(indexOfFirstPost, indexOfLastPost);\n\n  function changePage(event, newPage) {\n    setPage(newPage);\n  }\n  useEffect(() => {\n    async function fetListData() {\n      try {\n        const response = await companyListAPI.getAll();\n        setPostList(response.data);\n        setData(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetListData();\n    setTimeout(() => {\n      setLoading(false);\n    }, 2000);\n  }, []);\n  function Active() {\n    setPostList(\n      data.filter((data) => {\n        if (data.status === 1) {\n          return data;\n        }\n      })\n    );\n  }\n  function listDeactive() {\n    setPostList(\n      data.filter((data) => {\n        if (data.status !== 1) {\n          return data;\n        }\n      })\n    );\n  }\n  function All() {\n    setPostList(data);\n  }\n  return (\n    <div>\n      <SidebarAdmin />\n      <div className=\"main-panel1\">\n        <Container fluid={true}>\n          <div className=\"search_form\">\n            <Form>\n              <FormGroup>\n                <Row>\n                  <Col xs={10}>\n                    <Input\n                      type=\"search\"\n                      className=\"form-control rounded\"\n                      value={search}\n                      onChange={(event) => {\n                        setSearch(event.target.value);\n                      }}\n                      placeholder=\"Search by name company\"\n                    />\n                  </Col>\n                  <Col xs={2}>\n                    <Dropdown isOpen={filter} toggle={toggle}>\n                      <DropdownToggle color=\"primary\" caret>\n                        Filter\n                      </DropdownToggle>\n                      <DropdownMenu>\n                        <DropdownItem onClick={All}>All</DropdownItem>\n                        <DropdownItem onClick={Active}>Active</DropdownItem>\n                        <DropdownItem onClick={listDeactive}>\n                          Deactive\n                        </DropdownItem>\n                      </DropdownMenu>\n                    </Dropdown>\n                  </Col>\n                </Row>\n              </FormGroup>\n            </Form>\n          </div>\n          {loading ? (\n            <ScaleLoader color={\"#2512DF\"} loading={loading} size={35} />\n          ) : (\n            <div hidden={search !== \"\" ? true : false}>\n              <TablePagination\n                component=\"div\"\n                count={postList.length}\n                page={page}\n                onChangePage={changePage}\n                rowsPerPage={rowsPerPage}\n                labelRowsPerPage=\"\"\n                rowsPerPageOptions={[]}\n              />\n              <Table hover>\n                <thead>\n                  <tr>\n                    <th>No</th>\n                    <th>Company Name</th>\n                    <th>Manager Name</th>\n                    <th>Date Created</th>\n                    <th>Status</th>\n                    <th>Phone Number</th>\n                    <th>Edits/Details</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {currentPosts.map((data, key) => (\n                    <tr key={key}>\n                      <th>{data.id}</th>\n                      <td>{data.name}</td>\n                      <td>\n                        <GetAdminCompany id={data.adminId} />\n                      </td>\n                      <td>\n                        {Moment(data.dateCreate).format(\"DD/MM/YYYY HH:mm:ss\")}\n                      </td>\n                      <td>\n                        {data.status === 1 ? (\n                          <p style={{ color: \"green\" }}>Active</p>\n                        ) : (\n                          <p style={{ color: \"red\" }}>Deactive</p>\n                        )}\n                      </td>\n                      <td>{data.phone}</td>\n                      <td>\n                        <Link\n                          to={{\n                            pathname: \"/edit-company\",\n                            state: data,\n                          }}\n                        >\n                          Edit/Detail\n                        </Link>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            </div>\n          )}\n          <Table hidden={search === \"\" ? true : false}>\n            <thead>\n              <tr>\n                <th>No</th>\n                <th>Company Name</th>\n                <th>Manager Name</th>\n                <th>Date Created</th>\n                <th>Status</th>\n                <th>Phone Number</th>\n                <th>Edits/Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data\n                .filter((data) => {\n                  if (data.name.toLowerCase().includes(search.toLowerCase())) {\n                    return data;\n                  }\n                })\n                .map((data) => (\n                  <tr key={data.id}>\n                    <th>{data.id}</th>\n                    <td>{data.name}</td>\n                    <td>\n                      <GetAdminCompany id={data.adminId} />\n                    </td>\n                    <td>{data.dateCreate}</td>\n                    <td>\n                      {data.status === 1 ? (\n                        <p style={{ color: \"green\" }}>Active</p>\n                      ) : (\n                        <p style={{ color: \"red\" }}>Deactive</p>\n                      )}\n                    </td>\n                    <td>{data.phone}</td>\n                    <td>\n                      <Link\n                        to={{\n                          pathname: \"/edit-company\",\n                          state: data,\n                        }}\n                      >\n                        Edit/Detail\n                      </Link>\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </Table>\n        </Container>\n      </div>\n    </div>\n  );\n}\nexport default CompanyList;\n","/Users/macos/Desktop/EOfficeWeb/src/components/Error/Error.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/ForgotPassword/ForgotPassword.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/CreateDocument/CreateInvoice.js",["233","234","235","236","237","238","239","240","241","242","243"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\nimport StepInvoice from \"../Sidebar/StepInvoice\";\nimport { useState, useEffect } from \"react\";\nimport \"../../css/CreateDoc.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { useHistory } from \"react-router-dom\";\nimport { getUser } from \"../../utils/Common\";\nimport demo from \"../../images/demo.png\";\nimport userListAPI from \"../../api/userListAPI\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\nimport EditLocationIcon from \"@material-ui/icons/EditLocation\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport TextField from \"@material-ui/core/TextField\";\nimport BackupIcon from \"@material-ui/icons/Backup\";\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport \"date-fns\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport Moment from \"moment\";\nimport { InputAdornment, Slide, Tooltip } from \"@material-ui/core\";\nimport TitleIcon from \"@material-ui/icons/Title\";\nimport { toast } from \"react-toastify\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Navbar from \"../Navbar/Navbar\";\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\ntoast.configure();\nfunction TransitionLeft(props) {\n  return <Slide {...props} direction=\"right\" />;\n}\nfunction CreateInvoice() {\n  const history = useHistory();\n  const [listSinger, setListSigner] = useState([]);\n  const [show, setShow] = useState(false);\n  const [activeStep, setActiveStep] = useState(0);\n  const [file, setFile] = useState([]);\n  const [color, setColor] = useState(\"#808080ad\");\n  const [alert, setAlert] = useState({\n    file: false,\n    title: false,\n    signer: false,\n    location: false,\n    date: false,\n    message: \"\",\n  });\n  const handleChange = (event, value) => {\n    setPageNumber(value);\n  };\n  const [fileName, setFileName] = useState(\"\");\n  const [dataUpload, setDataUpload] = useState({\n    title: \"\",\n    signer: null,\n  });\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [cursor, setCursor] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [viewer, setViewer] = useState([]);\n  const [numPages, setNumPages] = useState(\"\");\n  const [pageNumber, setPageNumber] = useState(0);\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages);\n    setPageNumber(1);\n  }\n  function handleOnChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    setDataUpload({\n      ...dataUpload,\n      [name]: value,\n    });\n  }\n\n  function handleContent() {\n    const listViewerId = [getUser().Id];\n    viewer.map((view) => {\n      listViewerId.push(view.id);\n    });\n\n    if (selectedDate === null) {\n      setAlert({\n        ...alert,\n        date: true,\n        message: \"Please choose date expiration invoice\",\n      });\n      setTimeout(() => {\n        setAlert({\n          ...alert,\n          date: false,\n        });\n      }, 3000);\n    } else if (\n      Moment(selectedDate).format(\"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\") <\n      Moment(new Date()).format(\"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\")\n    ) {\n      setAlert({\n        ...alert,\n        date: true,\n        message: \"Expiration date can't less than current date\",\n      });\n      setTimeout(() => {\n        setAlert({\n          ...alert,\n          date: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (position.x === 0 && position.y === 0) {\n      setAlert({\n        ...alert,\n        location: true,\n      });\n      setTimeout(() => {\n        setAlert({\n          ...alert,\n          location: false,\n        });\n      }, 3000);\n    } else {\n      history.push({\n        pathname: \"/invoice-confirm\",\n        state: {\n          file: file,\n          data: dataUpload,\n          date: Moment(selectedDate).format(\n            \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n          ),\n          viewer: viewer,\n          listViewerId: listViewerId,\n          signLocation: position,\n          numberPage: pageNumber,\n        },\n      });\n    }\n  }\n\n  useEffect(() => {\n    const companyId = getUser().CompanyId;\n    async function fetListUser() {\n      try {\n        const response = await userListAPI.getUserByCompanyId(companyId);\n        setListSigner(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetListUser();\n  }, []);\n  const [locaA, setLocaA] = useState(true);\n  function choseLocation(e) {\n    e.preventDefault();\n    setColor(\"#808080ad\");\n    setPosition({ x: 0, y: 0 });\n    setLocaA(!locaA);\n  }\n  function getLocation(e) {\n    setPosition({\n      x: e.nativeEvent.offsetX,\n      y: e.nativeEvent.offsetY,\n    });\n    setLocaA(true);\n  }\n  useEffect(() => {\n    addEventListeners();\n    return () => removeEventListeners();\n  }, []);\n\n  const addEventListeners = () => {\n    document.addEventListener(\"mousemove\", onMouseMove);\n  };\n\n  const removeEventListeners = () => {\n    document.removeEventListener(\"mousemove\", onMouseMove);\n  };\n  const onMouseMove = (e) => {\n    setCursor({ x: e.clientX, y: e.clientY });\n  };\n\n  return (\n    <div>\n      <header>\n        <Navbar />\n      </header>\n      <StepInvoice activeStep={activeStep} />\n      <main className=\"main-invoice\">\n        <Snackbar\n          style={{ marginTop: 70 }}\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n          open={alert.location}\n          autoHideDuration={3000}\n          TransitionComponent={TransitionLeft}\n        >\n          <Alert variant=\"filled\" severity=\"error\">\n            Please choose location sign to continue\n          </Alert>\n        </Snackbar>\n\n        <Container fluid={true}>\n          <div\n            hidden={locaA}\n            className=\"cursor\"\n            style={{\n              left: `${cursor.x}px`,\n              top: `${cursor.y}px`,\n            }}\n          />\n          <Row>\n            <Col className=\"form-upload\">\n              <Tooltip title=\"Select location sign\" placement=\"right\">\n                <IconButton\n                  style={{ float: \"left\", background: color }}\n                  color=\"secondary\"\n                  onClick={choseLocation}\n                  hidden={pageNumber === 0 ? true : false}\n                >\n                  <EditLocationIcon color=\"error\" fontSize=\"large\" />\n                </IconButton>\n              </Tooltip>\n              <div\n                hidden={activeStep === 0 ? false : true}\n                style={{ marginTop: \"10%\" }}\n              >\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                    float: \"left\",\n                  }}\n                >\n                  DOCUMENT INFORMATION\n                </Label>\n\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Document type\"\n                  value=\"Invoice\"\n                  fullWidth\n                  style={{ marginTop: \"20px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <InsertDriveFileIcon fontSize=\"large\" color=\"primary\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n\n                <input\n                  accept=\".pdf\"\n                  id=\"icon-button-file\"\n                  type=\"file\"\n                  style={{ display: \"none\", width: 0 }}\n                  onChange={(e) => {\n                    if (e.target.files.length !== 0) {\n                      if (e.target.files[0].type !== \"application/pdf\") {\n                        setAlert({\n                          ...alert,\n                          file: true,\n                          message: \"Please choose file PDF\",\n                        });\n                        setTimeout(() => {\n                          setAlert({\n                            ...alert,\n                            file: false,\n                            message: \"\",\n                          });\n                        }, 3000);\n                      } else if (e.target.files[0].size > 10485760) {\n                        setAlert({\n                          ...alert,\n                          file: true,\n                          message: \"File don't larger 10MB\",\n                        });\n                        setTimeout(() => {\n                          setAlert({\n                            ...alert,\n                            file: false,\n                            message: \"\",\n                          });\n                        }, 3000);\n                      } else {\n                        setFile(e.target.files);\n                        setFileName(e.target.files[0].name);\n                        setShow(true);\n                      }\n                    }\n                  }}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Choose file\"\n                  error={alert.file}\n                  helperText={alert.message}\n                  value={fileName}\n                  fullWidth\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <label htmlFor=\"icon-button-file\">\n                          <IconButton color=\"primary\" component=\"span\">\n                            <BackupIcon fontSize=\"large\" />\n                          </IconButton>\n                        </label>\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                  style={{ marginTop: \"30px\" }}\n                />\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    if (file.length === 0) {\n                      setAlert({\n                        ...alert,\n                        file: true,\n                        message: \"Please choose file upload !!!\",\n                      });\n                      setTimeout(() => {\n                        setAlert({\n                          ...alert,\n                          file: false,\n                          message: \"\",\n                        });\n                      }, 3000);\n                    } else {\n                      setActiveStep(activeStep + 1);\n                    }\n                  }}\n                  style={{ marginTop: \"30px\" }}\n                >\n                  Next\n                </Button>\n              </div>\n              <div\n                hidden={activeStep === 1 ? false : true}\n                style={{ marginTop: \"10%\" }}\n              >\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                    float: \"left\",\n                  }}\n                >\n                  TITLE OF INVOICE\n                </Label>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Title invoice\"\n                  type=\"text\"\n                  name=\"title\"\n                  required\n                  error={alert.title}\n                  helperText={alert.message}\n                  fullWidth\n                  style={{ marginTop: \"20px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <TitleIcon color=\"primary\" fontSize=\"large\" />\n                      </InputAdornment>\n                    ),\n                  }}\n                  onChange={handleOnChange}\n                />\n                <Button\n                  variant=\"contained\"\n                  hidden={activeStep === 0 ? true : false}\n                  color=\"primary\"\n                  style={{ marginTop: \"30px\" }}\n                  onClick={() => setActiveStep(activeStep - 1)}\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\n                  color=\"primary\"\n                  onClick={() => {\n                    if (dataUpload.title.trim() === \"\") {\n                      setAlert({\n                        ...alert,\n                        title: true,\n                        message: \"Please input title invoice\",\n                      });\n                      setTimeout(() => {\n                        setAlert({\n                          ...alert,\n                          title: false,\n                          message: \"\",\n                        });\n                      }, 3000);\n                    } else if (dataUpload.title.length > 255) {\n                      setAlert({\n                        ...alert,\n                        title: true,\n                        message: \"Title max length 255 characters !!!\",\n                      });\n                      setTimeout(() => {\n                        setAlert({\n                          ...alert,\n                          title: false,\n                          message: \"\",\n                        });\n                      }, 3000);\n                    } else {\n                      setActiveStep(activeStep + 1);\n                    }\n                  }}\n                >\n                  Next\n                </Button>\n              </div>\n              <div\n                hidden={activeStep === 2 ? false : true}\n                style={{ marginTop: \"10%\" }}\n              >\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                    float: \"left\",\n                    marginBottom: \"30px\",\n                  }}\n                >\n                  SELECT SIGNER TO SIGN INVOICE\n                </Label>\n                <Autocomplete\n                  id=\"combo-box-demo\"\n                  options={listSinger}\n                  getOptionLabel={(option) => option.name}\n                  onChange={(event, newValue) => {\n                    setDataUpload({ ...dataUpload, signer: newValue });\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Signer name\"\n                      variant=\"outlined\"\n                      name=\"signer\"\n                      error={alert.signer}\n                      helperText={alert.message}\n                    />\n                  )}\n                />\n\n                <Button\n                  variant=\"contained\"\n                  hidden={activeStep === 0 ? true : false}\n                  color=\"primary\"\n                  style={{ marginTop: \"30px\" }}\n                  onClick={() => setActiveStep(activeStep - 1)}\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\n                  color=\"primary\"\n                  onClick={() => {\n                    if (dataUpload.signer === null) {\n                      setAlert({\n                        ...alert,\n                        signer: true,\n                        message: \"Please select a signer to sign invoice\",\n                      });\n                      setTimeout(() => {\n                        setAlert({\n                          ...alert,\n                          signer: false,\n                          message: \"\",\n                        });\n                      }, 3000);\n                    } else {\n                      setActiveStep(activeStep + 1);\n                    }\n                  }}\n                >\n                  Next\n                </Button>\n              </div>\n              <div\n                hidden={activeStep === 3 ? false : true}\n                style={{ marginTop: \"10%\" }}\n              >\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                    float: \"left\",\n                    marginBottom: \"30px\",\n                  }}\n                >\n                  VIEWER CAN VIEW INVOICE\n                </Label>\n                <Autocomplete\n                  multiple\n                  id=\"tags-outlined\"\n                  options={listSinger}\n                  getOptionLabel={(option) => option.name}\n                  filterSelectedOptions\n                  onChange={(event, newValue) => {\n                    setViewer(newValue);\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"outlined\"\n                      label=\"Select viewer\"\n                      placeholder=\"Viewer\"\n                    />\n                  )}\n                />\n                <Button\n                  variant=\"contained\"\n                  hidden={activeStep === 0 ? true : false}\n                  color=\"primary\"\n                  style={{ marginTop: \"30px\" }}\n                  onClick={() => setActiveStep(activeStep - 1)}\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\n                  color=\"primary\"\n                  onClick={() => {\n                    setActiveStep(activeStep + 1);\n                  }}\n                >\n                  Next\n                </Button>\n              </div>\n              <div\n                hidden={activeStep === 4 ? false : true}\n                style={{ marginTop: \"10%\" }}\n              >\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                    float: \"left\",\n                  }}\n                >\n                  DATE EXPIRATION INVOICE\n                </Label>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid container justify=\"space-around\">\n                    <KeyboardDatePicker\n                      fullWidth\n                      margin=\"normal\"\n                      id=\"date-picker-dialog\"\n                      label=\"Date expiration\"\n                      format=\"MM/dd/yyyy\"\n                      value={selectedDate}\n                      name=\"date\"\n                      error={alert.date}\n                      helperText={alert.message}\n                      onChange={handleDateChange}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                  </Grid>\n                </MuiPickersUtilsProvider>\n                <Button\n                  variant=\"contained\"\n                  hidden={activeStep === 0 ? true : false}\n                  color=\"primary\"\n                  style={{ marginTop: \"30px\" }}\n                  onClick={() => setActiveStep(activeStep - 1)}\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\n                  color=\"primary\"\n                  onClick={handleContent}\n                >\n                  Next\n                </Button>\n              </div>\n            </Col>\n            <Col>\n              <Form className=\"form-doc\">\n                <FormGroup row>\n                  <div hidden={show} style={{ marginTop: \"4rem\" }}>\n                    <img src={demo} alt=\"demo\" width=\"600\" height=\"600\" />\n                  </div>\n\n                  <Paper elevation={3}>\n                    <Document\n                      file={file[0]}\n                      onLoadSuccess={onDocumentLoadSuccess}\n                      onClick={(e) => {\n                        if (locaA === false) {\n                          getLocation(e);\n                          setColor(\"#3541da\");\n                        }\n                      }}\n                      noData={false}\n                    >\n                      <Page pageNumber={pageNumber} />\n                    </Document>\n                  </Paper>\n                  <div\n                    hidden={pageNumber === 0 ? true : false}\n                    style={{ marginLeft: \"30%\" }}\n                  >\n                    <Typography\n                      style={{\n                        marginTop: \"5px\",\n                      }}\n                    >\n                      Page: {pageNumber}/{numPages}\n                    </Typography>\n                    <Pagination\n                      variant=\"outlined\"\n                      count={numPages}\n                      page={pageNumber}\n                      onChange={handleChange}\n                    />\n                  </div>\n                </FormGroup>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n      </main>\n    </div>\n  );\n}\nexport default CreateInvoice;\n","/Users/macos/Desktop/EOfficeWeb/src/components/CreateDocument/InvoiceContent.js",["244","245","246"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\nimport StepInvoice from \"../Sidebar/StepInvoice\";\nimport PDF from \"../PDF/PDF\";\nimport \"../../css/CreateDoc.css\";\nimport userListAPI from \"../../api/userListAPI\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { forwardRef, useEffect, useState } from \"react\";\nimport { getUser } from \"../../utils/Common\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { toast } from \"react-toastify\";\nimport invoiceAPI from \"../../api/invoiceAPI\";\nimport Moment from \"moment\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  InputAdornment,\n  Slide,\n  TablePagination,\n} from \"@material-ui/core\";\nimport TitleIcon from \"@material-ui/icons/Title\";\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\nimport Table from \"@material-ui/core/Table\";\nimport \"date-fns\";\nimport EventAvailableIcon from \"@material-ui/icons/EventAvailable\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport moment from \"moment\";\nimport Navbar from \"../Navbar/Navbar\";\n\ntoast.configure();\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"down\" ref={ref} {...props} />;\n});\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.white,\n    color: theme.palette.common.black,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nfunction InvoiceContent() {\n  const location = useLocation();\n  const history = useHistory();\n  const [create, setCreate] = useState(false);\n  function toogle() {\n    setCreate(!create);\n  }\n  const [signer, setSigner] = useState(\"\");\n  const viewer = location.state.viewer;\n  const [page, setPage] = useState(0);\n  const [rowsPerPage] = useState(4);\n  const indexOfLastPost = (page + 1) * rowsPerPage;\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\n  const currentPosts = viewer.slice(indexOfFirstPost, indexOfLastPost);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  useEffect(() => {\n    async function getSigner() {\n      try {\n        const res = await userListAPI.getUserById(\n          location.state.data.signer.id\n        );\n        setSigner(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getSigner();\n  }, [location.state.data.signer.id]);\n\n  async function handleCreated(e) {\n    e.preventDefault();\n    const file = location.state.file[0];\n    const convertBase64 = await base64(file);\n    const url = convertBase64.slice(28);\n    const position =\n      \"page=\" +\n      location.state.numberPage +\n      \",x=\" +\n      location.state.signLocation.x +\n      \",y=\" +\n      location.state.signLocation.y;\n    const params = {\n      dateCreate: Moment(new Date()).format(\n        \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n      ),\n      creatorId: getUser().Id,\n      dateExpire: location.state.date,\n      title: location.state.data.title,\n      signerId: location.state.data.signer.id,\n      signLocation: position,\n      invoiceURL: url,\n    };\n    invoiceAPI\n      .addInvoice(params)\n      .then(function (res) {\n        const invoiceId = res.data.id;\n        const viewer = {\n          invoiceId: invoiceId,\n          listViewersId: location.state.listViewerId,\n        };\n        invoiceAPI\n          .addViewerInvoice(viewer)\n          .then(function () {\n            toast.success(\"You has created invoice successfully\", {\n              position: toast.POSITION.TOP_CENTER,\n            });\n            history.push({\n              pathname:\n                \"/detail/invoice/\" +\n                invoiceId +\n                \"/\" +\n                location.state.data.title,\n            });\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  function base64(file) {\n    return new Promise((resolve) => {\n      const fileReader = new FileReader();\n      fileReader.readAsDataURL(file);\n      fileReader.onload = () => {\n        resolve(fileReader.result);\n      };\n    });\n  }\n  return (\n    <div>\n      <header>\n        <Navbar />\n      </header>\n      <StepInvoice activeStep={5} />\n      <main className=\"main-invoice\">\n        <Container fluid={true}>\n          <Row>\n            <Col>\n              <Paper style={{ marginTop: \"20px\" }} elevation={3}>\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                  }}\n                >\n                  Invoice Content\n                </Label>\n                <TextField\n                  variant=\"standard\"\n                  value={location.state.data.title}\n                  fullWidth\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <TitleIcon color=\"primary\" fontSize=\"large\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n                <TextField\n                  value={signer.name}\n                  fullWidth\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <BorderColorIcon color=\"primary\" fontSize=\"large\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n\n                <TableContainer style={{ marginTop: \"20px\", padding: \"10px\" }}>\n                  <Table aria-label=\"customized table\">\n                    <TableHead>\n                      <TableRow>\n                        <StyledTableCell>Viewer name</StyledTableCell>\n                        <StyledTableCell align=\"center\">Email</StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                          Phone number\n                        </StyledTableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {currentPosts.map((row) => (\n                        <StyledTableRow key={row.name}>\n                          <StyledTableCell component=\"th\" scope=\"row\">\n                            {row.name}\n                          </StyledTableCell>\n                          <StyledTableCell align=\"center\">\n                            {row.email}\n                          </StyledTableCell>\n                          <StyledTableCell align=\"center\">\n                            {row.phone}\n                          </StyledTableCell>\n                        </StyledTableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n                <TablePagination\n                  component=\"div\"\n                  count={viewer.length}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  labelRowsPerPage=\"\"\n                  onChangePage={handleChangePage}\n                  rowsPerPageOptions={[]}\n                />\n                <TextField\n                  label=\"Date expiration\"\n                  value={moment(location.state.date).format(\n                    \"DD/MM/YYYY HH:mm:ss\"\n                  )}\n                  fullWidth\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <EventAvailableIcon color=\"primary\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n              </Paper>\n              <Button\n                style={{ marginTop: \"20px\", marginRight: \"10px\" }}\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => history.push(\"/document\")}\n              >\n                Cancel\n              </Button>\n              <Button\n                style={{ marginTop: \"20px\" }}\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={toogle}\n              >\n                Create\n              </Button>\n            </Col>\n            <Col>\n              <Form className=\"form-doc\">\n                <FormGroup row>\n                  <div>\n                    <PDF pdf={location.state.file[0]} />\n                  </div>\n                </FormGroup>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n        <Dialog\n          open={create}\n          TransitionComponent={Transition}\n          keepMounted\n          onClose={toogle}\n          disableBackdropClick\n          disableEscapeKeyDown\n          fullWidth\n        >\n          <DialogTitle>{\"Do you want create Invoice?\"}</DialogTitle>\n          <DialogActions>\n            <Button onClick={toogle} color=\"secondary\" variant=\"contained\">\n              No\n            </Button>\n            <Button onClick={handleCreated} color=\"primary\" variant=\"contained\">\n              Yes\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\nexport default InvoiceContent;\n","/Users/macos/Desktop/EOfficeWeb/src/components/Dashboard/Dashboard.js",["247","248"],"import { Container, Form, FormGroup, Label, Row, Col, Table } from \"reactstrap\";\nimport \"../../css/Dashboard.css\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport notsigned from \"../../images/status.png\";\nimport doneinvoice from \"../../images/invoicecompleted.png\";\nimport done from \"../../images/true.png\";\nimport invoiceAPI from \"../../api/invoiceAPI\";\nimport { getUser } from \"../../utils/Common\";\nimport contractAPI from \"../../api/contractAPI\";\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\nimport moment from \"moment\";\nimport notiAPI from \"../../api/notiAPI\";\nimport Navbar from \"../Navbar/Navbar\";\nimport notDoc from \"../../images/1.png\";\n\nfunction Dashboard() {\n  const history = useHistory();\n  const [noti, setNoti] = useState([]);\n  const [hidden, setHidden] = useState(true);\n  const [listContract, setListContract] = useState([]);\n  const [listInvoice, setListInvoice] = useState([]);\n  const [currentPage] = useState(1);\n  const [postPerPage] = useState(5);\n  const indexOfLastPost = currentPage * postPerPage;\n  const indexOfFirstPost = indexOfLastPost - postPerPage;\n  const invoice = listInvoice\n    .sort((a, b) => {\n      return (\n        new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\n      );\n    })\n    .reverse();\n  const contract = listContract\n    .sort((a, b) => {\n      return (\n        new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\n      );\n    })\n    .reverse();\n  const currentPostsContract = contract.slice(\n    indexOfFirstPost,\n    indexOfLastPost\n  );\n  const currentPostsInvoice = invoice.slice(indexOfFirstPost, indexOfLastPost);\n  let [loadingInvoice, setLoadingInvoice] = useState(true);\n  let [loadingContract, setLoadingContract] = useState(true);\n  var listNoti = noti\n    .sort((a, b) => {\n      return (\n        new Date(a.createdDate).getTime() - new Date(b.createdDate).getTime()\n      );\n    })\n    .reverse();\n  const currentPostsNoti = listNoti.slice(indexOfFirstPost, indexOfLastPost);\n  useEffect(() => {\n    async function fetListNoti() {\n      try {\n        const res = await notiAPI.getById(getUser().Id);\n        setNoti(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetListNoti();\n  }, []);\n\n  useEffect(() => {\n    async function getListDocument() {\n      try {\n        if (getUser().Role === \"1\") {\n          await contractAPI\n            .getContractByCompanyId(getUser().CompanyId)\n            .then(function (contract) {\n              invoiceAPI\n                .getInvoiceByCompanyId(getUser().CompanyId)\n                .then(function (invoice) {\n                  setListInvoice(invoice.data);\n                  setListContract(contract.data);\n                  setTimeout(() => {\n                    setLoadingContract(false);\n                  }, 2000);\n                  setTimeout(() => {\n                    setLoadingInvoice(false);\n                  }, 2000);\n                })\n                .catch(function (error) {\n                  console.log(error);\n                });\n            })\n            .catch(function (error) {\n              console.log(error);\n            });\n        } else {\n          await invoiceAPI\n            .getInvoiceByViewerId(getUser().Id)\n            .then(function (res1) {\n              invoiceAPI\n                .getInvoiceBySignerId(getUser().Id)\n                .then(function (res2) {\n                  contractAPI\n                    .getContractByViewerId(getUser().Id)\n                    .then(function (res3) {\n                      contractAPI\n                        .getContractBySignerId(getUser().Id)\n                        .then(function (res4) {\n                          const listInvoice1 = [...res1.data, ...res2.data];\n                          const listContract1 = [...res3.data, ...res4.data];\n                          setListInvoice(listInvoice1);\n                          setListContract(listContract1);\n                          if (listInvoice1 === \"\") {\n                            setHidden(false);\n                          } else {\n                            setHidden(true);\n                          }\n                          setTimeout(() => {\n                            setLoadingContract(false);\n                          }, 2000);\n                          setTimeout(() => {\n                            setLoadingInvoice(false);\n                          }, 2000);\n                        })\n                        .catch(function (error) {\n                          console.log(error);\n                        });\n                    })\n                    .catch(function (error) {\n                      console.log(error);\n                    });\n                })\n                .catch(function (error) {\n                  console.log(error);\n                });\n            })\n            .catch(function (error) {\n              console.log(error);\n            });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getListDocument();\n  }, []);\n\n  return (\n    <div>\n      <header>\n        <Navbar />\n      </header>\n      <main className=\"main-panel\">\n        <Container fluid>\n          <div>\n            <Row>\n              <Col>\n                <Form>\n                  <FormGroup>\n                    <Label className=\"title\">Contract</Label>\n                  </FormGroup>\n                  <FormGroup>\n                    {loadingContract ? (\n                      <ScaleLoader\n                        color={\"#2512DF\"}\n                        loading={loadingContract}\n                        size={35}\n                      />\n                    ) : (\n                      <Table hover>\n                        <tbody>\n                          {currentPostsContract.map((data) => (\n                            <tr\n                              key={data.id}\n                              onClick={() =>\n                                history.push({\n                                  pathname:\n                                    \"/detail/contract/\" +\n                                    data.id +\n                                    \"/\" +\n                                    data.title,\n                                  state: data,\n                                })\n                              }\n                            >\n                              <td>\n                                <p\n                                  style={{ textAlign: \"left\" }}\n                                  className=\"demo-2\"\n                                >\n                                  {data.title}\n                                </p>\n                              </td>\n                              <td>\n                                {data.status < 2 ? (\n                                  <img src={notsigned} alt=\"\" />\n                                ) : (\n                                  <img src={done} alt=\"\" />\n                                )}\n                              </td>\n                              <td style={{ textAlign: \"right\" }}>\n                                {moment(data.dateCreate).format(\"DD/MM/YYYY\")}\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </Table>\n                    )}\n                  </FormGroup>\n                </Form>\n                <div>\n                  <Link\n                    to=\"/document\"\n                    hidden={listContract.length > 5 ? false : true}\n                  >\n                    See more\n                  </Link>\n                </div>\n              </Col>\n              <Col>\n                <Form>\n                  <FormGroup>\n                    <Label className=\"title\">Invoice</Label>\n                  </FormGroup>\n                  <FormGroup>\n                    {loadingInvoice ? (\n                      <ScaleLoader\n                        color={\"#2512DF\"}\n                        loading={loadingInvoice}\n                        size={35}\n                      />\n                    ) : (\n                      <Table hover>\n                        <tbody>\n                          {currentPostsInvoice.map((data) => (\n                            <tr\n                              key={data.id}\n                              onClick={() =>\n                                history.push({\n                                  pathname:\n                                    \"/detail/invoice/\" +\n                                    data.id +\n                                    \"/\" +\n                                    data.title,\n                                  state: data,\n                                })\n                              }\n                            >\n                              <td>\n                                <p\n                                  style={{ textAlign: \"left\" }}\n                                  className=\"demo-2\"\n                                >\n                                  {data.title}\n                                </p>\n                              </td>\n                              <td>\n                                {data.status < 2 ? (\n                                  <img src={notsigned} alt=\"\" />\n                                ) : (\n                                  <img src={doneinvoice} alt=\"\" />\n                                )}\n                              </td>\n                              <td style={{ textAlign: \"right\" }}>\n                                {moment(data.dateCreate).format(\"DD/MM/YYYY\")}\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                        {/* <img src={notDoc} alt=\"\" width=\"300px\" height=\"300px\" /> */}\n                      </Table>\n                    )}\n                  </FormGroup>\n                </Form>\n                <div>\n                  <Link\n                    to=\"/document\"\n                    hidden={listInvoice.length > 5 ? false : true}\n                  >\n                    See more\n                  </Link>\n                </div>\n              </Col>\n            </Row>\n\n            <Form>\n              <FormGroup>\n                <Label className=\"title\">Activity Log</Label>\n              </FormGroup>\n              <FormGroup>\n                <Table hover style={{ marginTop: 20 }}>\n                  <tbody>\n                    {currentPostsNoti.map((row) => (\n                      <tr key={row.id}>\n                        <td>\n                          <Row style={{ fontWeight: \"bold\", marginLeft: 1 }}>\n                            {row.content}\n                          </Row>\n                          <Row style={{ marginLeft: 10 }}>{row.title}</Row>\n                          <Row style={{ marginLeft: 10 }}>\n                            <Link to=\"/\">View detail</Link>\n                          </Row>\n                        </td>\n                        <td style={{ position: \"absolute\", right: 10 }}>\n                          {moment(row.createdDate).format(\n                            \"DD/MM/YYYY HH:mm:ss\"\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n              </FormGroup>\n            </Form>\n            <div>\n              <Link\n                to=\"/notification\"\n                hidden={listNoti.length > 5 ? false : true}\n              >\n                See more\n              </Link>\n            </div>\n          </div>\n        </Container>\n      </main>\n    </div>\n  );\n}\nexport default Dashboard;\n","/Users/macos/Desktop/EOfficeWeb/src/components/CreateDocument/ContractContent.js",["249","250","251","252"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\nimport StepContract from \"../Sidebar/Stepper\";\nimport PDF from \"../PDF/PDF\";\nimport \"../../css/CreateDoc.css\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { forwardRef, useEffect, useState } from \"react\";\nimport userListAPI from \"../../api/userListAPI\";\nimport companyListAPI from \"../../api/companyListAPI\";\nimport { getUser } from \"../../utils/Common\";\nimport contractAPI from \"../../api/contractAPI\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Moment from \"moment\";\nimport { toast } from \"react-toastify\";\nimport axios from \"axios\";\nimport EventAvailableIcon from \"@material-ui/icons/EventAvailable\";\nimport Button from \"@material-ui/core/Button\";\nimport TitleIcon from \"@material-ui/icons/Title\";\nimport BusinessIcon from \"@material-ui/icons/Business\";\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\nimport {\n  InputAdornment,\n  Paper,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableBody,\n  Table,\n  TextField,\n  withStyles,\n  TablePagination,\n  Dialog,\n  DialogTitle,\n  DialogActions,\n  Slide,\n} from \"@material-ui/core\";\nimport moment from \"moment\";\nimport Navbar from \"../Navbar/Navbar\";\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"down\" ref={ref} {...props} />;\n});\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.white,\n    color: theme.palette.common.black,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nfunction ContractContent() {\n  const location = useLocation();\n  const history = useHistory();\n  const [create, setCreate] = useState(false);\n  const [signer, setSigner] = useState(\"\");\n  const [guest, setGuest] = useState(\"\");\n  const [company, setCompany] = useState(\"\");\n  const [page, setPage] = useState(0);\n  const [rowsPerPage] = useState(2);\n  const indexOfLastPost = (page + 1) * rowsPerPage;\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\n  const viewer = location.state.viewer;\n  const currentPosts = viewer.slice(indexOfFirstPost, indexOfLastPost);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  function toogle() {\n    setCreate(!create);\n  }\n  useEffect(() => {\n    async function getSigner() {\n      try {\n        const res = await userListAPI.getUserById(\n          location.state.data.signer.id\n        );\n        setSigner(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getSigner();\n  }, [location.state.data.signer.id]);\n  useEffect(() => {\n    async function getCompany() {\n      try {\n        const res = await companyListAPI.getCompanyById(getUser().CompanyId);\n        setCompany(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getCompany();\n  }, []);\n  useEffect(() => {\n    async function getGuest() {\n      try {\n        const res = await userListAPI.getUserById(\n          location.state.data.signer_guest.id\n        );\n        setGuest(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getGuest();\n  }, [location.state.data.signer_guest.id]);\n\n  async function handleCreated(e) {\n    e.preventDefault();\n    const file = location.state.file[0];\n    const convertBase64 = await base64(file);\n    const url = convertBase64.slice(28);\n    const position =\n      \"page=\" +\n      location.state.numberPage +\n      \",x=\" +\n      location.state.signLocationA.x +\n      \",y=\" +\n      location.state.signLocationA.y +\n      \"|page=\" +\n      location.state.numberPage +\n      \",x=\" +\n      location.state.signLocationB.x +\n      \",y=\" +\n      location.state.signLocationB.y;\n    const params = {\n      dateCreate: Moment(new Date()).format(\n        \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n      ),\n      creatorId: getUser().Id,\n      dateExpire: location.state.date,\n      title: location.state.data.title,\n      contractURL: url,\n      signLocation: position,\n    };\n    contractAPI\n      .addContract(params)\n      .then(function (res) {\n        const contractId = res.data.id;\n        const listSigner = [];\n        listSigner.push(location.state.data.signer.id);\n        listSigner.push(location.state.data.signer_guest.id);\n        const data = {\n          contractId: contractId,\n          listSignersId: listSigner,\n        };\n        axios\n          .put(\n            \"https://datnxeoffice.azurewebsites.net/api/contracts/addsignertocontract\",\n            data,\n            {\n              headers: {\n                Authorization: `Bearer ${getUser().IdToken}`,\n              },\n            }\n          )\n          .then(function (res) {\n            const listViewerId = [];\n            location.state.viewer.map((v) => {\n              listViewerId.push(v.id);\n            });\n            listViewerId.push(getUser().Id);\n            const viewer = {\n              contractId: contractId,\n              listViewersId: listViewerId,\n            };\n            axios\n              .put(\n                \"https://datnxeoffice.azurewebsites.net/api/contracts/addviewertocontract\",\n                viewer,\n                {\n                  headers: {\n                    Authorization: `Bearer ${getUser().IdToken}`,\n                  },\n                }\n              )\n              .then(function (res) {\n                toast.success(\"You has created contract successfully\", {\n                  position: toast.POSITION.TOP_CENTER,\n                });\n                history.push({\n                  pathname:\n                    \"/detail/contract/\" +\n                    contractId +\n                    \"/\" +\n                    location.state.data.title,\n                });\n              })\n              .catch(function (error) {\n                console.log(error);\n              });\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  function base64(file) {\n    return new Promise((resolve) => {\n      const fileReader = new FileReader();\n      fileReader.readAsDataURL(file);\n      fileReader.onload = () => {\n        resolve(fileReader.result);\n      };\n    });\n  }\n  return (\n    <div>\n      <header>\n        <Navbar />\n      </header>\n      <StepContract activeStep={7} />\n      <main className=\"main-contract\">\n        <Container fluid>\n          <Row>\n            <Col>\n              <Paper style={{ marginTop: \"20px\" }} elevation={3}>\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                  }}\n                >\n                  Contract Content\n                </Label>\n                <TextField\n                  variant=\"standard\"\n                  value={location.state.data.title}\n                  fullWidth\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <TitleIcon color=\"primary\" fontSize=\"large\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n                <TextField\n                  variant=\"standard\"\n                  value={company.name}\n                  fullWidth\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <BusinessIcon color=\"primary\" fontSize=\"large\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n                <TextField\n                  variant=\"standard\"\n                  value={signer.name}\n                  fullWidth\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <BorderColorIcon color=\"primary\" fontSize=\"large\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n                <TextField\n                  variant=\"standard\"\n                  value={location.state.data.company_guest.name}\n                  fullWidth\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <BusinessIcon color=\"primary\" fontSize=\"large\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n                <TextField\n                  variant=\"standard\"\n                  value={guest.name}\n                  fullWidth\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <BorderColorIcon color=\"primary\" fontSize=\"large\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n                <TableContainer>\n                  <Table stickyHeader aria-label=\"sticky table\">\n                    <TableHead>\n                      <TableRow>\n                        <StyledTableCell>Viewer name</StyledTableCell>\n                        <StyledTableCell align=\"center\">Email</StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                          Phone number\n                        </StyledTableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {currentPosts.map((row) => (\n                        <StyledTableRow key={row.name}>\n                          <StyledTableCell component=\"th\" scope=\"row\">\n                            {row.name}\n                          </StyledTableCell>\n                          <StyledTableCell align=\"center\">\n                            {row.email}\n                          </StyledTableCell>\n                          <StyledTableCell align=\"center\">\n                            {row.phone}\n                          </StyledTableCell>\n                        </StyledTableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n                <TablePagination\n                  component=\"div\"\n                  count={viewer.length}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  labelRowsPerPage=\"\"\n                  onChangePage={handleChangePage}\n                  rowsPerPageOptions={[]}\n                />\n\n                <TextField\n                  label=\"Date expiration\"\n                  value={moment(location.state.date).format(\n                    \"DD/MM/YYYY HH:mm:ss\"\n                  )}\n                  fullWidth\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <EventAvailableIcon color=\"primary\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n              </Paper>\n              <Button\n                style={{ marginTop: \"20px\", marginRight: \"10px\" }}\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => history.push(\"/document\")}\n              >\n                Cancel\n              </Button>\n              <Button\n                style={{ marginTop: \"20px\" }}\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={toogle}\n              >\n                Create\n              </Button>\n            </Col>\n            <Col>\n              <Form className=\"form-doc\">\n                <FormGroup row>\n                  <div>\n                    <PDF pdf={location.state.file[0]} />\n                  </div>\n                </FormGroup>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n\n        <Dialog\n          open={create}\n          TransitionComponent={Transition}\n          keepMounted\n          onClose={toogle}\n          disableBackdropClick\n          disableEscapeKeyDown\n          fullWidth\n        >\n          <DialogTitle>{\"Do you want create Contract?\"}</DialogTitle>\n          <DialogActions>\n            <Button onClick={toogle} color=\"secondary\" variant=\"contained\">\n              No\n            </Button>\n            <Button onClick={handleCreated} color=\"primary\" variant=\"contained\">\n              Yes\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\nexport default ContractContent;\n","/Users/macos/Desktop/EOfficeWeb/src/components/Document/Document.js",["253","254","255","256","257","258","259","260","261"],"import {\n  Container,\n  Row,\n  FormGroup,\n  Col,\n  Table,\n  Label,\n  Modal,\n  ModalHeader,\n  ModalFooter,\n} from \"reactstrap\";\n\nimport \"../../css/Document.css\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport { forwardRef, useEffect, useState } from \"react\";\nimport notsigned from \"../../images/status.png\";\nimport done from \"../../images/true.png\";\nimport invoicecompleted from \"../../images/invoicecompleted.png\";\nimport choo from \"../../images/choo.png\";\nimport invoiceAPI from \"../../api/invoiceAPI\";\nimport GetCreater from \"../GetData/GetCreater\";\nimport { useHistory } from \"react-router-dom\";\nimport contractAPI from \"../../api/contractAPI\";\nimport { getUser } from \"../../utils/Common\";\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Moment from \"moment\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Button from \"@material-ui/core/Button\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { InputAdornment } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Navbar from \"../Navbar/Navbar\";\nimport InvoiceStepper from \"../Stepper/InvoiceStepper\";\nimport ContractStepper from \"../Stepper/ContractStepper\";\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"down\" ref={ref} {...props} />;\n});\nfunction Document() {\n  const history = useHistory();\n  let [loading, setLoading] = useState(true);\n  const [isOpen, setIsOpen] = useState(false);\n  const [dele, setDel] = useState(false);\n  const toogle = () => setIsOpen(!isOpen);\n  const [filter, setFilter] = useState('1');\n  const [postList, setPostList] = useState([]);\n  const [listAllDocument, setListAllDocument] = useState([]);\n  const [listInvoice, setListInvoice] = useState([]);\n  const [listContract, setListContract] = useState([]);\n  const [find, setFind] = useState(\"\");\n  const [page, setPage] = useState(0);\n  const [rowsPerPage] = useState(10);\n  const indexOfLastPost = (page + 1) * rowsPerPage;\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\n\n  var post = postList\n    .sort((a, b) => {\n      return (\n        new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\n      );\n    })\n    .reverse();\n  const currentPosts = post.slice(indexOfFirstPost, indexOfLastPost);\n  function changePage(event, newPage) {\n    setPage(newPage);\n  }\n  const [value, setValue] = useState(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  useEffect(() => {\n    async function getListDocument() {\n      try {\n        if (getUser().Role === \"1\") {\n          await contractAPI\n            .getContractByCompanyId(getUser().CompanyId)\n            .then(function (contract) {\n              invoiceAPI\n                .getInvoiceByCompanyId(getUser().CompanyId)\n                .then(function (invoice) {\n                  const list = [...contract.data, ...invoice.data];\n                  setListAllDocument(list);\n                  setPostList(list);\n                  setListInvoice(invoice.data);\n                  setListContract(contract.data);\n                  setTimeout(() => {\n                    setLoading(false);\n                  }, 2000);\n                })\n                .catch(function (error) {\n                  console.log(error);\n                });\n            })\n            .catch(function (error) {\n              console.log(error);\n            });\n        } else {\n          await invoiceAPI\n            .getInvoiceByViewerId(getUser().Id)\n            .then(function (res1) {\n              invoiceAPI\n                .getInvoiceBySignerId(getUser().Id)\n                .then(function (res2) {\n                  contractAPI\n                    .getContractByViewerId(getUser().Id)\n                    .then(function (res3) {\n                      contractAPI\n                        .getContractBySignerId(getUser().Id)\n                        .then(function (res4) {\n                          const list = [\n                            ...res1.data,\n                            ...res2.data,\n                            ...res3.data,\n                            ...res4.data,\n                          ];\n                          const listInvoice1 = [...res1.data, ...res2.data];\n                          const listContract1 = [...res3.data, ...res4.data];\n                          setListAllDocument(list);\n                          setPostList(list);\n                          setListInvoice(listInvoice1);\n                          setListContract(listContract1);\n                          setTimeout(() => {\n                            setLoading(false);\n                          }, 2000);\n                        })\n                        .catch(function (error) {\n                          console.log(error);\n                        });\n                    })\n                    .catch(function (error) {\n                      console.log(error);\n                    });\n                })\n                .catch(function (error) {\n                  console.log(error);\n                });\n            })\n            .catch(function (error) {\n              console.log(error);\n            });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getListDocument();\n  }, []);\n\n  function AddContract() {\n    history.push(\"/contract\");\n  }\n  function AddInvoice() {\n    history.push(\"/invoice\");\n  }\n\n  function All() {\n    setPage(0);\n    setPostList(listAllDocument);\n    setValue(0);\n  }\n  function Invoice() {\n    setPage(0);\n    setPostList(\n      listAllDocument.filter((data) => {\n        if (data.invoiceURL) {\n          return data;\n        }\n      })\n    );\n    setValue(0);\n  }\n  function Contract() {\n    setPage(0);\n    setPostList(\n      listAllDocument.filter((data) => {\n        if (data.contractUrl) {\n          return data;\n        }\n      })\n    );\n\n    setValue(0);\n  }\n  function Signed() {\n    setPage(0);\n    if (filter === \"1\") {\n      setPostList(\n        listAllDocument.filter((data) => {\n          if (data.status === 2) {\n            return data;\n          }\n        })\n      );\n    } else if (filter === \"2\") {\n      setPostList(\n        listContract.filter((data) => {\n          if (data.status === 2) {\n            return data;\n          }\n        })\n      );\n    } else {\n      setPostList(\n        listInvoice.filter((data) => {\n          if (data.status === 2) {\n            return data;\n          }\n        })\n      );\n    }\n  }\n  function NotSigned() {\n    setPage(0);\n    if (filter === \"1\") {\n      setPostList(\n        listAllDocument.filter((data) => {\n          if (data.status < 2) {\n            return data;\n          }\n        })\n      );\n    } else if (filter === \"2\") {\n      setPostList(\n        listContract.filter((data) => {\n          if (data.status < 2) {\n            return data;\n          }\n        })\n      );\n    } else {\n      setPostList(\n        listInvoice.filter((data) => {\n          if (data.status < 2) {\n            return data;\n          }\n        })\n      );\n    }\n  }\n  return (\n    <div>\n      <header>\n        <Navbar />\n      </header>\n      <main className=\"main-panel\">\n        <Dialog open={isOpen} onClose={toogle} TransitionComponent={Transition}>\n          <DialogContent>\n            <img\n              style={{ marginLeft: \"20%\" }}\n              src={choo}\n              alt=\"\"\n              width=\"280px\"\n              height=\"280px\"\n            />\n          </DialogContent>\n          <DialogTitle>\n            Please select the type of document you want create?\n          </DialogTitle>\n          <DialogActions style={{ paddingBottom: \"30px\" }}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ marginRight: \"15%\" }}\n              onClick={AddContract}\n            >\n              Contract\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ marginRight: \"20%\", width: \"104px\" }}\n              onClick={AddInvoice}\n            >\n              Invoice\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Container fluid={true}>\n          <div className=\"form-create\">\n            <FormGroup row>\n              <Button\n                variant=\"contained\"\n                size=\"small\"\n                color=\"primary\"\n                onClick={toogle}\n              >\n                +Create\n              </Button>\n              <Col>\n                <Row>\n                  <TextField\n                    name=\"search\"\n                    type=\"text\"\n                    variant=\"outlined\"\n                    value={find}\n                    placeholder=\"Search by name document\"\n                    onChange={(event) => {\n                      setFind(event.target.value);\n                    }}\n                    size=\"small\"\n                    fullWidth\n                    style={{ marginLeft: 20 }}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <SearchIcon color=\"primary\" />\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                </Row>\n              </Col>\n\n              <FormControl\n                size=\"small\"\n                variant=\"outlined\"\n                style={{ marginLeft: 20 }}\n              >\n                <Select\n                  defaultValue={1}\n                  onChange={(e) => setFilter(e.target.value)}\n                >\n                  <MenuItem onClick={All} value=\"1\">\n                    All\n                  </MenuItem>\n                  <MenuItem onClick={Contract} value=\"2\">\n                    Contract\n                  </MenuItem>\n                  <MenuItem onClick={Invoice} value=\"3\">\n                    Invoice\n                  </MenuItem>\n                </Select>\n              </FormControl>\n              <Col>\n                <Row>\n                  <Paper\n                    square\n                    elevation={0}\n                    style={{ position: \"absolute\", right: 0, height: 40 }}\n                  >\n                    <Tabs\n                      value={value}\n                      indicatorColor=\"primary\"\n                      textColor=\"primary\"\n                      onChange={handleChange}\n                    >\n                      <Tab\n                        style={{ fontWeight: \"bold\" }}\n                        value={3}\n                        onClick={Signed}\n                        label=\"Signed\"\n                      />\n                      <Tab\n                        style={{ fontWeight: \"bold\" }}\n                        value={2}\n                        onClick={NotSigned}\n                        label=\"Not signed\"\n                      />\n                    </Tabs>\n                  </Paper>\n                </Row>\n              </Col>\n            </FormGroup>\n            <TablePagination\n              hidden={find !== \"\" ? true : false}\n              component=\"div\"\n              count={postList.length}\n              page={page}\n              onChangePage={changePage}\n              rowsPerPage={rowsPerPage}\n              labelRowsPerPage=\"\"\n              rowsPerPageOptions={[]}\n            />\n          </div>\n          {loading ? (\n            <ScaleLoader color={\"#2512DF\"} loading={loading} size={40} />\n          ) : (\n            <Table hidden={find !== \"\" ? true : false} hover>\n              <tbody>\n                {currentPosts.map((doc, key) => (\n                  <tr key={key}>\n                    <td\n                      onClick={() => {\n                        if (doc.contractUrl) {\n                          history.push({\n                            pathname:\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\n                            state: doc,\n                          });\n                        } else if (doc.invoiceURL) {\n                          history.push({\n                            pathname:\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\n                            state: doc,\n                          });\n                        }\n                      }}\n                    >\n                      <Label style={{ fontWeight: \"bold\" }}>Creator name</Label>\n                      <br />\n                      <Label className=\"demo-2\">\n                        <GetCreater id={doc.creatorId} />\n                      </Label>\n                    </td>\n                    <td\n                      onClick={() => {\n                        if (doc.contractUrl) {\n                          history.push({\n                            pathname:\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\n                            state: doc,\n                          });\n                        } else if (doc.invoiceURL) {\n                          history.push({\n                            pathname:\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\n                            state: doc,\n                          });\n                        }\n                      }}\n                    >\n                      <Label style={{ fontWeight: \"bold\" }}>\n                        Title document\n                      </Label>\n                      <br />\n                      <Label className=\"demo demo-2\">{doc.title}</Label>\n                    </td>\n                    <td\n                      onClick={() => {\n                        if (doc.contractUrl) {\n                          history.push({\n                            pathname:\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\n                            state: doc,\n                          });\n                        } else if (doc.invoiceURL) {\n                          history.push({\n                            pathname:\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\n                            state: doc,\n                          });\n                        }\n                      }}\n                    >\n                      <Label style={{ fontWeight: \"bold\" }}>Status</Label>\n                      <br />\n                      <Label className=\"step\">\n                        {doc.contractUrl ? (\n                          <ContractStepper value={doc.status} />\n                        ) : (\n                          <div>\n                            <InvoiceStepper value={doc.status === 2 ? 1 : doc.status} />\n                          </div>\n                        )}\n                      </Label>\n                    </td>\n                    <td\n                      onClick={() => {\n                        if (doc.contractUrl) {\n                          history.push({\n                            pathname:\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\n                            state: doc,\n                          });\n                        } else if (doc.invoiceURL) {\n                          history.push({\n                            pathname:\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\n                            state: doc,\n                          });\n                        }\n                      }}\n                    >\n                      <Label></Label>\n                      <br />\n                      <Label>\n                        {doc.invoiceURL ? (\n                          <img\n                            hidden={doc.status === 2 ? false : true}\n                            src={invoicecompleted}\n                            alt=\"\"\n                          />\n                        ) : (\n                          <img\n                            hidden={doc.status === 2 ? false : true}\n                            src={done}\n                            alt=\"\"\n                          />\n                        )}\n                        <img\n                          hidden={doc.status < 2 ? false : true}\n                          src={notsigned}\n                          alt=\"\"\n                        />\n                      </Label>\n                    </td>\n                    <td\n                      onClick={() => {\n                        if (doc.contractUrl) {\n                          history.push({\n                            pathname:\n                              \"/detail/contract/\" + doc.id + \"/\" + doc.title,\n                            state: doc,\n                          });\n                        } else if (doc.invoiceURL) {\n                          history.push({\n                            pathname:\n                              \"/detail/invoice/\" + doc.id + \"/\" + doc.title,\n                            state: doc,\n                          });\n                        }\n                      }}\n                    >\n                      <Label style={{ fontWeight: \"bold\" }}></Label>\n                      <br />\n                      <Label>\n                        {Moment(doc.dateCreate).format(\"DD/MM/YYYY HH:mm:ss\")}\n                      </Label>\n                    </td>\n                    <td>\n                      <Label></Label>\n                      <br />\n                      <Label hidden={doc.status < 2 ? false : true}>\n                        <DeleteIcon\n                          onClick={() => setDel(true)}\n                          fontSize=\"default\"\n                          style={{ cursor: \"pointer\" }}\n                        />\n                      </Label>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          )}\n          <Table hover hidden={find === \"\" ? true : false}>\n            <tbody>\n              {postList\n                .filter((data) => {\n                  if (data.title.toLowerCase().includes(find.toLowerCase())) {\n                    return data;\n                  }\n                })\n                .map((data, key) => (\n                  <tr key={key}>\n                    <td\n                      onClick={() => {\n                        if (data.contractUrl) {\n                          history.push({\n                            pathname:\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\n                            state: data,\n                          });\n                        } else if (data.invoiceURL) {\n                          history.push({\n                            pathname:\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\n                            state: data,\n                          });\n                        }\n                      }}\n                    >\n                      <Label style={{ fontWeight: \"bold\" }}>Creator name</Label>\n                      <br />\n                      <Label className=\"demo-2\">\n                        <GetCreater id={data.creatorId} />\n                      </Label>\n                    </td>\n                    <td\n                      onClick={() => {\n                        if (data.contractUrl) {\n                          history.push({\n                            pathname:\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\n                            state: data,\n                          });\n                        } else if (data.invoiceURL) {\n                          history.push({\n                            pathname:\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\n                            state: data,\n                          });\n                        }\n                      }}\n                    >\n                      <Label style={{ fontWeight: \"bold\" }}>\n                        Title document\n                      </Label>\n                      <br />\n                      <Label className=\"demo demo-2\">{data.title}</Label>\n                    </td>\n                    <td\n                      onClick={() => {\n                        if (data.contractUrl) {\n                          history.push({\n                            pathname:\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\n                            state: data,\n                          });\n                        } else if (data.invoiceURL) {\n                          history.push({\n                            pathname:\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\n                            state: data,\n                          });\n                        }\n                      }}\n                    >\n                      <Label style={{ fontWeight: \"bold\" }}>Status</Label>\n                      <br />\n                      <Label className=\"step\">\n                        {data.contractUrl ? (\n                          <ContractStepper value={data.status} />\n                        ) : (\n                          <div>\n                            <InvoiceStepper value={data.status === 2 ? 1 : data.status} />\n                          </div>\n                        )}\n                      </Label>\n                    </td>\n                    <td\n                      onClick={() => {\n                        if (data.contractUrl) {\n                          history.push({\n                            pathname:\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\n                            state: data,\n                          });\n                        } else if (data.invoiceURL) {\n                          history.push({\n                            pathname:\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\n                            state: data,\n                          });\n                        }\n                      }}\n                    >\n                      <Label></Label>\n                      <br />\n                      <Label>\n                        {data.invoiceURL ? (\n                          <img\n                            hidden={data.status === 2 ? false : true}\n                            src={invoicecompleted}\n                            alt=\"\"\n                          />\n                        ) : (\n                          <img\n                            hidden={data.status === 2 ? false : true}\n                            src={done}\n                            alt=\"\"\n                          />\n                        )}\n                        <img\n                          hidden={data.status < 2 ? false : true}\n                          src={notsigned}\n                          alt=\"\"\n                        />\n                      </Label>\n                    </td>\n                    <td\n                      onClick={() => {\n                        if (data.contractUrl) {\n                          history.push({\n                            pathname:\n                              \"/detail/contract/\" + data.id + \"/\" + data.title,\n                            state: data,\n                          });\n                        } else if (data.invoiceURL) {\n                          history.push({\n                            pathname:\n                              \"/detail/invoice/\" + data.id + \"/\" + data.title,\n                            state: data,\n                          });\n                        }\n                      }}\n                    >\n                      <Label style={{ fontWeight: \"bold\" }}></Label>\n                      <br />\n                      <Label>\n                        {Moment(data.dateCreate).format(\"DD/MM/YYYY\")}\n                      </Label>\n                    </td>\n                    <td>\n                      <Label></Label>\n                      <br />\n                      <Label hidden={data.status < 2 ? false : true}>\n                        <DeleteIcon\n                          onClick={() => setDel(true)}\n                          fontSize=\"default\"\n                          style={{ cursor: \"pointer\" }}\n                        />\n                      </Label>\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </Table>\n          <Modal isOpen={dele}>\n            <ModalHeader>Are you sure delete document?</ModalHeader>\n            <ModalFooter>\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                style={{ marginRight: \"5px\" }}\n                onClick={() => setDel(!dele)}\n              >\n                No\n              </Button>\n              <Button color=\"primary\" variant=\"contained\">\n                Yes\n              </Button>\n            </ModalFooter>\n          </Modal>\n        </Container>\n      </main>\n    </div>\n  );\n}\nexport default Document;\n","/Users/macos/Desktop/EOfficeWeb/src/components/Notification/Notification.js",["262","263"],"import { Container, Row, Table } from \"reactstrap\";\nimport Button from \"@material-ui/core/Button\";\nimport \"../../css/Notification.css\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport notiAPI from \"../../api/notiAPI\";\nimport moment from \"moment\";\nimport Navbar from \"../Navbar/Navbar\";\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\nimport {\n  FormControl,\n  FormHelperText,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport { getUser } from \"../../utils/Common\";\n\nfunction Notification() {\n  const [all, setAll] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage] = useState(10);\n  const indexOfLastPost = (page + 1) * rowsPerPage;\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\n  const [filter, setFilter] = useState([]);\n  const [filterByStatus, setFilterByStatus] = useState(\"1\");\n  const [filterByType, setFilterByType] = useState(\"1\");\n  const handleChange = (event) => {\n    setFilterByStatus(event.target.value);\n  };\n  const handleChange2 = (event) => {\n    setFilterByType(event.target.value);\n  };\n  var listNoti = filter\n    .sort((a, b) => {\n      return (\n        new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\n      );\n    })\n    .reverse();\n  const currentPost = listNoti.slice(indexOfFirstPost, indexOfLastPost);\n  useEffect(() => {\n    async function fetListNoti() {\n      try {\n        const res = await notiAPI.getById(getUser().Id);\n        setFilter(res.data);\n        setAll(\n          res.data\n            .sort((a, b) => {\n              return (\n                new Date(a.dateCreate).getTime() -\n                new Date(b.dateCreate).getTime()\n              );\n            })\n            .reverse()\n        );\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n    fetListNoti();\n  }, []);\n  function changePage(event, newPage) {\n    setPage(newPage);\n  }\n  function filterSeen() {\n    setFilter(\n      all\n        .filter((data) => {\n          if (data.status === 1) {\n            return data;\n          }\n        })\n        .sort((a, b) => {\n          return (\n            new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\n          );\n        })\n        .reverse()\n    );\n  }\n  function filterNotSeen() {\n    setFilter(\n      all\n        .filter((data) => {\n          if (data.status === 0) {\n            return data;\n          }\n        })\n        .sort((a, b) => {\n          return (\n            new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\n          );\n        })\n        .reverse()\n    );\n  }\n  function filterAll() {\n    setFilter(\n      all\n        .sort((a, b) => {\n          return (\n            new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\n          );\n        })\n        .reverse()\n    );\n  }\n\n  return (\n    <div>\n      <header>\n        <Navbar />\n      </header>\n      <main className=\"main-panel\">\n        <Container fluid>\n          <Row>\n            <p\n              style={{\n                float: \"left\",\n                fontSize: \"18px\",\n                marginTop: \"20px\",\n                marginLeft: 10,\n              }}\n            >\n              Notification management\n            </p>\n            <Button\n              style={{ position: \"absolute\", right: 0, marginTop: \"20px\" }}\n              color=\"primary\"\n            >\n              Mark all announcements as read\n            </Button>\n          </Row>\n          <Row>\n            <FormControl variant=\"outlined\" size=\"small\">\n              <Select\n                style={{ marginLeft: 10, width: 160 }}\n                value={filterByType}\n                onChange={handleChange2}\n              >\n                <MenuItem value=\"1\">All</MenuItem>\n                <MenuItem value=\"2\">Contract</MenuItem>\n                <MenuItem value=\"3\">Invoice</MenuItem>\n              </Select>\n              <FormHelperText>-Filter by type-</FormHelperText>\n            </FormControl>\n            <FormControl variant=\"outlined\" size=\"small\">\n              <Select\n                style={{ marginLeft: 10, width: 160 }}\n                value={filterByStatus}\n                onChange={handleChange}\n              >\n                <MenuItem onClick={filterAll} value=\"1\">\n                  All\n                </MenuItem>\n                <MenuItem onClick={filterSeen} value=\"2\">\n                  Seen\n                </MenuItem>\n                <MenuItem onClick={filterNotSeen} value=\"3\">\n                  Not Seen\n                </MenuItem>\n              </Select>\n              <FormHelperText>-Filter by status-</FormHelperText>\n            </FormControl>\n            <TablePagination\n              component=\"div\"\n              style={{ position: \"absolute\", right: 0 }}\n              count={filter.length}\n              page={page}\n              rowsPerPage={rowsPerPage}\n              onChangePage={changePage}\n              labelRowsPerPage=\"\"\n              rowsPerPageOptions={[]}\n            />\n          </Row>\n          {loading ? (\n            <ScaleLoader color={\"#2512DF\"} loading={loading} size={35} />\n          ) : (\n            <Table style={{ marginTop: 20 }} hover>\n              <tbody>\n                {currentPost.map((row) => (\n                  <tr\n                    key={row.id}\n                    style={{\n                      background: row.status === 0 ? \"#b3aeae75\" : \"white\",\n                      padding: 10,\n                      cursor: \"pointer\",\n                    }}\n                  >\n                    <td>\n                      <Row style={{ fontWeight: \"bold\", marginLeft: 1 }}>\n                        {row.content}\n                      </Row>\n                      <Row style={{ marginLeft: 10 }}>{row.title}</Row>\n                      <Row style={{ marginLeft: 10 }}>\n                        <Link to=\"/\">View detail</Link>\n                      </Row>\n                    </td>\n                    <td style={{ position: \"absolute\", right: 10 }}>\n                      {moment(row.createdDate).format(\"DD/MM/YYYY HH:mm:ss\")}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          )}\n        </Container>\n      </main>\n    </div>\n  );\n}\nexport default Notification;\n","/Users/macos/Desktop/EOfficeWeb/src/components/Profile/Profile.js",["264"],"import {\n  CardBody,\n  CardHeader,\n  Col,\n  Container,\n  Form,\n  FormGroup,\n  Label,\n  Row,\n} from \"reactstrap\";\nimport companyListAPI from \"../../api/companyListAPI\";\nimport \"../../css/Profile.css\";\nimport { getUser, removeUserSession } from \"../../utils/Common\";\nimport { useHistory } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport departmentAPI from \"../../api/departmentAPI\";\nimport Navbar from \"../Navbar/Navbar\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport PhotoCamera from \"@material-ui/icons/PhotoCamera\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport BusinessIcon from \"@material-ui/icons/Business\";\nimport {\n  Card,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport md5 from \"md5\";\nimport userListAPI from \"../../api/userListAPI\";\nimport * as Icon from \"react-icons/ai\";\nimport { toast } from \"react-toastify\";\n\nfunction Profile() {\n  const history = useHistory();\n  const [changePassword, setChangePassword] = useState(false);\n  const [avatar, setAvatar] = useState(\"\");\n  const [company, setCompany] = useState(\"\");\n  const [department, setDepartment] = useState(\"\");\n  const [childDepartment, setChildDepartment] = useState(\"\");\n  const [oldPass, setOldPass] = useState(\"\");\n  const [password, setPassword] = useState({\n    current_pass: \"\",\n    new_pass: \"\",\n    confirm_pass: \"\",\n  });\n  const [user1, setUser] = useState([]);\n  const [error, setError] = useState({\n    old: false,\n    message_old: \"\",\n    new: false,\n    message_new: \"\",\n    confirm_new: false,\n    message_confirm: \"\",\n  });\n  const [userProfile, setUserProfile] = useState({\n    username: \"\",\n    address: \"\",\n  });\n  const [newAvater, setNewAvatar] = useState(false);\n  const [error1, setError1] = useState(true);\n  const [error2, setError2] = useState(true);\n  const [error3, setError3] = useState({\n    1: true,\n    2: true,\n    3: true,\n  });\n  function handleOnChange(e) {\n    const target = e.target;\n    const name = target.name;\n    const value = target.value;\n    setPassword({\n      ...password,\n      [name]: value,\n    });\n  }\n  const [open, setOpen] = useState(false);\n  useEffect(() => {\n    async function fetPassword() {\n      try {\n        const response = await userListAPI.getUserById(getUser().Id);\n        setOldPass(response.data.password);\n        setUser(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetPassword();\n  }, []);\n  function handleChangePassword(e) {\n    e.preventDefault();\n    const md5CurrentPass = md5(password.current_pass);\n    var pattern = new RegExp(\n      /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$/\n    );\n    if (password.current_pass.trim() === \"\") {\n      setError({\n        ...error,\n        old: true,\n        message_old: \"Please enter current password\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          old: false,\n          message_old: \"\",\n        });\n      }, 3000);\n    } else if (password.new_pass.trim() === \"\") {\n      setError({\n        ...error,\n        new: true,\n        message_new: \"Please enter new password\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          new: false,\n          message_new: \"\",\n        });\n      }, 3000);\n    } else if (password.confirm_pass.trim() === \"\") {\n      setError({\n        ...error,\n        confirm_new: true,\n        message_confirm: \"Please enter confirm new password\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          confirm_new: false,\n          message_confirm: \"\",\n        });\n      }, 3000);\n    } else if (!pattern.test(password.new_pass.trim())) {\n      setError({\n        ...error,\n        new: true,\n        message_new: \"Password must be at least 6 characters, 1 upper case\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          confirm_new: false,\n          message_confirm: \"\",\n        });\n      }, 3000);\n    } else if (password.new_pass.trim() !== password.confirm_pass.trim()) {\n      setError({\n        ...error,\n        confirm_new: true,\n        message_confirm: \"Password confirm is not match\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          confirm_new: false,\n          message_confirm: \"\",\n        });\n      }, 3000);\n    } else if (md5CurrentPass !== oldPass) {\n      setError({\n        ...error,\n        old: true,\n        message_old: \"Current password is incorrect\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          old: false,\n          message_old: \"\",\n        });\n      }, 3000);\n    } else {\n      const md5Newpass = md5(password.new_pass);\n      const params = {\n        id: getUser().Id,\n        oldPassword: md5CurrentPass,\n        newPassword: md5Newpass,\n      };\n      userListAPI\n        .changePassword(params)\n        .then(function () {\n          toast.success(\"Change password successfully\", {\n            position: toast.POSITION.TOP_CENTER,\n          });\n          setChangePassword(false);\n          setTimeout(() => {\n            removeUserSession();\n            history.push(\"/\");\n          }, 6000);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }\n  useEffect(() => {\n    async function fetCompany() {\n      try {\n        const response = await companyListAPI.getCompanyById(\n          getUser().CompanyId\n        );\n        setCompany(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetCompany();\n  }, []);\n\n  useEffect(() => {\n    async function fetDepartment() {\n      try {\n        const response = await departmentAPI.getDepartmentById(\n          getUser().DepartmentId\n        );\n        setDepartment(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetDepartment();\n  }, []);\n\n  useEffect(() => {\n    async function fetSubDepartment() {\n      try {\n        const response = await departmentAPI.getSubDepartmentById(\n          getUser().SubDepartmentId\n        );\n        setChildDepartment(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetSubDepartment();\n  }, []);\n\n  function handleNewAvatar(e) {\n    e.preventDefault();\n    const url = avatar.substring(23);\n    const params = {\n      id: getUser().Id,\n      avatar: url,\n      password: oldPass,\n      phone: getUser().Phone,\n      address: getUser().Address,\n      subDepartmentId: getUser().SubDepartmentId,\n      departmentId: getUser().DepartmentId,\n    };\n    userListAPI\n      .changeAvatar(params)\n      .then(function () {\n        window.location.reload();\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  const [a, setA] = useState(\"\");\n  const getBase64FromUrl = async (url) => {\n    const data = await fetch(url);\n    const blob = await data.blob();\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(blob);\n      reader.onloadend = function () {\n        const base64data = reader.result;\n        resolve(base64data);\n        setA(base64data);\n      };\n    });\n  };\n  getBase64FromUrl(user1.avatar);\n  function handleEdit(e) {\n    e.preventDefault();\n    if (userProfile.address.trim().length > 255) {\n      setError3({\n        ...error3,\n        3: false,\n      });\n      setTimeout(() => {\n        setError3({\n          ...error3,\n          3: true,\n        });\n      });\n    } else {\n      const params = {\n        id: getUser().Id,\n        password: oldPass,\n        avatar: a.substring(37),\n        phone: getUser().Phone,\n        address: userProfile.address,\n        subDepartmentId: getUser().SubDepartmentId,\n        departmentId: getUser().DepartmentId,\n      };\n      userListAPI\n        .updateUser(params)\n        .then(function () {\n          window.location.reload();\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }\n\n  return (\n    <div>\n      <header>\n        <Navbar />\n      </header>\n      <main className=\"main-panel\" style={{ backgroundColor: \"#e8e7e7\" }}>\n        <div className=\"avatar-col\">\n          <Label\n            style={{\n              float: \"left\",\n              fontWeight: \"bolder\",\n              color: \"white\",\n              marginTop: 20,\n              marginLeft: 20,\n              border: \"1px solid #ffff\",\n              borderRadius: \"25px\",\n              padding: 10,\n            }}\n          >\n            USER PROFILE\n          </Label>\n        </div>\n        <Container fluid={true}>\n          <Col style={{ top: \"-200px\" }}>\n            <div>\n              <img\n                src={user1.avatar}\n                alt=\"avatar\"\n                style={{ borderRadius: \"50%\" }}\n                width=\"300px\"\n                height=\"300px\"\n              />\n            </div>\n            <div>\n              <input\n                accept=\"image/*\"\n                id=\"icon-button-file\"\n                type=\"file\"\n                hidden={true}\n                onChange={(e) => {\n                  if (e.target.files.length !== 0) {\n                    if (\n                      e.target.files[0].type !== \"image/jpeg\" &&\n                      e.target.files[0].type !== \"image/png\" &&\n                      e.target.files[0].type !== \"image/jpg\"\n                    ) {\n                      setError1(false);\n                      setTimeout(() => {\n                        setError1(true);\n                      }, 3000);\n                    } else if (e.target.files[0].size > 31457280) {\n                      setError2(false);\n                      setTimeout(() => {\n                        setError2(true);\n                      }, 3000);\n                    } else {\n                      var file = e.target.files[0];\n                      var reader = new FileReader();\n                      reader.readAsDataURL(file);\n                      reader.onloadend = function () {\n                        setAvatar(reader.result);\n                      }.bind(this);\n                      setNewAvatar(true);\n                    }\n                  }\n                }}\n              />\n              <label htmlFor=\"icon-button-file\">\n                <IconButton\n                  color=\"primary\"\n                  aria-label=\"upload picture\"\n                  component=\"span\"\n                >\n                  <PhotoCamera />\n                </IconButton>\n              </label>\n              <div hidden={error1} style={{ color: \"red\" }}>\n                We only support PNG or JPG pictures.\n              </div>\n              <div hidden={error2} style={{ color: \"red\" }}>\n                We don't support image larger 30MB .\n              </div>\n            </div>\n            <div>\n              <Button\n                color=\"primary\"\n                onClick={() => setChangePassword(!changePassword)}\n              >\n                Change password\n              </Button>\n            </div>\n          </Col>\n          <Row>\n            <Col xl={8} style={{ top: \"-200px\" }}>\n              <Card>\n                <CardHeader\n                  style={{ padding: \"1.25rem 1.5rem\", marginBottom: 0 }}\n                >\n                  <Row>\n                    <Col xs={8}>\n                      <h5 className=\"mb-0\">My account</h5>\n                    </Col>\n                    <Col xs={4} className=\"text-right\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        startIcon={<EditIcon />}\n                        style={{ float: \"right\" }}\n                        size=\"small\"\n                        onClick={() => setOpen(true)}\n                      >\n                        Edit\n                      </Button>\n                    </Col>\n                  </Row>\n                </CardHeader>\n                <CardBody>\n                  <Form>\n                    <h6 className=\"heading-small text-muted mb-4\">\n                      User information\n                    </h6>\n                    <div className=\"pl-lg-4\">\n                      <Row>\n                        <Col lg={6}>\n                          <FormGroup style={{ textAlign: \"left\" }}>\n                            <Label\n                              className=\"form-control-label\"\n                              for=\"input-username\"\n                            >\n                              Account name\n                            </Label>\n                            <input\n                              id=\"input-username\"\n                              name=\"username\"\n                              placeholder=\"Username\"\n                              type=\"text\"\n                              className=\"form-control1-alternative form-control1\"\n                              value={getUser().Name}\n                              disabled\n                            />\n                          </FormGroup>\n                        </Col>\n                        <Col lg={6}>\n                          <FormGroup style={{ textAlign: \"left\" }}>\n                            <Label\n                              className=\"form-control-label\"\n                              for=\"input-email\"\n                            >\n                              Email\n                            </Label>\n                            <input\n                              id=\"input-email\"\n                              placeholder=\"Email\"\n                              type=\"email\"\n                              className=\"form-control1-alternative form-control1\"\n                              value={getUser().Email}\n                              disabled\n                            />\n                          </FormGroup>\n                        </Col>\n                      </Row>\n                      <Row>\n                        <Col lg={6}>\n                          <FormGroup style={{ textAlign: \"left\" }}>\n                            <Label\n                              className=\"form-control-label\"\n                              for=\"input-department\"\n                            >\n                              Department\n                            </Label>\n                            <input\n                              id=\"input-department\"\n                              placeholder=\"Department\"\n                              type=\"text\"\n                              className=\"form-control1-alternative form-control1\"\n                              value={department.name}\n                              disabled\n                            />\n                          </FormGroup>\n                        </Col>\n                        <Col lg={6}>\n                          <FormGroup style={{ textAlign: \"left\" }}>\n                            <Label\n                              className=\"form-control-label\"\n                              for=\"input-username\"\n                            >\n                              Child Department\n                            </Label>\n                            <input\n                              id=\"input-username\"\n                              placeholder=\"Child Department\"\n                              type=\"text\"\n                              className=\"form-control1-alternative form-control1\"\n                              value={childDepartment.name}\n                              disabled\n                            />\n                          </FormGroup>\n                        </Col>\n                      </Row>\n                    </div>\n                    <hr className=\"my-4\" />\n                    <h6 className=\"heading-small text-muted mb-4\">\n                      Contact information\n                    </h6>\n                    <div className=\"pl-lg-4\">\n                      <Row>\n                        <Col lg={6}>\n                          <FormGroup style={{ textAlign: \"left\" }}>\n                            <Label\n                              className=\"form-control-label\"\n                              for=\"input-phone\"\n                            >\n                              Phone number\n                            </Label>\n                            <input\n                              id=\"input-phone\"\n                              placeholder=\"Phone number\"\n                              type=\"tel\"\n                              className=\"form-control1-alternative form-control1\"\n                              value={getUser().Phone}\n                              disabled\n                            />\n                          </FormGroup>\n                        </Col>\n                        <Col lg={6}>\n                          <FormGroup style={{ textAlign: \"left\" }}>\n                            <Label\n                              className=\"form-control-label\"\n                              for=\"input-address\"\n                            >\n                              Address\n                            </Label>\n                            <input\n                              name=\"address\"\n                              onChange={(e) =>\n                                setUserProfile({\n                                  ...userProfile,\n                                  address: e.target.value,\n                                })\n                              }\n                              id=\"input-address\"\n                              placeholder=\"Address\"\n                              type=\"text\"\n                              className=\"form-control1-alternative form-control1\"\n                              defaultValue={user1.address}\n                            />\n                            <div hidden={error3[3]} style={{ color: \"red\" }}>\n                              Address must not larger 255 characters\n                            </div>\n                          </FormGroup>\n                        </Col>\n                      </Row>\n                    </div>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n            <Col xl={4} style={{ top: \"-200px\" }}>\n              <Card>\n                <CardHeader\n                  style={{ padding: \"1.25rem 1.5rem\", marginBottom: 0 }}\n                >\n                  <Row>\n                    <Col>\n                      <BusinessIcon color=\"primary\" fontSize=\"large\" />\n                      <h5>{company.name}</h5>\n                    </Col>\n                  </Row>\n                </CardHeader>\n                <CardBody>\n                  <Form>\n                    <h6 className=\"heading-small text-muted mb-4\">\n                      Company information\n                    </h6>\n                    <Row>\n                      <Col>\n                        <FormGroup style={{ textAlign: \"left\" }}>\n                          <Label\n                            className=\"form-control-label\"\n                            for=\"input-address\"\n                          >\n                            Address\n                          </Label>\n                          <input\n                            id=\"input-address\"\n                            placeholder=\"Address\"\n                            type=\"text\"\n                            className=\"form-control1-alternative form-control1\"\n                            value={company.address}\n                            disabled\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n          <Dialog open={changePassword}>\n            <DialogTitle>Create new password</DialogTitle>\n            <DialogContent>\n              <DialogContentText>\n                To change your password, please enter your current password\n                here. And enter new your password then confirm.\n              </DialogContentText>\n              <TextField\n                autoFocus\n                margin=\"dense\"\n                name=\"current_pass\"\n                label=\"Current Password\"\n                type=\"password\"\n                onChange={handleOnChange}\n                error={error.old}\n                helperText={error.message_old}\n                fullWidth\n              />\n              <TextField\n                autoFocus\n                name=\"new_pass\"\n                margin=\"dense\"\n                label=\"New Password\"\n                type=\"password\"\n                error={error.new}\n                helperText={error.message_new}\n                onChange={handleOnChange}\n                fullWidth\n              />\n              <TextField\n                autoFocus\n                name=\"confirm_pass\"\n                margin=\"dense\"\n                label=\"Confirm Password\"\n                type=\"password\"\n                error={error.confirm_new}\n                helperText={error.message_confirm}\n                onChange={handleOnChange}\n                fullWidth\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => setChangePassword(!changePassword)}\n              >\n                Cancel\n              </Button>\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={handleChangePassword}\n              >\n                Update\n              </Button>\n            </DialogActions>\n          </Dialog>\n          <Dialog open={newAvater}>\n            <DialogTitle>\n              Confirm your new profile picture\n              <Icon.AiOutlineClose\n                style={{ cursor: \"pointer\", float: \"right\" }}\n                onClick={() => {\n                  setAvatar(\"\");\n                  setNewAvatar(false);\n                }}\n              />\n            </DialogTitle>\n            <DialogContent>\n              <img\n                src={avatar}\n                style={{ borderRadius: \"50%\" }}\n                alt=\"\"\n                width=\"400px\"\n                height=\"400px\"\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button\n                variant=\"contained\"\n                fullWidth\n                color=\"primary\"\n                onClick={handleNewAvatar}\n              >\n                Set new profile picture\n              </Button>\n            </DialogActions>\n          </Dialog>\n          <Dialog open={open} fullWidth>\n            <DialogTitle>Are you want update profile?</DialogTitle>\n            <DialogActions>\n              <Button\n                variant=\"contained\"\n                onClick={() => setOpen(false)}\n                color=\"secondary\"\n              >\n                Cancel\n              </Button>\n              <Button\n                variant=\"contained\"\n                onClick={handleEdit}\n                color=\"primary\"\n                autoFocus\n              >\n                Update\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </Container>\n      </main>\n    </div>\n  );\n}\nexport default Profile;\n","/Users/macos/Desktop/EOfficeWeb/src/components/DetailDocument/InvoiceDetail.js",["265"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\nimport StepDetail from \"../Sidebar/StepDetail\";\nimport PDF from \"../PDF/PDF\";\nimport notsigned from \"../../images/status.png\";\nimport done from \"../../images/invoicecompleted.png\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport userListAPI from \"../../api/userListAPI\";\nimport invoiceAPI from \"../../api/invoiceAPI\";\nimport GetCreater from \"../GetData/GetCreater\";\nimport fileDownload from \"js-file-download\";\nimport axios from \"axios\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { InputAdornment, TablePagination } from \"@material-ui/core\";\nimport TitleIcon from \"@material-ui/icons/Title\";\nimport BorderColorIcon from \"@material-ui/icons/BorderColor\";\nimport Table from \"@material-ui/core/Table\";\nimport \"date-fns\";\nimport Moment from \"moment\";\nimport EventAvailableIcon from \"@material-ui/icons/EventAvailable\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport GetEmail from \"../GetData/GetEmail\";\nimport GetPhone from \"../GetData/GetPhone\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport Navbar from \"../Navbar/Navbar\";\nimport printJS from \"print-js\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.white,\n    color: theme.palette.common.black,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nfunction InvoiceDetail() {\n  const [activeStep, setActiveStep] = useState(1);\n  const [document, setDocument] = useState([]);\n  const [signer, setSigner] = useState([]);\n  const [viewer, setViewer] = useState([]);\n  const [signerId, setSignerId] = useState();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage] = useState(2);\n  const indexOfLastPost = (page + 1) * rowsPerPage;\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\n  const currentPosts = viewer.slice(indexOfFirstPost, indexOfLastPost);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const param = useParams();\n  useEffect(() => {\n    async function getInvoiceById() {\n      try {\n        const res = await invoiceAPI.getInvoiceById(param.id);\n        setDocument(res.data);\n        setViewer(res.data.viewers);\n        setActiveStep(res.data.status + 1);\n        setSignerId(res.data.signerId);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getInvoiceById();\n  }, []);\n  useEffect(() => {\n    async function getSigner() {\n      try {\n        const res = await userListAPI.getUserById(signerId);\n        setSigner(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getSigner();\n  }, [signerId]);\n\n  function printFile() {\n    printJS({\n      printable: document.invoiceURL,\n      type: \"pdf\",\n    });\n  }\n  return (\n    <div>\n      <header>\n        <Navbar />\n      </header>\n      <StepDetail activeStep={activeStep} />\n      <main className=\"main-invoice\">\n        <Container fluid={true}>\n          <Row>\n            <Col>\n              <Paper style={{ marginTop: \"20px\" }} elevation={3}>\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                  }}\n                >\n                  Invoice Content\n                </Label>\n                <br />\n                <Label style={{ marginTop: \"10px\" }}>\n                  <img\n                    hidden={document.status === 3 ? false : true}\n                    src={done}\n                    alt=\"\"\n                  />\n                  <img\n                    hidden={document.status !== 3 ? false : true}\n                    src={notsigned}\n                    alt=\"\"\n                  />\n                </Label>\n\n                <TextField\n                  variant=\"standard\"\n                  value={document.title}\n                  fullWidth\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <TitleIcon color=\"primary\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n                <TextField\n                  value={signer.name}\n                  fullWidth\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <BorderColorIcon color=\"primary\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n\n                <TableContainer style={{ marginTop: \"20px\", padding: \"10px\" }}>\n                  <Table aria-label=\"customized table\">\n                    <TableHead>\n                      <TableRow>\n                        <StyledTableCell>Viewer name</StyledTableCell>\n                        <StyledTableCell align=\"center\">Email</StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                          Phone number\n                        </StyledTableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {currentPosts.map((row) => (\n                        <StyledTableRow key={row.viewerId}>\n                          <StyledTableCell component=\"th\" scope=\"row\">\n                            <GetCreater id={row.viewerId} />\n                          </StyledTableCell>\n                          <StyledTableCell align=\"center\">\n                            <GetEmail id={row.viewerId} />\n                          </StyledTableCell>\n                          <StyledTableCell align=\"center\">\n                            <GetPhone id={row.viewerId} />\n                          </StyledTableCell>\n                        </StyledTableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n                <TablePagination\n                  component=\"div\"\n                  count={viewer.length}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  labelRowsPerPage=\"\"\n                  onChangePage={handleChangePage}\n                  rowsPerPageOptions={[]}\n                />\n                <TextField\n                  label=\"Date expiration\"\n                  value={Moment(document.dateSign).format(\n                    \"DD/MM/YYYY HH:mm:ss\"\n                  )}\n                  fullWidth\n                  style={{ marginTop: \"20px\", padding: \"10px 10px 10px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <EventAvailableIcon color=\"primary\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n              </Paper>\n              <Button\n                hidden={activeStep >= 3 ? false : true}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                style={{ marginTop: \"20px\", marginRight: \"10px\" }}\n                startIcon={<SaveIcon />}\n                onClick={(e) => {\n                  e.preventDefault();\n                  axios\n                    .get(document.invoiceURL, {\n                      responseType: \"blob\",\n                    })\n                    .then(function (res) {\n                      fileDownload(res.data, document.title + \".pdf\");\n                    })\n                    .catch(function (error) {\n                      console.log(error);\n                    });\n                }}\n              >\n                Save\n              </Button>\n              <Button\n                hidden={activeStep >= 3 ? false : true}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                style={{ marginTop: \"20px\" }}\n                startIcon={<PrintIcon />}\n                onClick={printFile}\n              >\n                Print\n              </Button>\n            </Col>\n\n            <Col>\n              <Form className=\"form-doc\">\n                <FormGroup row>\n                  <div>\n                    <PDF pdf={document.invoiceURL} />\n                  </div>\n                </FormGroup>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n      </main>\n    </div>\n  );\n}\nexport default InvoiceDetail;\n","/Users/macos/Desktop/EOfficeWeb/src/components/DetailDocument/ContractDetail.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/AdminCompany/UserManagement/UserManagement.js",["266","267","268","269","270","271","272","273","274"],"import { forwardRef, useEffect, useState } from \"react\";\nimport {\n  FormGroup,\n  Col,\n  Table,\n  Modal,\n  ModalHeader,\n  Container,\n  ModalFooter,\n  Row,\n} from \"reactstrap\";\nimport userListAPI from \"../../../api/userListAPI\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport \"./../../../css/UserManagement.css\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport { getUser } from \"../../../utils/Common\";\nimport GetDepartment from \"../../GetData/GetDepartment\";\nimport Switch from \"@material-ui/core/Switch\";\nimport departmentAPI from \"../../../api/departmentAPI\";\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { toast } from \"react-toastify\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Slide from \"@material-ui/core/Slide\";\nimport {\n  DialogContentText,\n  FormHelperText,\n  InputAdornment,\n} from \"@material-ui/core\";\nimport Moment from \"moment\";\nimport md5 from \"md5\";\nimport Navbar from \"../../Navbar/Navbar\";\nimport { CSVLink } from \"react-csv\";\nimport * as Icon from \"react-icons/bi\";\n\nconst TransitionAdd = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"right\" ref={ref} {...props} />;\n});\nconst TransitionDetail = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"left\" ref={ref} {...props} />;\n});\n\nfunction UserManagement() {\n  const [userList, setUserList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [listActive, setListActive] = useState([]);\n  const [listDeactive, setListDeactive] = useState([]);\n  const [postList, setPostList] = useState([]);\n  const [department, setDepartment] = useState([]);\n  const [subdepartment, setSubDepartment] = useState([]);\n  const [subdepartment2, setSubDepartment2] = useState([]);\n  const [checkAcitve, setCheckActive] = useState(true);\n  const [user, setUser] = useState({\n    username: \"\",\n    department: \"\",\n    subdepartment: \"\",\n    phone: \"\",\n    email: \"\",\n    address: \"\",\n  });\n  const [detail, setDetail] = useState({\n    id: \"\",\n    username: \"\",\n    department: \"\",\n    subdepartment: \"\",\n    phone: \"\",\n    email: \"\",\n    address: \"\",\n    status: \"\",\n  });\n  const [isOpen, setIsOpen] = useState(false);\n  const [del, setDel] = useState(false);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage] = useState(15);\n  const indexOfLastPost = (page + 1) * rowsPerPage;\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\n  const currentPosts = postList.slice(indexOfFirstPost, indexOfLastPost);\n  const add = () => setIsOpen(!isOpen);\n  const [openEdit, setOpenEdit] = useState(false);\n  const edit = () => setOpenEdit(!openEdit);\n  const [search, setSearch] = useState(\"\");\n  const [error, setError] = useState({\n    name: false,\n    phone: false,\n    email: false,\n    depart: false,\n    subdepart: false,\n    address: false,\n    loi: false,\n    message_name: \"\",\n    message_phone: \"\",\n    message_email: \"\",\n    message_depart: \"\",\n    message_subdepart: \"\",\n    message_address: \"\",\n  });\n  useEffect(() => {\n    async function fetchUserList() {\n      try {\n        const response = await userListAPI.getUserByCompanyId(\n          getUser().CompanyId\n        );\n        var list = response.data\n          .sort((a, b) => {\n            return (\n              new Date(a.dateCreate).getTime() -\n              new Date(b.dateCreate).getTime()\n            );\n          })\n          .reverse();\n        setUserList(list);\n        setListActive(\n          list.filter((data) => {\n            if (data.status === 1) {\n              return data;\n            }\n          })\n        );\n        setListDeactive(\n          list.filter((data) => {\n            if (data.status === 0) {\n              return data;\n            }\n          })\n        );\n        setPostList(\n          list.filter((data) => {\n            if (data.status === 1) {\n              return data;\n            }\n          })\n        );\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    setTimeout(() => {\n      setLoading(false);\n    }, 2000);\n    fetchUserList();\n  }, []);\n\n  useEffect(() => {\n    async function getDepartment() {\n      try {\n        const res = await departmentAPI.getDepartmentByCompanyId(\n          getUser().CompanyId\n        );\n        setDepartment(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getDepartment();\n  }, []);\n\n  useEffect(() => {\n    async function getSubDepartment() {\n      try {\n        const res = await departmentAPI.getSubDepartment(user.department);\n        setSubDepartment(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getSubDepartment();\n  }, [user.department]);\n\n  useEffect(() => {\n    async function getSubDepartment() {\n      try {\n        const res = await departmentAPI.getSubDepartment(detail.department);\n        setSubDepartment2(res.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getSubDepartment();\n  }, [detail.department]);\n\n  function handleOnInput(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    setUser({\n      ...user,\n      [name]: value,\n    });\n  }\n  function handleOnDetail(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    setDetail({\n      ...detail,\n      [name]: value,\n    });\n  }\n\n  function addUser(event) {\n    event.preventDefault();\n    var pattern = new RegExp(\n      /^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i\n    );\n    if (user.username.trim() === \"\") {\n      setError({\n        ...error,\n        loi: true,\n        name: true,\n        message_name: \"User name must not empty\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          loi: false,\n          name: false,\n          message_name: \"\",\n        });\n      }, 5000);\n    } else if (user.username.length > 255) {\n      setError({\n        ...error,\n        loi: true,\n        name: true,\n        message_name: \"User name max length 255 characters\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          loi: false,\n          name: false,\n          message_name: \"\",\n        });\n      }, 5000);\n    } else if (user.phone.trim() === \"\") {\n      setError({\n        ...error,\n        loi: true,\n        phone: true,\n        message_phone: \"Phone number must not empty\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          loi: false,\n          phone: false,\n          message_phone: \"\",\n        });\n      }, 5000);\n    } else if (!user.phone.trim().match(\"^[0-9]{10}$\")) {\n      setError({\n        ...error,\n        loi: true,\n        phone: true,\n        message_phone: \"Phone number is incorrect\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          loi: false,\n          phone: false,\n          message_phone: \"\",\n        });\n      }, 5000);\n    } else if (user.department === \"\") {\n      setError({\n        ...error,\n        loi: true,\n        depart: true,\n        message_depart: \"Please choose one department\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          loi: false,\n          depart: false,\n          message_depart: \"\",\n        });\n      }, 5000);\n    } else if (user.subdepartment === \"\") {\n      setError({\n        ...error,\n        loi: true,\n        subdepart: true,\n        message_subdepart: \"Please choose one child department\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          loi: false,\n          subdepart: false,\n          message_subdepart: \"\",\n        });\n      }, 5000);\n    } else if (user.email.trim() === \"\") {\n      setError({\n        ...error,\n        loi: true,\n        email: true,\n        message_email: \"Email must not empty\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          loi: false,\n          email: false,\n          message_email: \"\",\n        });\n      }, 5000);\n    } else if (!pattern.test(user.email)) {\n      setError({\n        ...error,\n        loi: true,\n        email: true,\n        message_email: \"Email is incorrect\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          loi: false,\n          email: false,\n          message_email: \"\",\n        });\n      }, 5000);\n    } else if (user.address.length > 255) {\n      setError({\n        ...error,\n        loi: true,\n        address: true,\n        message_address: \"Address length must not larger 255 characters\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          loi: false,\n          address: false,\n          message_address: \"\",\n        });\n      }, 5000);\n    } else {\n      const tel = \"+84\" + user.phone.substring(1);\n      const params = {\n        name: user.username,\n        avatar: \"\",\n        email: user.email,\n        password: md5(\"123Aabc\").trim().toString(),\n        phone: tel,\n        address: user.address,\n        dateCreate: Moment(new Date()).format(\n          \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n        ),\n        creatorId: getUser().Id,\n        subDepartmentId: user.subdepartment,\n        departmentId: user.department,\n        companyId: getUser().CompanyId,\n        role: \"2\",\n        status: 1,\n      };\n      userListAPI\n        .addUser(params)\n        .then(function () {\n          window.location.reload();\n          setUser({\n            username: \"\",\n            department: \"\",\n            subdepartment: \"\",\n            phone: \"\",\n            email: \"\",\n            address: \"\",\n          });\n          toast.success(\"You has created user successfully\", {\n            position: toast.POSITION.TOP_CENTER,\n          });\n        })\n        .catch(function (error) {\n          if (\n            error.response.data.Message ===\n            \"The user with the provided phone number already exists (PHONE_NUMBER_EXISTS).\"\n          ) {\n            setError({\n              ...error,\n              loi: true,\n              phone: true,\n              message_phone: \"Phone number is already exists\",\n            });\n            setTimeout(() => {\n              setError({\n                ...error,\n                loi: false,\n                phone: false,\n                message_phone: \"\",\n              });\n            }, 5000);\n          } else if (\n            error.response.data.Message ===\n            \"The user with the provided email already exists (EMAIL_EXISTS).\"\n          ) {\n            setError({\n              ...error,\n              loi: true,\n              email: true,\n              message_email: \"Email is already exists\",\n            });\n            setTimeout(() => {\n              setError({\n                ...error,\n                loi: false,\n                email: false,\n                message_email: \"\",\n              });\n            }, 5000);\n          }\n          console.log(error);\n        });\n    }\n  }\n  function updateUser(event) {\n    event.preventDefault();\n    if (detail.department === \"\") {\n      setError({\n        ...error,\n        loi: true,\n        depart: true,\n        message: \"Please choose one department\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          loi: false,\n          depart: false,\n          message: \"\",\n        });\n      }, 5000);\n    } else if (detail.subdepartment === \"\") {\n      setError({\n        ...error,\n        loi: true,\n        subdepart: true,\n        message: \"Please choose one child department\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          loi: false,\n          subdepart: false,\n          message: \"\",\n        });\n      }, 5000);\n    } else {\n      const tel = \"+84\" + detail.phone.substring(1);\n      const params = {\n        id: detail.id,\n        name: detail.username,\n        avatar: \"\",\n        email: detail.email,\n        phone: tel,\n        address: detail.address,\n        dateCreate: Moment(new Date()).format(\"DD/MM/YYYY\"),\n        creatorId: getUser().Id,\n        subDepartmentId: detail.subdepartment,\n        departmentId: detail.department,\n        companyId: getUser().CompanyId,\n        role: \"2\",\n      };\n      userListAPI\n        .updateUser(params)\n        .then(function (res) {\n          if (detail.status === 1) {\n            userListAPI\n              .activeUser(res.data.id)\n              .then(() => {\n                window.location.reload();\n                toast.success(\"You has updated user successfully\", {\n                  position: toast.POSITION.TOP_CENTER,\n                });\n              })\n              .catch(function (error) {\n                console.log(error);\n              });\n          } else {\n            userListAPI.deActiveUser(res.data.id).then(() => {\n              window.location.reload();\n              toast.success(\"You has updated user successfully\", {\n                position: toast.POSITION.TOP_CENTER,\n              });\n            });\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }\n\n  function changePage(event, newPage) {\n    setPage(newPage);\n  }\n  const [value, setValue] = useState(1);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  function activeList(e) {\n    setPage(0);\n    setPostList(listActive);\n  }\n  function deActiveList(e) {\n    setPage(0);\n    setPostList(listDeactive);\n  }\n\n  const data = userList.map((user) => {\n    return {\n      Account: user.name,\n      Email: user.email,\n      Phone: user.phone,\n      Address: user.address,\n    };\n  });\n  console.log(userList)\n  return (\n    <div>\n      <header>\n        <Navbar />\n      </header>\n      <main className=\"main-panel\">\n        <Container fluid={true}>\n          <Dialog\n            open={isOpen}\n            onClose={add}\n            aria-labelledby=\"form-dialog-title\"\n            TransitionComponent={TransitionAdd}\n            keepMounted\n            disableBackdropClick\n            disableEscapeKeyDown\n            fullWidth\n          >\n            <DialogTitle id=\"form-dialog-title\">Add User</DialogTitle>\n\n            <DialogContent>\n              <DialogContentText style={{ color: \"red\" }}>\n                * If a department does not have a child department. Please\n                create a child department before adding user\n              </DialogContentText>\n              <TextField\n                error={error.name}\n                helperText={error.message_name}\n                label=\"User name\"\n                value={user.username}\n                name=\"username\"\n                variant=\"outlined\"\n                required\n                onChange={handleOnInput}\n                style={{ width: \"270px\" }}\n              />\n              <TextField\n                error={error.phone}\n                helperText={error.message_phone}\n                value={user.phone}\n                label=\"User phone number\"\n                name=\"phone\"\n                type=\"phone\"\n                variant=\"outlined\"\n                required\n                onChange={handleOnInput}\n                style={{ marginLeft: \"10px\", width: \"270px\" }}\n              />\n            </DialogContent>\n            <DialogContent>\n              <FormControl variant=\"outlined\" style={{ width: \"270px\" }}>\n                <InputLabel id=\"demo\">Department</InputLabel>\n                <Select\n                  name=\"department\"\n                  value={user.department}\n                  onChange={handleOnInput}\n                  label=\"Department\"\n                  error={error.depart}\n                  required\n                >\n                  <MenuItem value=\"\">\n                    <em>None</em>\n                  </MenuItem>\n                  {department.map((depart) => (\n                    <MenuItem key={depart.id} value={depart.id}>\n                      {depart.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n                <FormHelperText style={{ color: \"red\" }}>\n                  {error.message_depart}\n                </FormHelperText>\n              </FormControl>\n              <FormControl\n                variant=\"outlined\"\n                style={{ marginLeft: \"10px\", width: \"270px\" }}\n              >\n                <InputLabel id=\"demo\">Child Department</InputLabel>\n                <Select\n                  name=\"subdepartment\"\n                  value={user.subdepartment}\n                  onChange={handleOnInput}\n                  label=\"Child Department\"\n                  error={error.subdepart}\n                  required\n                >\n                  <MenuItem value=\"\">\n                    <em>None</em>\n                  </MenuItem>\n                  {subdepartment.map((depart) => (\n                    <MenuItem key={depart.id} value={depart.id}>\n                      {depart.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n                <FormHelperText style={{ color: \"red\" }}>\n                  {error.message_subdepart}\n                </FormHelperText>\n              </FormControl>\n            </DialogContent>\n            <DialogContent>\n              <TextField\n                error={error.email}\n                label=\"Email\"\n                value={user.email}\n                name=\"email\"\n                type=\"email\"\n                required\n                helperText={error.message_email}\n                variant=\"outlined\"\n                onChange={handleOnInput}\n                style={{ width: \"270px\" }}\n              />\n              <TextField\n                label=\"Address\"\n                error={error.address}\n                value={user.address}\n                helperText={error.message_address}\n                name=\"address\"\n                variant=\"outlined\"\n                onChange={handleOnInput}\n                style={{ marginLeft: \"10px\", width: \"270px\" }}\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => {\n                  setUser({\n                    username: \"\",\n                    department: \"\",\n                    subdepartment: \"\",\n                    phone: \"\",\n                    email: \"\",\n                    address: \"\",\n                  });\n                  add();\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ marginRight: \"20px\" }}\n                onClick={addUser}\n              >\n                Create\n              </Button>\n            </DialogActions>\n          </Dialog>\n          <div className=\"form-search\">\n            <FormGroup row>\n              <Button variant=\"contained\" color=\"primary\" onClick={add}>\n                +Add user\n              </Button>\n              <Col>\n                <Row>\n                  <TextField\n                    name=\"search\"\n                    variant=\"outlined\"\n                    placeholder=\"Search by account name\"\n                    onChange={(event) => {\n                      setSearch(event.target.value);\n                    }}\n                    size=\"small\"\n                    fullWidth\n                    style={{ marginLeft: \"10px\" }}\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <SearchIcon color=\"primary\" />\n                        </InputAdornment>\n                      ),\n                    }}\n                  />\n                </Row>\n              </Col>\n              <Col>\n                <Row>\n                  <Paper\n                    square\n                    elevation={0}\n                    style={{ position: \"absolute\", right: 0 }}\n                  >\n                    <Tabs\n                      value={value}\n                      indicatorColor=\"primary\"\n                      textColor=\"primary\"\n                      onChange={handleChange}\n                    >\n                      <Tab\n                        style={{ fontWeight: \"bold\" }}\n                        value={1}\n                        onClick={activeList}\n                        label=\"Active\"\n                      />\n                      <Tab\n                        style={{ fontWeight: \"bold\" }}\n                        value={0}\n                        onClick={deActiveList}\n                        label=\"Deactive\"\n                      />\n                    </Tabs>\n                  </Paper>\n                </Row>\n                <Row></Row>\n              </Col>\n            </FormGroup>\n            <div hidden={search !== \"\" ? true : false}>\n              <TablePagination\n                component=\"div\"\n                count={postList.length}\n                page={page}\n                onChangePage={changePage}\n                rowsPerPage={rowsPerPage}\n                labelRowsPerPage=\"\"\n                rowsPerPageOptions={[]}\n              />\n            </div>\n            <div hidden={search !== \"\" ? true : false} className=\"ex\">\n              <CSVLink filename={\"data user.csv\"} data={data}>\n                Import\n                <Icon.BiImport fontSize=\"25\" tableValues=\"a\" />\n              </CSVLink>\n              <CSVLink\n                style={{ marginLeft: 10 }}\n                filename={\"data user.csv\"}\n                data={data}\n              >\n                Export\n                <Icon.BiExport fontSize=\"25\" />\n              </CSVLink>\n            </div>\n          </div>\n          {loading ? (\n            <ScaleLoader color={\"#2512DF\"} loading={loading} size={35} />\n          ) : (\n            <Table\n              hidden={search !== \"\" ? true : false}\n              hover\n              className=\"tb\"\n              style={{ textAlign: \"left\" }}\n            >\n              <thead>\n                <tr>\n                  <th>Account name</th>\n                  <th>Department</th>\n                  <th>Phone number</th>\n                  <th>Email</th>\n                </tr>\n              </thead>\n              <tbody>\n                {currentPosts.map((user) => (\n                  <tr key={user.id} className=\"row_data\">\n                    <td\n                      className=\"demo-2\"\n                      onClick={() => {\n                        setDetail({\n                          id: user.id,\n                          username: user.name,\n                          phone: \"0\" + user.phone.substring(3),\n                          department: user.departmentId,\n                          subdepartment: user.subDepartmentId,\n                          email: user.email,\n                          address: user.address,\n                          status: user.status,\n                        });\n                        if (user.status === 0) {\n                          setCheckActive(false);\n                        } else {\n                          setCheckActive(true);\n                        }\n                        setOpenEdit(true);\n                      }}\n                    >\n                      {user.name}\n                    </td>\n                    <td\n                      className=\"demo-2\"\n                      onClick={() => {\n                        setDetail({\n                          id: user.id,\n                          username: user.name,\n                          phone: \"0\" + user.phone.substring(3),\n                          department: user.departmentId,\n                          subdepartment: user.subDepartmentId,\n                          email: user.email,\n                          address: user.address,\n                          status: user.status,\n                        });\n                        if (user.status === 0) {\n                          setCheckActive(false);\n                        } else {\n                          setCheckActive(true);\n                        }\n                        setOpenEdit(true);\n                      }}\n                    >\n                      <GetDepartment id={user.departmentId} />\n                    </td>\n                    <td\n                      className=\"demo-2\"\n                      onClick={() => {\n                        setDetail({\n                          id: user.id,\n                          username: user.name,\n                          phone: \"0\" + user.phone.substring(3),\n                          department: user.departmentId,\n                          subdepartment: user.subDepartmentId,\n                          email: user.email,\n                          address: user.address,\n                          status: user.status,\n                        });\n                        if (user.status === 0) {\n                          setCheckActive(false);\n                        } else {\n                          setCheckActive(true);\n                        }\n                        setOpenEdit(true);\n                      }}\n                    >\n                      {user.phone}\n                    </td>\n                    <td\n                      className=\"demo-2\"\n                      onClick={() => {\n                        setDetail({\n                          id: user.id,\n                          username: user.name,\n                          phone: \"0\" + user.phone.substring(3),\n                          department: user.departmentId,\n                          subdepartment: user.subDepartmentId,\n                          email: user.email,\n                          address: user.address,\n                          status: user.status,\n                        });\n                        if (user.status === 0) {\n                          setCheckActive(false);\n                        } else {\n                          setCheckActive(true);\n                        }\n                        setOpenEdit(true);\n                      }}\n                    >\n                      {user.email}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          )}\n          <Table\n            hidden={search === \"\" ? true : false}\n            hover\n            style={{ textAlign: \"left\" }}\n          >\n            <thead>\n              <tr>\n                <th>Account name</th>\n                <th>Department</th>\n                <th>Phone number</th>\n                <th>Email</th>\n              </tr>\n            </thead>\n            <tbody>\n              {userList\n                .filter((users) => {\n                  if (users.name.toLowerCase().includes(search.toLowerCase())) {\n                    return users;\n                  }\n                })\n                .map((user) => (\n                  <tr key={user.id} className=\"row_data\">\n                    <td\n                      className=\"demo-2\"\n                      onClick={() => {\n                        setDetail({\n                          id: user.id,\n                          username: user.name,\n                          phone: \"0\" + user.phone.substring(3),\n                          department: user.departmentId,\n                          subdepartment: user.subDepartmentId,\n                          email: user.email,\n                          address: user.address,\n                          status: user.status,\n                        });\n                        if (user.status === 0) {\n                          setCheckActive(false);\n                        } else {\n                          setCheckActive(true);\n                        }\n                        setOpenEdit(true);\n                      }}\n                    >\n                      {user.name}\n                    </td>\n                    <td\n                      className=\"demo-2\"\n                      onClick={() => {\n                        setDetail({\n                          id: user.id,\n                          username: user.name,\n                          phone: \"0\" + user.phone.substring(3),\n                          department: user.departmentId,\n                          subdepartment: user.subDepartmentId,\n                          email: user.email,\n                          address: user.address,\n                          status: user.status,\n                        });\n                        if (user.status === 0) {\n                          setCheckActive(false);\n                        } else {\n                          setCheckActive(true);\n                        }\n                        setOpenEdit(true);\n                      }}\n                    >\n                      <GetDepartment id={user.departmentId} />\n                    </td>\n                    <td\n                      className=\"demo-2\"\n                      onClick={() => {\n                        setDetail({\n                          id: user.id,\n                          username: user.name,\n                          phone: \"0\" + user.phone.substring(3),\n                          department: user.departmentId,\n                          subdepartment: user.subDepartmentId,\n                          email: user.email,\n                          address: user.address,\n                          status: user.status,\n                        });\n                        if (user.status === 0) {\n                          setCheckActive(false);\n                        } else {\n                          setCheckActive(true);\n                        }\n                        setOpenEdit(true);\n                      }}\n                    >\n                      {user.phone}\n                    </td>\n                    <td\n                      className=\"demo-2\"\n                      onClick={() => {\n                        setDetail({\n                          id: user.id,\n                          username: user.name,\n                          phone: \"0\" + user.phone.substring(3),\n                          department: user.departmentId,\n                          subdepartment: user.subDepartmentId,\n                          email: user.email,\n                          address: user.address,\n                          status: user.status,\n                        });\n                        if (user.status === 0) {\n                          setCheckActive(false);\n                        } else {\n                          setCheckActive(true);\n                        }\n                        setOpenEdit(true);\n                      }}\n                    >\n                      {user.email}\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </Table>\n          <Dialog\n            open={openEdit}\n            TransitionComponent={TransitionDetail}\n            keepMounted\n            disableBackdropClick\n            disableEscapeKeyDown\n            fullWidth\n          >\n            <DialogTitle id=\"form-dialog-title\">User Detail</DialogTitle>\n            <DialogContent>\n              <TextField\n                label=\"User name\"\n                value={detail.username}\n                name=\"username\"\n                variant=\"outlined\"\n                required\n                onChange={handleOnDetail}\n                style={{ width: \"270px\" }}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n              <TextField\n                value={detail.phone}\n                label=\"User phone number\"\n                name=\"phone\"\n                type=\"phone\"\n                variant=\"outlined\"\n                required\n                onChange={handleOnDetail}\n                style={{ marginLeft: \"10px\", width: \"270px\" }}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </DialogContent>\n            <DialogContent>\n              <FormControl variant=\"outlined\" style={{ width: \"270px\" }}>\n                <InputLabel id=\"demo\">Department</InputLabel>\n                <Select\n                  name=\"department\"\n                  value={detail.department}\n                  onChange={handleOnDetail}\n                  label=\"Department\"\n                  error={error.depart}\n                >\n                  <MenuItem value=\"\">\n                    <em>None</em>\n                  </MenuItem>\n                  {department.map((depart) => (\n                    <MenuItem key={depart.id} value={depart.id}>\n                      {depart.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              <FormControl\n                variant=\"outlined\"\n                style={{ marginLeft: \"10px\", width: \"270px\" }}\n              >\n                <InputLabel id=\"demo\">Sub Department</InputLabel>\n                <Select\n                  name=\"subdepartment\"\n                  value={detail.subdepartment}\n                  onChange={handleOnDetail}\n                  label=\"Sub Department\"\n                >\n                  <MenuItem value=\"\">\n                    <em>None</em>\n                  </MenuItem>\n                  {subdepartment2.map((depart) => (\n                    <MenuItem key={depart.id} value={depart.id}>\n                      {depart.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </DialogContent>\n            <DialogContent>\n              <TextField\n                label=\"Email\"\n                value={detail.email}\n                name=\"email\"\n                type=\"email\"\n                required\n                variant=\"outlined\"\n                onChange={handleOnDetail}\n                style={{ width: \"270px\" }}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n              <TextField\n                label=\"Address\"\n                value={detail.address}\n                name=\"address\"\n                variant=\"outlined\"\n                onChange={handleOnDetail}\n                style={{ marginLeft: \"10px\", width: \"270px\" }}\n                InputProps={{\n                  readOnly: true,\n                }}\n              />\n            </DialogContent>\n            <DialogContent>\n              <span>\n                {checkAcitve === true ? (\n                  <a style={{ color: \"green\" }}>Active</a>\n                ) : (\n                  <a style={{ color: \"red\" }}>Deactive</a>\n                )}\n              </span>\n              <Switch\n                checked={checkAcitve}\n                onChange={() => {\n                  setCheckActive(!checkAcitve);\n                  setDetail({\n                    ...detail,\n                    status: checkAcitve === true ? 0 : 1,\n                  });\n                }}\n                name=\"active\"\n                color=\"primary\"\n              />\n            </DialogContent>\n            <DialogActions>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                onClick={() => {\n                  setDetail({\n                    username: \"\",\n                    phone: \"\",\n                    department: \"\",\n                    subdepartment: \"\",\n                    email: \"\",\n                    address: \"\",\n                    status: \"\",\n                  });\n                  edit();\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ marginRight: \"20px\" }}\n                onClick={updateUser}\n              >\n                Update\n              </Button>\n            </DialogActions>\n          </Dialog>\n          <Modal isOpen={del} toggle={() => setDel(!del)}>\n            <ModalHeader>Do you want delete user?</ModalHeader>\n            <ModalFooter>\n              <Button\n                variant=\"contained\"\n                style={{ marginRight: 5 }}\n                color=\"secondary\"\n                onClick={() => {\n                  setDel(!del);\n                }}\n              >\n                No\n              </Button>\n              <Button variant=\"contained\" color=\"primary\">\n                Yes\n              </Button>\n            </ModalFooter>\n          </Modal>\n        </Container>\n      </main>\n    </div>\n  );\n}\n\nexport default UserManagement;\n","/Users/macos/Desktop/EOfficeWeb/src/components/AdminCompany/DepartmentManagement/DepartmentManagement.js",["275","276","277","278","279","280","281","282","283","284","285","286"],"import { forwardRef, useEffect, useState } from \"react\";\nimport { Container, Col, Row, Label, Table } from \"reactstrap\";\nimport \"../../../css/Department.css\";\nimport departmentAPI from \"../../../api/departmentAPI\";\nimport { getUser } from \"../../../utils/Common\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { toast } from \"react-toastify\";\nimport Moment from \"moment\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport PeopleAltIcon from \"@material-ui/icons/PeopleAlt\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  Paper,\n  Slide,\n  TextField,\n} from \"@material-ui/core\";\nimport Navbar from \"../../Navbar/Navbar\";\nimport moment from \"moment\";\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"down\" ref={ref} {...props} />;\n});\nfunction DepartmentManagerment() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpen2, setIsOpen2] = useState(false);\n  const [isOpen3, setIsOpen3] = useState(false);\n  const [isOpen4, setIsOpen4] = useState(false);\n  const [openEditDepart, setOpenEditDepart] = useState(false);\n  const [openEditSubDepart, setOpenEditSubDepart] = useState(false);\n  const [listChild, setListChild] = useState([]);\n  const [listDepartment, setListDepartment] = useState([]);\n  const [department, setDepartment] = useState(\"\");\n  const [child_department, setChild_Department] = useState(\"\");\n  const [departmentID, setDepartmentID] = useState([]);\n  const [sub_departmentID, setSub_DepartmentID] = useState([]);\n  const [page, setPage] = useState(0);\n  const [page2, setPage2] = useState(0);\n  const [rowsPerPage] = useState(10);\n  const indexOfLastPost = (page + 1) * rowsPerPage;\n  const indexOfLastPost2 = (page2 + 1) * rowsPerPage;\n  const indexOfFirstPost = indexOfLastPost - rowsPerPage;\n  const indexOfFirstPost2 = indexOfLastPost2 - rowsPerPage;\n  const currentPosts = listDepartment.slice(indexOfFirstPost, indexOfLastPost);\n  const currentPosts2 = listChild.slice(indexOfFirstPost2, indexOfLastPost2);\n  const [error, setError] = useState({\n    depart: false,\n    subdepart: false,\n    message_depart: \"\",\n    message_subdepart: \"\",\n  });\n  function changePage(event, newPage) {\n    setPage(newPage);\n    setListChild([]);\n  }\n  function changePage2(event, newPage) {\n    setPage2(newPage);\n  }\n  function toogle() {\n    setIsOpen(!isOpen);\n  }\n  function toogle2() {\n    setIsOpen2(!isOpen2);\n  }\n  useEffect(() => {\n    async function getDepartment() {\n      const id = getUser().CompanyId;\n      try {\n        const response = await departmentAPI.getDepartmentByCompanyId(id);\n        setListDepartment(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getDepartment();\n  }, []);\n  function getChildDepartment(id) {\n    departmentAPI\n      .getSubDepartment(id)\n      .then(function (res) {\n        setListChild(res.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n  function addDepartment(e) {\n    e.preventDefault();\n    if (department.trim() === \"\") {\n      setError({\n        ...error,\n        depart: true,\n        message_depart: \"Department name must not empty\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          depart: false,\n          message_depart: \"\",\n        });\n      }, 3000);\n    } else if (department.trim().length > 255) {\n      setError({\n        ...error,\n        depart: true,\n        message_depart: \"Department name can not larger 255 characters\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          depart: false,\n          message_depart: \"\",\n        });\n      }, 3000);\n    } else {\n      const params = {\n        name: department,\n        companyId: getUser().CompanyId,\n        creatorId: getUser().Id,\n        dateCreate: Moment(new Date()).format(\n          \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n        ),\n      };\n      departmentAPI\n        .addDepartment(params)\n        .then(function () {\n          toast.success(\"Add department successfully\", {\n            position: toast.POSITION.TOP_CENTER,\n          });\n          window.location.reload();\n        })\n        .catch(function (error) {\n          console.log(error);\n          setError({\n            ...error,\n            depart: true,\n            message_depart: \"Department name already exists\",\n          });\n          setTimeout(() => {\n            setError({\n              ...error,\n              depart: false,\n              message_depart: \"\",\n            });\n          }, 3000);\n        });\n    }\n  }\n  function addSubDepartment(e) {\n    e.preventDefault();\n    if (child_department.trim() === \"\") {\n      setError({\n        ...error,\n        subdepart: true,\n        message_subdepart: \"Child department name must not empty\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          subdepart: false,\n          message_subdepart: \"\",\n        });\n      }, 3000);\n    } else if (child_department.trim().length > 255) {\n      setError({\n        ...error,\n        subdepart: true,\n        message_subdepart:\n          \"Child department name can not larger 255 characters\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          subdepart: false,\n          message_subdepart: \"\",\n        });\n      }, 3000);\n    } else {\n      const params = {\n        name: child_department,\n        departmentId: departmentID.id,\n        companyId: getUser().CompanyId,\n        creatorId: getUser().Id,\n        dateCreate: Moment(new Date()).format(\n          \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n        ),\n      };\n      departmentAPI\n        .addSubDepartment(params)\n        .then(function () {\n          toast.success(\"Add child department successfully\", {\n            position: toast.POSITION.TOP_CENTER,\n          });\n          window.location.reload();\n        })\n        .catch(function (error) {\n          setError({\n            ...error,\n            subdepart: true,\n            message_subdepart: \"Child department name already exists\",\n          });\n          setTimeout(() => {\n            setError({\n              ...error,\n              subdepart: false,\n              message_subdepart: \"\",\n            });\n          }, 3000);\n        });\n    }\n  }\n  function editDepartment(e) {\n    e.preventDefault();\n    if (department.trim() === \"\") {\n      setError({\n        ...error,\n        depart: true,\n        message_depart: \"Department name must not empty\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          depart: false,\n          message_depart: \"\",\n        });\n      }, 3000);\n    } else if (department.trim().length > 255) {\n      setError({\n        ...error,\n        depart: true,\n        message_depart: \"Department name can not larger 255 characters\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          depart: false,\n          message_depart: \"\",\n        });\n      }, 3000);\n    } else {\n      const params = {\n        id: departmentID.id,\n        name: department,\n        companyId: getUser().CompanyId,\n        creatorId: getUser().Id,\n        dateCreate: Moment(new Date()).format(\n          \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n        ),\n      };\n      departmentAPI\n        .editDepartmentById(params)\n        .then(function () {\n          toast.success(\"Update department successfully\", {\n            position: toast.POSITION.TOP_CENTER,\n          });\n          setTimeout(() => {\n            window.location.reload();\n          }, 3000);\n        })\n        .catch(function (error) {\n          console.log(error);\n          setError({\n            ...error,\n            depart: true,\n            message_depart: \"Department name already exists\",\n          });\n          setTimeout(() => {\n            setError({\n              ...error,\n              depart: false,\n              message_depart: \"\",\n            });\n          }, 3000);\n        });\n    }\n  }\n  function editSubDepartment(e) {\n    e.preventDefault();\n    if (child_department.trim() === \"\") {\n      setError({\n        ...error,\n        subdepart: true,\n        message_subdepart: \"Department name must not empty\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          subdepart: false,\n          message_subdepart: \"\",\n        });\n      }, 3000);\n    } else if (child_department.trim().length > 255) {\n      setError({\n        ...error,\n        subdepart: true,\n        message_subdepart: \"Department name can not larger 255 characters\",\n      });\n      setTimeout(() => {\n        setError({\n          ...error,\n          subdepart: false,\n          message_subdepart: \"\",\n        });\n      }, 3000);\n    } else {\n      const params = {\n        id: sub_departmentID.id,\n        name: child_department,\n        departmentId: sub_departmentID.departmentId,\n        companyId: getUser().CompanyId,\n        creatorId: getUser().Id,\n        dateCreate: Moment(new Date()).format(\n          \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n        ),\n      };\n      departmentAPI\n        .editSubDepartmentById(params)\n        .then(function () {\n          toast.success(\"Update child department successfully\", {\n            position: toast.POSITION.TOP_CENTER,\n          });\n          setTimeout(() => {\n            window.location.reload();\n          }, 3000);\n        })\n        .catch(function (error) {\n          console.log(error);\n          setError({\n            ...error,\n            subdepart: true,\n            message_subdepart: \"Child department name already exists\",\n          });\n          setTimeout(() => {\n            setError({\n              ...error,\n              subdepart: false,\n              message_subdepart: \"\",\n            });\n          }, 3000);\n        });\n    }\n  }\n  function deleteSubDepartment(e) {\n    e.preventDefault();\n    departmentAPI\n      .deleteSubDepartmentById(departmentID.id)\n      .then(function () {\n        toast.success(\"Delete child department successfully\", {\n          position: toast.POSITION.TOP_CENTER,\n        });\n        setTimeout(() => {\n          window.location.reload();\n        }, 3000);\n      })\n      .catch(function (error) {\n        toast.error(\"You can not delete child department\", {\n          position: toast.POSITION.TOP_CENTER,\n        });\n        console.log(error);\n      });\n  }\n  function deleteDepartment(e) {\n    e.preventDefault();\n    departmentAPI\n      .deleteDepartmentById(departmentID.id)\n      .then(function () {\n        toast.success(\"Delete department successfully\", {\n          position: toast.POSITION.TOP_CENTER,\n        });\n        setTimeout(() => {\n          window.location.reload();\n        }, 3000);\n      })\n      .catch(function (error) {\n        toast.error(\"You can not delete department\", {\n          position: toast.POSITION.TOP_CENTER,\n        });\n        console.log(error);\n      });\n  }\n  return (\n    <div>\n      <header>\n        <Navbar />\n      </header>\n      <main className=\"main-panel\">\n        <div className=\"header-bg\">\n          <span className=\"mask bg-gradient-default opacity-8\"></span>\n          <div>\n            <Label\n              style={{\n                float: \"left\",\n                fontWeight: \"bolder\",\n                color: \"white\",\n                marginTop: 20,\n                marginLeft: 20,\n                border: \"1px solid #ffff\",\n                borderRadius: \"25px\",\n                padding: 10,\n                position: \"relative\",\n              }}\n            >\n              DEPARTMENT MANAGER\n            </Label>\n          </div>\n          <Container fluid className=\"d-flex1 align-items-center\">\n            <Row>\n              <Col md={10} lg={7}>\n                <h1 className=\"display-2 text-white\">Hello {getUser().Name}</h1>\n                <p className=\"text-white mt-0 mb-5\">\n                  This is your management department page. You can add new\n                  department or child department, delete department. But you\n                  cannot delete the department containing the staff\n                </p>\n                <Button\n                  style={{ float: \"left\" }}\n                  startIcon={<AddIcon />}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={toogle}\n                >\n                  Add new\n                </Button>\n              </Col>\n            </Row>\n          </Container>\n          <Container fluid>\n            <Row>\n              <Col xl={7}>\n                <Paper>\n                  <div>\n                    <PeopleAltIcon color=\"primary\" fontSize=\"large\" />\n                  </div>\n                  <h5> Department</h5>\n                  <TablePagination\n                    component=\"div\"\n                    count={listDepartment.length}\n                    page={page}\n                    onChangePage={changePage}\n                    rowsPerPage={rowsPerPage}\n                    labelRowsPerPage=\"\"\n                    rowsPerPageOptions={[]}\n                  />\n                  <Table style={{ paddingLeft: 15, paddingRight: 15 }}>\n                    <thead>\n                      <tr>\n                        <th style={{ textAlign: \"left\" }}>Name</th>\n                        <th>Date Modify</th>\n                        <th style={{ textAlign: \"right\" }}>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"tb\">\n                      {currentPosts.map((row, index) => {\n                        return (\n                          <tr\n                            key={index}\n                            onClick={(event) => {\n                              event.preventDefault();\n                              getChildDepartment(row.id);\n                            }}\n                          >\n                            <td\n                              style={{ textAlign: \"left\" }}\n                              className=\"demo-2\"\n                            >\n                              {row.name}\n                            </td>\n                            <td>\n                              {moment(row.dateModify).format(\n                                \"DD/MM/YYYY HH:mm:ss\"\n                              )}\n                            </td>\n                            <td>\n                              <Button\n                                color=\"primary\"\n                                startIcon={<AddIcon />}\n                                style={{\n                                  minWidth: 20,\n                                  position: \"absolute\",\n                                  right: 90,\n                                }}\n                                onClick={() => {\n                                  toogle2();\n                                  setDepartmentID(row);\n                                }}\n                              />\n                              <Button\n                                color=\"primary\"\n                                startIcon={<EditIcon />}\n                                style={{\n                                  minWidth: 20,\n                                  position: \"absolute\",\n                                  right: 50,\n                                }}\n                                onClick={() => {\n                                  setOpenEditDepart(true);\n                                  setDepartmentID(row);\n                                }}\n                              />\n                              <Button\n                                color=\"primary\"\n                                startIcon={<DeleteForeverIcon />}\n                                style={{\n                                  minWidth: 20,\n                                  position: \"absolute\",\n                                  right: 10,\n                                }}\n                                onClick={() => {\n                                  setIsOpen4(true);\n                                  setDepartmentID(row);\n                                }}\n                              />\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </Table>\n                </Paper>\n              </Col>\n              <Col xl={5}>\n                <Paper>\n                  <div>\n                    <PeopleAltIcon color=\"primary\" fontSize=\"large\" />\n                  </div>\n                  <h5>Child Department</h5>\n                  <TablePagination\n                    component=\"div\"\n                    count={listChild.length}\n                    page={page2}\n                    onChangePage={changePage2}\n                    rowsPerPage={rowsPerPage}\n                    labelRowsPerPage=\"\"\n                    rowsPerPageOptions={[]}\n                  />\n                  <Table hover>\n                    <thead>\n                      <tr>\n                        <th style={{ textAlign: \"left\" }}>Name</th>\n                        <th>Date Modify</th>\n                        <th style={{ textAlign: \"right\" }}>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {currentPosts2.map((row, index) => {\n                        return (\n                          <tr key={index}>\n                            <td\n                              style={{ textAlign: \"left\" }}\n                              className=\"demo-2\"\n                            >\n                              {row.name}\n                            </td>\n                            <td>\n                              {moment(row.dateModify).format(\n                                \"DD/MM/YYYY HH:mm:ss\"\n                              )}\n                            </td>\n                            <td>\n                              <Button\n                                color=\"primary\"\n                                startIcon={<EditIcon />}\n                                style={{\n                                  minWidth: 20,\n                                  position: \"absolute\",\n                                  right: 50,\n                                }}\n                                onClick={() => {\n                                  setSub_DepartmentID(row);\n                                  setOpenEditSubDepart(true);\n                                }}\n                              />\n                              <Button\n                                color=\"primary\"\n                                startIcon={<DeleteForeverIcon />}\n                                style={{\n                                  minWidth: 20,\n                                  position: \"absolute\",\n                                  right: 10,\n                                }}\n                                onClick={() => {\n                                  setDepartmentID(row);\n                                  setIsOpen3(true);\n                                }}\n                              />\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </Table>\n                </Paper>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n        <Dialog\n          onClose={toogle}\n          open={isOpen}\n          fullWidth\n          disableBackdropClick\n          disableEscapeKeyDown\n        >\n          <DialogTitle id=\"form-dialog-title\">Department</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Please enter new department name ...\n            </DialogContentText>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Department name\"\n              type=\"text\"\n              fullWidth\n              error={error.depart}\n              helperText={error.message_depart}\n              onChange={(e) => setDepartment(e.target.value)}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button variant=\"contained\" color=\"secondary\" onClick={toogle}>\n              Cancel\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={addDepartment}>\n              Create\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Dialog\n          open={openEditDepart}\n          fullWidth\n          disableBackdropClick\n          disableEscapeKeyDown\n        >\n          <DialogTitle id=\"form-dialog-title\">Department</DialogTitle>\n          <DialogContent>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Department name\"\n              type=\"text\"\n              fullWidth\n              defaultValue={departmentID.name}\n              error={error.depart}\n              helperText={error.message_depart}\n              onChange={(e) => setDepartment(e.target.value)}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => setOpenEditDepart(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={editDepartment}\n            >\n              Update\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Dialog\n          fullWidth\n          disableBackdropClick\n          disableEscapeKeyDown\n          onClose={toogle2}\n          open={isOpen2}\n        >\n          <DialogTitle id=\"form-dialog-title\">Child Department</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Please enter new child department name ...\n            </DialogContentText>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Child department name\"\n              type=\"text\"\n              fullWidth\n              error={error.subdepart}\n              helperText={error.message_subdepart}\n              onChange={(e) => setChild_Department(e.target.value)}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button variant=\"contained\" color=\"secondary\" onClick={toogle2}>\n              Cancel\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={addSubDepartment}\n            >\n              Create\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Dialog\n          open={openEditSubDepart}\n          fullWidth\n          disableBackdropClick\n          disableEscapeKeyDown\n        >\n          <DialogTitle id=\"form-dialog-title\">Child Department</DialogTitle>\n          <DialogContent>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"Department name\"\n              type=\"text\"\n              fullWidth\n              defaultValue={sub_departmentID.name}\n              error={error.subdepart}\n              helperText={error.message_subdepart}\n              onChange={(e) => setChild_Department(e.target.value)}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => setOpenEditSubDepart(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={editSubDepartment}\n            >\n              Update\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Dialog\n          open={isOpen3}\n          TransitionComponent={Transition}\n          keepMounted\n          disableBackdropClick\n          disableEscapeKeyDown\n          fullWidth\n        >\n          <DialogTitle>{\"Are you sure delete?\"}</DialogTitle>\n          <DialogActions>\n            <Button\n              onClick={() => setIsOpen3(false)}\n              color=\"secondary\"\n              variant=\"contained\"\n            >\n              No\n            </Button>\n            <Button\n              onClick={deleteSubDepartment}\n              color=\"primary\"\n              variant=\"contained\"\n            >\n              Yes\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <Dialog\n          open={isOpen4}\n          TransitionComponent={Transition}\n          keepMounted\n          disableBackdropClick\n          disableEscapeKeyDown\n          fullWidth\n        >\n          <DialogTitle>{\"Are you sure delete?\"}</DialogTitle>\n          <DialogActions>\n            <Button\n              onClick={() => setIsOpen4(false)}\n              color=\"secondary\"\n              variant=\"contained\"\n            >\n              No\n            </Button>\n            <Button\n              onClick={deleteDepartment}\n              color=\"primary\"\n              variant=\"contained\"\n            >\n              Yes\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\nexport default DepartmentManagerment;\n","/Users/macos/Desktop/EOfficeWeb/src/components/CreateDocument/CreateContract.js",["287","288","289","290","291","292","293","294","295","296"],"import { Container, Form, FormGroup, Row, Col, Label } from \"reactstrap\";\nimport { useState, useEffect } from \"react\";\nimport \"../../css/CreateDoc.css\";\nimport VerticalLinearStepper from \"../Sidebar/Stepper\";\nimport { useHistory } from \"react-router-dom\";\nimport companyListAPI from \"../../api/companyListAPI\";\nimport userListAPI from \"../../api/userListAPI\";\nimport { getUser } from \"../../utils/Common\";\nimport demo from \"../../images/demo.png\";\nimport { Document, Page, pdfjs } from \"react-pdf\";\nimport EditLocationIcon from \"@material-ui/icons/EditLocation\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport TextField from \"@material-ui/core/TextField\";\nimport BackupIcon from \"@material-ui/icons/Backup\";\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport \"date-fns\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport Moment from \"moment\";\nimport { InputAdornment, Slide, Snackbar, Tooltip } from \"@material-ui/core\";\nimport TitleIcon from \"@material-ui/icons/Title\";\nimport { toast } from \"react-toastify\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Navbar from \"../Navbar/Navbar\";\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nfunction TransitionLeft(props) {\n  return <Slide {...props} direction=\"right\" />;\n}\ntoast.configure();\nfunction CreateDocument() {\n  const [listCompany, setListCompany] = useState([]);\n  const [fileName, setFileName] = useState(\"\");\n  const [listSinger, setListSigner] = useState([]);\n  const [listGuest, setListGuest] = useState([]);\n  const history = useHistory();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n  const [locaA, setLocaA] = useState(true);\n  const [locaB, setLocaB] = useState(true);\n  const [show, setShow] = useState(false);\n  const [activeStep, setActiveStep] = useState(0);\n  const [file, setFile] = useState([]);\n  const [dataUpload, setDataUpload] = useState({\n    title: \"\",\n    signer: null,\n    company_guest: \"\",\n    signer_guest: null,\n  });\n  const [alert, setAlert] = useState({\n    file: false,\n    title: false,\n    signerA: false,\n    signerB: false,\n    company: false,\n    date: false,\n    location: false,\n    message: \"\",\n  });\n  const [positionA, setPositionA] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [positionB, setPositionB] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [cursor, setCursor] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [color, setColor] = useState({\n    signerA: \"#808080ad\",\n    signerB: \"#808080ad\",\n  });\n  const [viewer, setViewer] = useState([]);\n  const [viewerGuest, setViewerGuest] = useState([]);\n  const [numPages, setNumPages] = useState(\"\");\n  const [pageNumber, setPageNumber] = useState(0);\n\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages);\n    setPageNumber(1);\n  }\n  const handleChange = (event, value) => {\n    setPageNumber(value);\n  };\n\n  function handleOnChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    setDataUpload({\n      ...dataUpload,\n      [name]: value,\n    });\n  }\n\n  useEffect(() => {\n    async function fetListCompany() {\n      try {\n        const response = await companyListAPI.getAll();\n        setListCompany(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetListCompany();\n  }, []);\n\n  useEffect(() => {\n    async function fetListUser() {\n      const companyId = getUser().CompanyId;\n      try {\n        const response = await userListAPI.getUserByCompanyId(companyId);\n        setListSigner(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetListUser();\n  }, []);\n  useEffect(() => {\n    async function fetListGuest() {\n      const id = dataUpload.company_guest.id;\n      try {\n        const response = await userListAPI.getUserByCompanyId(id);\n        setListGuest(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetListGuest();\n  }, [dataUpload.company_guest]);\n\n  function handleContent() {\n    if (selectedDate === null) {\n      setAlert({\n        ...alert,\n        date: true,\n        message: \"Please select expiration date !!!\",\n      });\n      setTimeout(() => {\n        setAlert(\n          {\n            ...alert,\n            date: false,\n            message: \"\",\n          },\n          3000\n        );\n      });\n    } else if (\n      Moment(selectedDate).format(\"DD-MM-YYYY\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\") <\n      Moment(new Date()).format(\"DD-MM-YYYY\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\")\n    ) {\n      setAlert({\n        ...alert,\n        date: true,\n        message: \"Expiration date can't less than current date !!!\",\n      });\n      setTimeout(() => {\n        setAlert({\n          ...alert,\n          date: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (positionA.x === 0 && positionA.y === 0) {\n      setAlert({\n        ...alert,\n        location: true,\n      });\n      setTimeout(() => {\n        setAlert({\n          ...alert,\n          location: false,\n        });\n      }, 3000);\n    } else if (positionB.x === 0 && positionB.y === 0) {\n      setAlert({\n        ...alert,\n        location: true,\n      });\n      setTimeout(() => {\n        setAlert({\n          ...alert,\n          location: false,\n        });\n      }, 3000);\n    } else {\n      const listViewer = [...viewer, ...viewerGuest];\n      history.push({\n        pathname: \"/contract-confirm\",\n        state: {\n          file: file,\n          data: dataUpload,\n          viewer: listViewer,\n          signLocationA: positionA,\n          signLocationB: positionB,\n          numberPage: pageNumber,\n          date: Moment(selectedDate).format(\n            \"yyyy-MM-DD\" + \"T\" + \"HH:mm:ss.SSS\" + \"Z\"\n          ),\n        },\n      });\n    }\n  }\n\n  function getLocationA(e) {\n    setPositionA({\n      x: e.nativeEvent.offsetX,\n      y: e.nativeEvent.offsetY,\n    });\n    setLocaA(true);\n  }\n  function getLocationB(e) {\n    setPositionB({\n      x: e.nativeEvent.offsetX,\n      y: e.nativeEvent.offsetY,\n    });\n    setLocaB(true);\n  }\n\n  function handleA(e) {\n    e.preventDefault();\n    setColor({ ...color, signerA: \"#808080ad\" });\n    setPositionA({ x: 0, y: 0 });\n    setLocaA(!locaA);\n  }\n\n  function handleB(e) {\n    e.preventDefault();\n    setColor({ ...color, signerB: \"#808080ad\" });\n    setPositionB({ x: 0, y: 0 });\n    setLocaB(!locaB);\n  }\n  useEffect(() => {\n    addEventListeners();\n    return () => removeEventListeners();\n  }, []);\n\n  const addEventListeners = () => {\n    document.addEventListener(\"mousemove\", onMouseMove);\n  };\n\n  const removeEventListeners = () => {\n    document.removeEventListener(\"mousemove\", onMouseMove);\n  };\n  const onMouseMove = (e) => {\n    setCursor({ x: e.clientX, y: e.clientY });\n  };\n\n  return (\n    <div>\n      <header>\n        <Navbar />\n      </header>\n      <VerticalLinearStepper activeStep={activeStep} />\n      <main className=\"main-contract\">\n        <Snackbar\n          style={{ marginTop: 70 }}\n          anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n          open={alert.location}\n          autoHideDuration={3000}\n          TransitionComponent={TransitionLeft}\n        >\n          <Alert variant=\"filled\" severity=\"error\">\n            Please choose location sign to continue...\n          </Alert>\n        </Snackbar>\n        <Container fluid={true}>\n          <div\n            hidden={locaA}\n            className=\"cursor\"\n            style={{\n              left: `${cursor.x}px`,\n              top: `${cursor.y}px`,\n            }}\n          />\n          <div\n            hidden={locaB}\n            className=\"cursor\"\n            style={{\n              left: `${cursor.x}px`,\n              top: `${cursor.y}px`,\n            }}\n          />\n          <Row>\n            <Col>\n              <Tooltip title=\"Choose location sign A\" placement=\"top-start\">\n                <IconButton\n                  style={{\n                    float: \"left\",\n                    background: color.signerA,\n                    marginTop: \"20px\",\n                  }}\n                  color=\"secondary\"\n                  onClick={handleA}\n                  hidden={pageNumber === 0 ? true : false}\n                >\n                  <EditLocationIcon color=\"error\" fontSize=\"large\" />\n                </IconButton>\n              </Tooltip>\n              <Tooltip title=\"Choose location sign B\" placement=\"top-start\">\n                <IconButton\n                  style={{\n                    float: \"left\",\n                    background: color.signerB,\n                    marginLeft: \"20px\",\n                    marginTop: \"20px\",\n                  }}\n                  color=\"secondary\"\n                  onClick={handleB}\n                  hidden={pageNumber === 0 ? true : false}\n                >\n                  <EditLocationIcon color=\"error\" fontSize=\"large\" />\n                </IconButton>\n              </Tooltip>\n\n              <div\n                hidden={activeStep === 0 ? false : true}\n                style={{ marginTop: \"15%\" }}\n              >\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                    float: \"left\",\n                  }}\n                >\n                  DOCUMENT INFORMATION\n                </Label>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Document type\"\n                  value=\"Contract\"\n                  fullWidth\n                  style={{ marginTop: \"20px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <InsertDriveFileIcon fontSize=\"large\" color=\"primary\" />\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                />\n\n                <input\n                  accept=\"application/pdf\"\n                  id=\"icon-button-file\"\n                  type=\"file\"\n                  style={{ display: \"none\", width: 0 }}\n                  onChange={(e) => {\n                    if (e.target.files.length !== 0) {\n                      if (e.target.files[0].type !== \"application/pdf\") {\n                        setAlert({\n                          ...alert,\n                          file: true,\n                          message: \"Please choose file PDF...\",\n                        });\n                        setTimeout(() => {\n                          setAlert({\n                            ...alert,\n                            file: false,\n                            message: \"\",\n                          });\n                        }, 3000);\n                      } else if (e.target.files[0].size > 10485760) {\n                        setAlert({\n                          ...alert,\n                          file: true,\n                          message: \"File don't larger 10MB\",\n                        });\n                        setTimeout(() => {\n                          setAlert({\n                            ...alert,\n                            file: false,\n                            message: \"\",\n                          });\n                        }, 3000);\n                      } else {\n                        setFile(e.target.files);\n                        setFileName(e.target.files[0].name);\n                        setShow(true);\n                      }\n                    }\n                  }}\n                />\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Choose file\"\n                  error={alert.file}\n                  helperText={alert.message}\n                  value={fileName}\n                  fullWidth\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <label htmlFor=\"icon-button-file\">\n                          <IconButton color=\"primary\" component=\"span\">\n                            <BackupIcon fontSize=\"large\" />\n                          </IconButton>\n                        </label>\n                      </InputAdornment>\n                    ),\n                    readOnly: true,\n                  }}\n                  style={{ marginTop: \"30px\" }}\n                />\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    if (file.length === 0) {\n                      setAlert({\n                        ...alert,\n                        file: true,\n                        message: \"Please choose file upload !!!\",\n                      });\n                      setTimeout(() => {\n                        setAlert({\n                          ...alert,\n                          file: false,\n                          message: \"\",\n                        });\n                      }, 3000);\n                    } else {\n                      setActiveStep(activeStep + 1);\n                    }\n                  }}\n                  style={{ marginTop: \"30px\" }}\n                >\n                  Next\n                </Button>\n              </div>\n              <div\n                hidden={activeStep === 1 ? false : true}\n                style={{ marginTop: \"15%\" }}\n              >\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                    float: \"left\",\n                  }}\n                >\n                  TITLE OF CONTRACT\n                </Label>\n                <TextField\n                  variant=\"outlined\"\n                  label=\"Title Contract\"\n                  type=\"text\"\n                  name=\"title\"\n                  required\n                  error={alert.title}\n                  helperText={alert.message}\n                  fullWidth\n                  style={{ marginTop: \"20px\" }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <TitleIcon color=\"primary\" fontSize=\"large\" />\n                      </InputAdornment>\n                    ),\n                  }}\n                  onChange={handleOnChange}\n                />\n                <Button\n                  variant=\"contained\"\n                  hidden={activeStep === 0 ? true : false}\n                  color=\"primary\"\n                  style={{ marginTop: \"30px\" }}\n                  onClick={() => setActiveStep(activeStep - 1)}\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\n                  color=\"primary\"\n                  onClick={() => {\n                    if (dataUpload.title.trim() === \"\") {\n                      setAlert({\n                        ...alert,\n                        title: true,\n                        message: \"Please input title of contract !!!\",\n                      });\n                      setTimeout(() => {\n                        setAlert({\n                          ...alert,\n                          title: false,\n                          message: \"\",\n                        });\n                      }, 3000);\n                    } else if (dataUpload.title.length > 255) {\n                      setAlert({\n                        ...alert,\n                        title: true,\n                        message: \"Title max length 255 characters !!!\",\n                      });\n                      setTimeout(() => {\n                        setAlert({\n                          ...alert,\n                          title: false,\n                          message: \"\",\n                        });\n                      }, 3000);\n                    } else {\n                      setActiveStep(activeStep + 1);\n                    }\n                  }}\n                >\n                  Next\n                </Button>\n              </div>\n              <div\n                hidden={activeStep === 2 ? false : true}\n                style={{ marginTop: \"15%\" }}\n              >\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                    float: \"left\",\n                    marginBottom: \"30px\",\n                  }}\n                >\n                  SELECT SIGNER TO SIGN CONTRACT\n                </Label>\n                <Autocomplete\n                  id=\"combo-box-demo\"\n                  options={listSinger}\n                  getOptionLabel={(option) => option.name}\n                  onChange={(event, newValue) => {\n                    setDataUpload({ ...dataUpload, signer: newValue });\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Signer name\"\n                      variant=\"outlined\"\n                      name=\"signer\"\n                      error={alert.signerA}\n                      helperText={alert.message}\n                    />\n                  )}\n                />\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ marginTop: \"30px\" }}\n                  onClick={() => setActiveStep(activeStep - 1)}\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\n                  color=\"primary\"\n                  onClick={() => {\n                    if (dataUpload.signer === null) {\n                      setAlert({\n                        ...alert,\n                        signerA: true,\n                        message: \"Please choose one signer contract !!!\",\n                      });\n                      setTimeout(() => {\n                        setAlert({\n                          ...alert,\n                          signerA: false,\n                          message: \"\",\n                        });\n                      }, 3000);\n                    } else {\n                      setActiveStep(activeStep + 1);\n                    }\n                  }}\n                >\n                  Next\n                </Button>\n              </div>\n              <div\n                hidden={activeStep === 3 ? false : true}\n                style={{ marginTop: \"15%\" }}\n              >\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                    float: \"left\",\n                    marginBottom: \"30px\",\n                  }}\n                >\n                  SELECT COMPANY GUEST\n                </Label>\n                <Autocomplete\n                  options={listCompany}\n                  getOptionLabel={(option) => option.name}\n                  onChange={(event, newValue) => {\n                    setDataUpload({ ...dataUpload, company_guest: newValue });\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Company guest\"\n                      variant=\"outlined\"\n                      name=\"company_guest\"\n                      error={alert.company}\n                      helperText={alert.message}\n                    />\n                  )}\n                />\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ marginTop: \"30px\" }}\n                  onClick={() => setActiveStep(activeStep - 1)}\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\n                  color=\"primary\"\n                  onClick={() => {\n                    if (dataUpload.company_guest === \"\") {\n                      setAlert({\n                        ...alert,\n                        company: true,\n                        message: \"Please select company guest !!!\",\n                      });\n                      setTimeout(() => {\n                        setAlert({\n                          ...alert,\n                          company: false,\n                          message: \"\",\n                        });\n                      }, 3000);\n                    } else {\n                      setActiveStep(activeStep + 1);\n                    }\n                  }}\n                >\n                  Next\n                </Button>\n              </div>\n              <div\n                hidden={activeStep === 4 ? false : true}\n                style={{ marginTop: \"15%\" }}\n              >\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                    float: \"left\",\n                    marginBottom: \"30px\",\n                  }}\n                >\n                  SELECT SIGNER GUEST\n                </Label>\n                <Autocomplete\n                  id=\"combo-box-demo\"\n                  options={listGuest}\n                  getOptionLabel={(option) => option.name}\n                  onChange={(event, newValue) => {\n                    setDataUpload({ ...dataUpload, signer_guest: newValue });\n                  }}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Signer guest\"\n                      variant=\"outlined\"\n                      name=\"signer_guest\"\n                      error={alert.signerB}\n                      helperText={alert.message}\n                    />\n                  )}\n                />\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ marginTop: \"30px\" }}\n                  onClick={() => setActiveStep(activeStep - 1)}\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\n                  color=\"primary\"\n                  onClick={(e) => {\n                    if (dataUpload.signer_guest === null) {\n                      setAlert({\n                        ...alert,\n                        signerB: true,\n                        message:\n                          \"Please choose one singer guest to sign contract !!!\",\n                      });\n                      setTimeout(() => {\n                        setAlert({\n                          ...alert,\n                          signerB: false,\n                          message: \"\",\n                        });\n                      }, 3000);\n                    } else {\n                      setActiveStep(activeStep + 1);\n                    }\n                  }}\n                >\n                  Next\n                </Button>\n              </div>\n              <div\n                hidden={activeStep === 5 ? false : true}\n                style={{ marginTop: \"15%\" }}\n              >\n                <Row>\n                  <Label\n                    style={{\n                      fontSize: \"30px\",\n                      fontWeight: \"bold\",\n                      color: \"blue\",\n                      float: \"left\",\n                      marginBottom: \"30px\",\n                      marginLeft: \"12px\",\n                    }}\n                  >\n                    VIEWER CAN VIEW CONTRACT\n                  </Label>\n                </Row>\n                <Row>\n                  <Col>\n                    <Autocomplete\n                      multiple\n                      id=\"tags-outlined\"\n                      options={listSinger}\n                      getOptionLabel={(option) => option.name}\n                      filterSelectedOptions\n                      onChange={(event, newValue) => {\n                        setViewer(newValue);\n                      }}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"outlined\"\n                          label=\"Select viewer\"\n                          placeholder=\"Viewer \"\n                        />\n                      )}\n                    />\n                  </Col>\n                  <Col>\n                    <Autocomplete\n                      multiple\n                      id=\"tags-outlined\"\n                      options={listGuest}\n                      getOptionLabel={(option) => option.name}\n                      filterSelectedOptions\n                      onChange={(event, newValue) => {\n                        setViewerGuest(newValue);\n                      }}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          variant=\"outlined\"\n                          label=\"Select viewer\"\n                          placeholder=\"Viewer guest\"\n                        />\n                      )}\n                    />\n                  </Col>\n                </Row>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ marginTop: \"30px\" }}\n                  onClick={() => setActiveStep(activeStep - 1)}\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\n                  color=\"primary\"\n                  onClick={() => {\n                    setActiveStep(activeStep + 1);\n                  }}\n                >\n                  Next\n                </Button>\n              </div>\n              <div\n                hidden={activeStep === 6 ? false : true}\n                style={{ marginTop: \"15%\" }}\n              >\n                <Label\n                  style={{\n                    fontSize: \"30px\",\n                    fontWeight: \"bold\",\n                    color: \"blue\",\n                    float: \"left\",\n                  }}\n                >\n                  DATE EXPIRATION INVOICE\n                </Label>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid container justify=\"space-around\">\n                    <KeyboardDatePicker\n                      fullWidth\n                      margin=\"normal\"\n                      id=\"date-picker-dialog\"\n                      label=\"Date expiration\"\n                      format=\"MM/dd/yyyy\"\n                      value={selectedDate}\n                      name=\"date\"\n                      error={alert.date}\n                      helperText={alert.message}\n                      onChange={handleDateChange}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                  </Grid>\n                </MuiPickersUtilsProvider>\n                <Button\n                  variant=\"contained\"\n                  hidden={activeStep === 0 ? true : false}\n                  color=\"primary\"\n                  style={{ marginTop: \"30px\" }}\n                  onClick={() => setActiveStep(activeStep - 1)}\n                >\n                  Back\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  style={{ marginTop: \"30px\", marginLeft: \"10px\" }}\n                  color=\"primary\"\n                  onClick={handleContent}\n                >\n                  Next\n                </Button>\n              </div>\n            </Col>\n            <Col>\n              <Form className=\"form-doc\">\n                <FormGroup row>\n                  <div hidden={show} style={{ marginTop: \"4rem\" }}>\n                    <img src={demo} alt=\"demo\" width=\"600\" height=\"600\" />\n                  </div>\n                  <Paper elevation={3}>\n                    <Document\n                      file={file[0]}\n                      onLoadSuccess={onDocumentLoadSuccess}\n                      noData={false}\n                      onClick={(e) => {\n                        if (locaA === false) {\n                          getLocationA(e);\n                          setColor({ ...color, signerA: \"#3541da\" });\n                        } else if (locaB === false) {\n                          getLocationB(e);\n                          setColor({ ...color, signerB: \"#3541da\" });\n                        }\n                      }}\n                    >\n                      <Page pageNumber={pageNumber} />\n                    </Document>\n                  </Paper>\n                  <div\n                    hidden={pageNumber === 0 ? true : false}\n                    style={{ marginLeft: \"30%\" }}\n                  >\n                    <Typography\n                      style={{\n                        marginTop: \"5px\",\n                      }}\n                    >\n                      Page: {pageNumber}/{numPages}\n                    </Typography>\n                    <Pagination\n                      variant=\"outlined\"\n                      count={numPages}\n                      page={pageNumber}\n                      onChange={handleChange}\n                    />\n                  </div>\n                </FormGroup>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n      </main>\n    </div>\n  );\n}\nexport default CreateDocument;\n","/Users/macos/Desktop/EOfficeWeb/src/components/EditCompany/EditCompany.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/ForgotPassword/ResetPassword.js",["297","298","299"],"import { useState } from \"react\";\nimport { Container, Form, FormGroup } from \"reactstrap\";\nimport logo from \"../../images/logo.png\";\nimport \"../../css/ResetPassword.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button } from \"@material-ui/core\";\nimport { useHistory, useLocation } from \"react-router\";\nimport support from \"../../images/support.png\";\nimport md5 from \"md5\";\nimport userListAPI from \"../../api/userListAPI\";\nimport { toast } from \"react-toastify\";\nimport { removeUserSession } from \"../../utils/Common\";\n\nfunction ResetPassword() {\n  const user = localStorage.getItem(\"user\");\n  const history = useHistory();\n  const [password, setPassword] = useState({\n    new_password: \"\",\n    confirm_password: \"\",\n  });\n  const [error, setError] = useState({\n    correct: false,\n    message: \"\",\n  });\n  const [error2, setError2] = useState({\n    correct: false,\n    message: \"\",\n  });\n  function handleSubmit(event) {\n    event.preventDefault();\n    const regex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$/;\n\n    if (regex.exec(password.new_password) === null) {\n      setError({\n        correct: true,\n        message: \"Password must be more than 6 characters\",\n      });\n      setTimeout(() => {\n        setError({\n          correct: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (!regex.test(password.new_password.trim())) {\n      setError({\n        correct: true,\n        message: \"Password must be at least 6 characters, 1 upper case\",\n      });\n      setTimeout(() => {\n        setError({\n          correct: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (password.confirm_password.trim() === null) {\n      setError2({\n        correct: true,\n        message: \"Please input new password again\",\n      });\n      setTimeout(() => {\n        setError2({\n          correct: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else if (\n      password.confirm_password.trim() !== password.new_password.trim()\n    ) {\n      setError2({\n        correct: true,\n        message: \"Password confirm is not match\",\n      });\n      setTimeout(() => {\n        setError2({\n          correct: false,\n          message: \"\",\n        });\n      }, 3000);\n    } else {\n      const params = {\n        email: user,\n        newPassword: md5(password.new_password),\n      };\n      userListAPI\n        .forgotPassword(params)\n        .then(function () {\n          toast.success(\"Change password successfully\", {\n            position: toast.POSITION.TOP_CENTER,\n          });\n          setTimeout(() => {\n            localStorage.removeItem(\"user\");\n            history.push(\"/\");\n          }, 5000);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }\n\n  function handleOnChange(event) {\n    const target = event.target;\n    const name = target.name;\n    const value = target.value;\n    setPassword({\n      ...password,\n      [name]: value,\n    });\n  }\n\n  return (\n    <div className=\"background\">\n      <Container className=\"a\">\n        <Form className=\"reset\">\n          <FormGroup>\n            <img src={logo} alt=\"\" />\n          </FormGroup>\n          <FormGroup>\n            <h3>Forgot Password?</h3>\n          </FormGroup>\n          <FormGroup>\n            <div>\n              <TextField\n                fullWidth\n                type=\"password\"\n                name=\"new_password\"\n                required\n                onChange={handleOnChange}\n                placeholder=\"New password\"\n                variant=\"outlined\"\n                error={error.correct}\n                helperText={error.message}\n              />\n            </div>\n          </FormGroup>\n          <FormGroup>\n            <TextField\n              fullWidth\n              type=\"password\"\n              name=\"confirm_password\"\n              required\n              onChange={handleOnChange}\n              placeholder=\"Confirm new password\"\n              variant=\"outlined\"\n            />\n          </FormGroup>\n          <FormGroup className=\"update\">\n            <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\">\n              Update\n            </Button>\n          </FormGroup>\n        </Form>\n        <img\n          style={{ position: \"fixed\", bottom: 0, left: 0 }}\n          src={support}\n          alt=\"\"\n          width=\"500\"\n          height=\"100\"\n        />\n      </Container>\n    </div>\n  );\n}\n\nexport default ResetPassword;\n","/Users/macos/Desktop/EOfficeWeb/src/components/App/firebase.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/Sidebar/SidebarAdmin.js",[],"/Users/macos/Desktop/EOfficeWeb/src/api/loginAPI.js",[],"/Users/macos/Desktop/EOfficeWeb/src/api/validateAPI.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/GetAdminCompany/GetAdminCompany.js",[],"/Users/macos/Desktop/EOfficeWeb/src/api/companyListAPI.js",[],"/Users/macos/Desktop/EOfficeWeb/src/api/departmentAPI.js",[],"/Users/macos/Desktop/EOfficeWeb/src/api/userListAPI.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/Sidebar/StepInvoice.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/Navbar/Navbar.js",["300","301","302"],"import * as Icon from \"react-icons/fa\";\nimport * as AiIcon from \"react-icons/ai\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { IconContext } from \"react-icons\";\nimport * as IoIcon from \"react-icons/io\";\nimport * as IoOIcon from \"react-icons/io5\";\nimport logo from \"../../images/eoffice.png\";\nimport \"../../css/Navbar.css\";\nimport { getUser, removeUserSession } from \"../../utils/Common\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport Badge from \"@material-ui/core/Badge\";\nimport notiAPI from \"../../api/notiAPI\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport userListAPI from \"../../api/userListAPI\";\nfunction Navbar() {\n  const history = useHistory();\n  const [sidebar, setSidebar] = useState(false);\n  const showSidebar = () => setSidebar(!sidebar);\n  const [listNoti, setListNoti] = useState([]);\n  const [openNoti, setOpenNoti] = useState(false);\n  const [openProfile, setOpenProfile] = useState(false);\n  const count = listNoti.length;\n  const [currentPage] = useState(1);\n  const [postPerPage] = useState(9);\n  const indexOfLastPost = currentPage * postPerPage;\n  const indexOfFirstPost = indexOfLastPost - postPerPage;\n  var postNotification = listNoti\n    .sort((a, b) => {\n      return (\n        new Date(a.dateCreate).getTime() - new Date(b.dateCreate).getTime()\n      );\n    })\n    .reverse();\n  const currentPostsNoti = postNotification.slice(\n    indexOfFirstPost,\n    indexOfLastPost\n  );\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    async function fetListNoti() {\n      try {\n        const res = await notiAPI.getById(getUser().Id);\n        setListNoti(\n          res.data.filter((noti) => {\n            if (noti.status === 0) {\n              return noti;\n            }\n          })\n        );\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetListNoti();\n  }, []);\n  useEffect(() => {\n    async function getUsers() {\n      try {\n        const response = await userListAPI.getUserById(getUser().Id);\n        setUsers(response.data);\n      } catch (error) {\n        if (error.response.status === 401) {\n          removeUserSession();\n          history.push(\"/\");\n        }\n      }\n    }\n    getUsers();\n  }, []);\n  function NavItemProfile(props) {\n    return (\n      <li\n        className=\"navbar-item\"\n        onClick={(e) => {\n          e.preventDefault();\n          setOpenProfile(!openProfile);\n          setOpenNoti(false);\n        }}\n      >\n        {props.icon}\n        {openProfile && props.children}\n      </li>\n    );\n  }\n  function NavItemNoti(props) {\n    return (\n      <li\n        className=\"navbar-item\"\n        onClick={(e) => {\n          e.preventDefault();\n          setOpenNoti(!openNoti);\n          setOpenProfile(false);\n        }}\n      >\n        {props.icon}\n        {openNoti && props.children}\n      </li>\n    );\n  }\n  function Logout(e) {\n    e.preventDefault();\n    removeUserSession();\n    history.push(\"/\");\n  }\n  function Profile(e) {\n    e.preventDefault();\n    history.push(\"/profile\");\n  }\n  function DropdownMenu2() {\n    function DropdownItem2(props) {\n      return (\n        <div className=\"menu-item\" onClick={props.function}>\n          {props.children}\n        </div>\n      );\n    }\n    return (\n      <div className=\"dropdown-navbar\">\n        {currentPostsNoti.map((noti, index) => {\n          return (\n            <div key={index}>\n              <DropdownItem2>{noti.title}</DropdownItem2>\n            </div>\n          );\n        })}\n        <Link to=\"/notification\" hidden={count < 10 ? true : false}>\n          See more\n        </Link>\n      </div>\n    );\n  }\n  function DropdownMenu1() {\n    function DropdownItem1(props) {\n      return (\n        <div className=\"menu-item\" onClick={props.function}>\n          <span className=\"icon-button\">{props.leftIcon}</span>\n          {props.children}\n        </div>\n      );\n    }\n    return (\n      <div className=\"dropdown-navbar\">\n        <DropdownItem1 leftIcon={<AccountCircleIcon />} function={Profile}>\n          My Profile\n        </DropdownItem1>\n        <DropdownItem1 leftIcon={<ExitToAppIcon />} function={Logout}>\n          Logout\n        </DropdownItem1>\n      </div>\n    );\n  }\n  return (\n    <IconContext.Provider value={{ color: \"#404f9f\" }}>\n      <div className=\"navbar1 navbar-fixed-top\">\n        <Icon.FaBars\n          onClick={() => {\n            showSidebar();\n            setTimeout(() => {\n              setSidebar(false);\n            }, 10000);\n          }}\n          className=\"menu-bars\"\n        />\n        <img src={logo} alt=\"\" style={{ marginLeft: 20, marginTop: 10 }} />\n        <nav style={{ display: \"flex\", right: 20, position: \"absolute\" }}>\n          <ul className=\"navbar-nav\">\n            <NavItemNoti\n              icon={\n                <Badge badgeContent={count < 10 ? count : \"9+\"} color=\"error\">\n                  <NotificationsIcon\n                    style={{ cursor: \"pointer\" }}\n                    color=\"action\"\n                    fontSize=\"large\"\n                  />\n                </Badge>\n              }\n            >\n              <DropdownMenu2 />\n            </NavItemNoti>\n            <NavItemProfile\n              icon={\n                <img\n                  className=\"icon-button\"\n                  style={{ cursor: \"pointer\" }}\n                  src={users.avatar}\n                  alt=\"avatar\"\n                />\n              }\n            >\n              <DropdownMenu1 />\n            </NavItemProfile>\n            <li className=\"nav-text\">\n              <span style={{ fontWeight: \"bolder\" }}>{getUser().Name}</span>\n            </li>\n          </ul>\n        </nav>\n      </div>\n      <nav className={sidebar ? \"nav-menu active\" : \"nav-menu\"}>\n        <ul className=\"nav-menu-items sn-bg-4\" onClick={showSidebar}>\n          <li className=\"navbar-toogle\">\n            <img src={logo} alt=\"\" style={{ marginLeft: 70, marginTop: 10 }} />\n            <IoOIcon.IoClose\n              onClick={showSidebar}\n              className=\"menu-bars-close\"\n            />\n          </li>\n          <li className=\"nav-text\">\n            <Link to=\"/dashboard\">\n              <AiIcon.AiOutlineDashboard />\n              <span style={{ marginLeft: 20 }}>Dashboard</span>\n            </Link>\n          </li>\n          <li className=\"nav-text\">\n            <Link to=\"/document\">\n              <IoOIcon.IoDocumentOutline />\n              <span style={{ marginLeft: 20 }}>Document</span>\n            </Link>\n          </li>\n          <li\n            className=\"nav-text\"\n            hidden={getUser().Role === \"2\" ? true : false}\n          >\n            <Link to=\"/user-management\">\n              <AiIcon.AiOutlineUser />\n              <span style={{ marginLeft: 20 }}>User Management</span>\n            </Link>\n          </li>\n          <li\n            className=\"nav-text\"\n            hidden={getUser().Role === \"2\" ? true : false}\n          >\n            <Link to=\"/department\">\n              <AiIcon.AiOutlineDashboard />\n              <span style={{ marginLeft: 20 }}>Department Management</span>\n            </Link>\n          </li>\n          <li className=\"nav-text\">\n            <Link to=\"/notification\">\n              <IoIcon.IoIosNotificationsOutline />\n              <span style={{ marginLeft: 20 }}>Notification</span>\n            </Link>\n          </li>\n        </ul>\n      </nav>\n    </IconContext.Provider>\n  );\n}\nexport default Navbar;\n","/Users/macos/Desktop/EOfficeWeb/src/components/Sidebar/Stepper.js",[],"/Users/macos/Desktop/EOfficeWeb/src/api/axiosClient.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/GetData/GetDepartment.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/GetData/GetPhone.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/GetData/GetEmail.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/Sidebar/StepDetailContract.js",[],"/Users/macos/Desktop/EOfficeWeb/src/api/contractAPI.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/GetData/GetCreater.js",[],"/Users/macos/Desktop/EOfficeWeb/src/api/notiAPI.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/PDF/PDF.js",[],"/Users/macos/Desktop/EOfficeWeb/src/api/invoiceAPI.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/Sidebar/StepDetail.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/Stepper/ContractStepper.js",[],"/Users/macos/Desktop/EOfficeWeb/src/components/Stepper/InvoiceStepper.js",[],{"ruleId":"303","severity":1,"message":"304","line":2,"column":20,"nodeType":"305","messageId":"306","endLine":2,"endColumn":26},{"ruleId":"307","severity":1,"message":"308","line":67,"column":22,"nodeType":"309","messageId":"310","endLine":67,"endColumn":23},{"ruleId":"307","severity":1,"message":"308","line":67,"column":28,"nodeType":"309","messageId":"310","endLine":67,"endColumn":29},{"ruleId":"307","severity":1,"message":"308","line":67,"column":45,"nodeType":"309","messageId":"310","endLine":67,"endColumn":46},{"ruleId":"307","severity":1,"message":"308","line":80,"column":26,"nodeType":"309","messageId":"310","endLine":80,"endColumn":27},{"ruleId":"307","severity":1,"message":"308","line":80,"column":32,"nodeType":"309","messageId":"310","endLine":80,"endColumn":33},{"ruleId":"307","severity":1,"message":"308","line":80,"column":49,"nodeType":"309","messageId":"310","endLine":80,"endColumn":50},{"ruleId":"307","severity":1,"message":"308","line":92,"column":30,"nodeType":"309","messageId":"310","endLine":92,"endColumn":31},{"ruleId":"307","severity":1,"message":"308","line":92,"column":36,"nodeType":"309","messageId":"310","endLine":92,"endColumn":37},{"ruleId":"307","severity":1,"message":"308","line":92,"column":53,"nodeType":"309","messageId":"310","endLine":92,"endColumn":54},{"ruleId":"307","severity":1,"message":"308","line":104,"column":32,"nodeType":"309","messageId":"310","endLine":104,"endColumn":33},{"ruleId":"307","severity":1,"message":"308","line":104,"column":38,"nodeType":"309","messageId":"310","endLine":104,"endColumn":39},{"ruleId":"307","severity":1,"message":"308","line":104,"column":55,"nodeType":"309","messageId":"310","endLine":104,"endColumn":56},{"ruleId":"307","severity":1,"message":"308","line":121,"column":36,"nodeType":"309","messageId":"310","endLine":121,"endColumn":37},{"ruleId":"307","severity":1,"message":"308","line":121,"column":42,"nodeType":"309","messageId":"310","endLine":121,"endColumn":43},{"ruleId":"307","severity":1,"message":"308","line":121,"column":59,"nodeType":"309","messageId":"310","endLine":121,"endColumn":60},{"ruleId":"311","severity":1,"message":"312","line":57,"column":26,"nodeType":"313","messageId":"314","endLine":57,"endColumn":28},{"ruleId":"311","severity":1,"message":"312","line":66,"column":26,"nodeType":"313","messageId":"314","endLine":66,"endColumn":28},{"ruleId":"311","severity":1,"message":"312","line":188,"column":32,"nodeType":"313","messageId":"314","endLine":188,"endColumn":34},{"ruleId":"311","severity":1,"message":"315","line":94,"column":23,"nodeType":"313","messageId":"316","endLine":94,"endColumn":25},{"ruleId":"307","severity":1,"message":"308","line":111,"column":48,"nodeType":"309","messageId":"310","endLine":111,"endColumn":49},{"ruleId":"307","severity":1,"message":"308","line":111,"column":54,"nodeType":"309","messageId":"310","endLine":111,"endColumn":55},{"ruleId":"307","severity":1,"message":"308","line":111,"column":71,"nodeType":"309","messageId":"310","endLine":111,"endColumn":72},{"ruleId":"307","severity":1,"message":"308","line":112,"column":46,"nodeType":"309","messageId":"310","endLine":112,"endColumn":47},{"ruleId":"307","severity":1,"message":"308","line":112,"column":52,"nodeType":"309","messageId":"310","endLine":112,"endColumn":53},{"ruleId":"307","severity":1,"message":"308","line":112,"column":69,"nodeType":"309","messageId":"310","endLine":112,"endColumn":70},{"ruleId":"307","severity":1,"message":"308","line":144,"column":26,"nodeType":"309","messageId":"310","endLine":144,"endColumn":27},{"ruleId":"307","severity":1,"message":"308","line":144,"column":32,"nodeType":"309","messageId":"310","endLine":144,"endColumn":33},{"ruleId":"307","severity":1,"message":"308","line":144,"column":49,"nodeType":"309","messageId":"310","endLine":144,"endColumn":50},{"ruleId":"317","severity":1,"message":"318","line":184,"column":6,"nodeType":"319","endLine":184,"endColumn":8,"suggestions":"320"},{"ruleId":"307","severity":1,"message":"308","line":105,"column":22,"nodeType":"309","messageId":"310","endLine":105,"endColumn":23},{"ruleId":"307","severity":1,"message":"308","line":105,"column":28,"nodeType":"309","messageId":"310","endLine":105,"endColumn":29},{"ruleId":"307","severity":1,"message":"308","line":105,"column":45,"nodeType":"309","messageId":"310","endLine":105,"endColumn":46},{"ruleId":"303","severity":1,"message":"321","line":15,"column":8,"nodeType":"305","messageId":"306","endLine":15,"endColumn":14},{"ruleId":"303","severity":1,"message":"322","line":20,"column":10,"nodeType":"305","messageId":"306","endLine":20,"endColumn":16},{"ruleId":"307","severity":1,"message":"308","line":137,"column":22,"nodeType":"309","messageId":"310","endLine":137,"endColumn":23},{"ruleId":"307","severity":1,"message":"308","line":137,"column":28,"nodeType":"309","messageId":"310","endLine":137,"endColumn":29},{"ruleId":"307","severity":1,"message":"308","line":137,"column":45,"nodeType":"309","messageId":"310","endLine":137,"endColumn":46},{"ruleId":"311","severity":1,"message":"315","line":168,"column":43,"nodeType":"313","messageId":"316","endLine":168,"endColumn":45},{"ruleId":"311","severity":1,"message":"312","line":176,"column":37,"nodeType":"313","messageId":"314","endLine":176,"endColumn":39},{"ruleId":"311","severity":1,"message":"312","line":187,"column":37,"nodeType":"313","messageId":"314","endLine":187,"endColumn":39},{"ruleId":"311","severity":1,"message":"312","line":200,"column":39,"nodeType":"313","messageId":"314","endLine":200,"endColumn":41},{"ruleId":"311","severity":1,"message":"312","line":208,"column":36,"nodeType":"313","messageId":"314","endLine":208,"endColumn":38},{"ruleId":"311","severity":1,"message":"312","line":216,"column":35,"nodeType":"313","messageId":"314","endLine":216,"endColumn":37},{"ruleId":"311","severity":1,"message":"312","line":228,"column":39,"nodeType":"313","messageId":"314","endLine":228,"endColumn":41},{"ruleId":"311","severity":1,"message":"312","line":236,"column":36,"nodeType":"313","messageId":"314","endLine":236,"endColumn":38},{"ruleId":"311","severity":1,"message":"312","line":244,"column":35,"nodeType":"313","messageId":"314","endLine":244,"endColumn":37},{"ruleId":"311","severity":1,"message":"312","line":551,"column":32,"nodeType":"313","messageId":"314","endLine":551,"endColumn":34},{"ruleId":"311","severity":1,"message":"312","line":73,"column":24,"nodeType":"313","messageId":"314","endLine":73,"endColumn":26},{"ruleId":"311","severity":1,"message":"312","line":89,"column":24,"nodeType":"313","messageId":"314","endLine":89,"endColumn":26},{"ruleId":"323","severity":1,"message":"324","line":374,"column":25,"nodeType":"325","messageId":"326","endLine":374,"endColumn":29,"fix":"327"},{"ruleId":"317","severity":1,"message":"328","line":82,"column":6,"nodeType":"319","endLine":82,"endColumn":8,"suggestions":"329"},{"ruleId":"311","severity":1,"message":"312","line":125,"column":30,"nodeType":"313","messageId":"314","endLine":125,"endColumn":32},{"ruleId":"311","severity":1,"message":"312","line":132,"column":30,"nodeType":"313","messageId":"314","endLine":132,"endColumn":32},{"ruleId":"311","severity":1,"message":"312","line":139,"column":30,"nodeType":"313","messageId":"314","endLine":139,"endColumn":32},{"ruleId":"307","severity":1,"message":"308","line":362,"column":24,"nodeType":"309","messageId":"310","endLine":362,"endColumn":25},{"ruleId":"307","severity":1,"message":"308","line":362,"column":30,"nodeType":"309","messageId":"310","endLine":362,"endColumn":31},{"ruleId":"307","severity":1,"message":"308","line":362,"column":47,"nodeType":"309","messageId":"310","endLine":362,"endColumn":48},{"ruleId":"311","severity":1,"message":"312","line":899,"column":33,"nodeType":"313","messageId":"314","endLine":899,"endColumn":35},{"ruleId":"330","severity":1,"message":"331","line":1109,"column":19,"nodeType":"332","endLine":1109,"endColumn":49},{"ruleId":"330","severity":1,"message":"331","line":1111,"column":19,"nodeType":"332","endLine":1111,"endColumn":47},{"ruleId":"307","severity":1,"message":"308","line":127,"column":24,"nodeType":"309","messageId":"310","endLine":127,"endColumn":25},{"ruleId":"307","severity":1,"message":"308","line":127,"column":30,"nodeType":"309","messageId":"310","endLine":127,"endColumn":31},{"ruleId":"307","severity":1,"message":"308","line":127,"column":47,"nodeType":"309","messageId":"310","endLine":127,"endColumn":48},{"ruleId":"307","severity":1,"message":"308","line":191,"column":24,"nodeType":"309","messageId":"310","endLine":191,"endColumn":25},{"ruleId":"307","severity":1,"message":"308","line":191,"column":30,"nodeType":"309","messageId":"310","endLine":191,"endColumn":31},{"ruleId":"307","severity":1,"message":"308","line":191,"column":47,"nodeType":"309","messageId":"310","endLine":191,"endColumn":48},{"ruleId":"307","severity":1,"message":"308","line":253,"column":24,"nodeType":"309","messageId":"310","endLine":253,"endColumn":25},{"ruleId":"307","severity":1,"message":"308","line":253,"column":30,"nodeType":"309","messageId":"310","endLine":253,"endColumn":31},{"ruleId":"307","severity":1,"message":"308","line":253,"column":47,"nodeType":"309","messageId":"310","endLine":253,"endColumn":48},{"ruleId":"307","severity":1,"message":"308","line":319,"column":24,"nodeType":"309","messageId":"310","endLine":319,"endColumn":25},{"ruleId":"307","severity":1,"message":"308","line":319,"column":30,"nodeType":"309","messageId":"310","endLine":319,"endColumn":31},{"ruleId":"307","severity":1,"message":"308","line":319,"column":47,"nodeType":"309","messageId":"310","endLine":319,"endColumn":48},{"ruleId":"307","severity":1,"message":"308","line":165,"column":48,"nodeType":"309","messageId":"310","endLine":165,"endColumn":49},{"ruleId":"307","severity":1,"message":"308","line":165,"column":54,"nodeType":"309","messageId":"310","endLine":165,"endColumn":55},{"ruleId":"307","severity":1,"message":"308","line":165,"column":71,"nodeType":"309","messageId":"310","endLine":165,"endColumn":72},{"ruleId":"307","severity":1,"message":"308","line":166,"column":46,"nodeType":"309","messageId":"310","endLine":166,"endColumn":47},{"ruleId":"307","severity":1,"message":"308","line":166,"column":52,"nodeType":"309","messageId":"310","endLine":166,"endColumn":53},{"ruleId":"307","severity":1,"message":"308","line":166,"column":69,"nodeType":"309","messageId":"310","endLine":166,"endColumn":70},{"ruleId":"307","severity":1,"message":"308","line":214,"column":26,"nodeType":"309","messageId":"310","endLine":214,"endColumn":27},{"ruleId":"307","severity":1,"message":"308","line":214,"column":32,"nodeType":"309","messageId":"310","endLine":214,"endColumn":33},{"ruleId":"307","severity":1,"message":"308","line":214,"column":49,"nodeType":"309","messageId":"310","endLine":214,"endColumn":50},{"ruleId":"317","severity":1,"message":"318","line":252,"column":6,"nodeType":"319","endLine":252,"endColumn":8,"suggestions":"333"},{"ruleId":"303","severity":1,"message":"334","line":7,"column":22,"nodeType":"305","messageId":"306","endLine":7,"endColumn":33},{"ruleId":"303","severity":1,"message":"335","line":12,"column":10,"nodeType":"305","messageId":"306","endLine":12,"endColumn":27},{"ruleId":"303","severity":1,"message":"336","line":25,"column":10,"nodeType":"305","messageId":"306","endLine":25,"endColumn":16},{"ruleId":"303","severity":1,"message":"337","line":16,"column":8,"nodeType":"305","messageId":"306","endLine":16,"endColumn":21},{"ruleId":"311","severity":1,"message":"312","line":47,"column":34,"nodeType":"313","messageId":"314","endLine":47,"endColumn":36},{"ruleId":"317","severity":1,"message":"338","line":72,"column":6,"nodeType":"319","endLine":72,"endColumn":8,"suggestions":"339"},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addEventListeners' and 'removeEventListeners'. Either include them or remove the dependency array.","ArrayExpression",["340"],"'notDoc' is defined but never used.","'hidden' is assigned a value but never used.","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"341","text":"342"},"React Hook useEffect has a missing dependency: 'param.id'. Either include it or remove the dependency array.",["343"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["344"],"'useLocation' is defined but never used.","'removeUserSession' is defined but never used.","'error2' is assigned a value but never used.","'MoreHorizIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["345"],{"desc":"346","fix":"347"},[10192,10203],"",{"desc":"348","fix":"349"},{"desc":"346","fix":"350"},{"desc":"351","fix":"352"},"Update the dependencies array to be: [addEventListeners, removeEventListeners]",{"range":"353","text":"354"},"Update the dependencies array to be: [param.id]",{"range":"355","text":"356"},{"range":"357","text":"354"},"Update the dependencies array to be: [history]",{"range":"358","text":"359"},[5357,5359],"[addEventListeners, removeEventListeners]",[3003,3005],"[param.id]",[6976,6978],[2398,2400],"[history]"]